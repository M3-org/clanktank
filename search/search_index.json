{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Clank Tank \ud83e\udd16\ud83d\udcb0","text":"<p>An AI-powered game show where entrepreneurs pitch to simulated judges, competing for virtual funding and real attention.</p> Visit Official Website \u2022    Submit Your Pitch \u2022   Watch Latest Episode"},{"location":"#about-clank-tank","title":"About Clank Tank","text":"<p>Clank Tank is an autonomous entertainment platform where users submit real business pitches that are transformed into complete, simulated episodes featuring AI-generated characters, dialogue, and interactions. Inspired by \"Shark Tank,\" our system creates entertaining show episodes that provide exposure for projects while offering AI-driven feedback.</p> <p>The show features a panel of AI judges who evaluate pitches, question the presenter, and ultimately decide whether to \"pump\" or \"dump\" the project.</p>"},{"location":"#latest-episode","title":"Latest Episode","text":"<p>Watch Episode S1E1: The AI Battle Arena</p>"},{"location":"#how-it-works","title":"How It Works","text":"<ol> <li>Pitch Submission: Entrepreneurs submit their project details and personal information through our submission form</li> <li>AI Simulation: Our system creates an AI character to represent the pitcher and generates a complete episode script</li> <li>Real-Time Rendering: The episode is rendered in 3D using PlayCanvas (with variants for Unity/Unreal)</li> <li>Publishing: Episodes are shared via web embeds and social media clips</li> <li>Feedback &amp; Exposure: Projects gain visibility, useful critique, and potential connections to capital</li> </ol>"},{"location":"#technical-architecture","title":"Technical Architecture","text":"<p>The Clank Tank system uses a modular architecture with several key components:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Pitch System   \u2502\u2500\u2500\u2500\u2500\u25b6\u2502  Writers Room \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 Episode Builder \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                                              \u2502\n         \u25bc                                              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Human Review   \u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502  JSON Episode   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                                              \u2502\n         \u25bc                                              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Video Production\u2502\u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502 3D Playback     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 docs/               # Documentation and concept files\n\u251c\u2500\u2500 media/              # Assets for the show\n\u2502   \u251c\u2500\u2500 cast/           # Character images and headshots\n\u2502   \u251c\u2500\u2500 clips/          # Video segments (intro, outro, transitions)\n\u2502   \u2514\u2500\u2500 thumbnails/     # Episode thumbnails and promotional images\n\u251c\u2500\u2500 scripts/            # Automation tools\n\u2502   \u2514\u2500\u2500 shmotime-recorder.js  # Recording utility for episodes\n\u2514\u2500\u2500 README.md           # This file\n</code></pre>"},{"location":"#core-components","title":"Core Components","text":"<ol> <li>AI Writers' Room: Uses Anthropic Claude to generate natural dialogue and interactions between judges and pitchers</li> <li>Rendering Framework: PlayCanvas (web-based) with planned support for Unity/Unreal for higher fidelity</li> <li>Show Runner: JSON-based event system that controls the flow of scenes, dialogue, and camera work</li> <li>Audio Pipeline: ElevenLabs for voice synthesis plus sound effects and transitions</li> <li>Recording System: Automated tools to create high-quality recordings from rendered episodes</li> </ol>"},{"location":"#running-the-recorder","title":"Running the Recorder","text":"<p>The repository includes a powerful recording tool for capturing high-quality videos of episodes:</p> <pre><code># Record an episode\nnode scripts/shmotime-recorder.js https://shmotime.com/shmotime_episode/your-episode-url/\n\n# For more options\nnode scripts/shmotime-recorder.js --help\n</code></pre>"},{"location":"#season-1-development-roadmap","title":"Season 1 Development Roadmap","text":""},{"location":"#phase-1-production-enhancement-current","title":"Phase 1: Production Enhancement (Current)","text":"<ul> <li>[ ] Complete audio pipeline with compression/DSP for voices</li> <li>[x] Create consistent sound effect package (stingers, transitions)</li> <li>[x] Implement professional intro/outro videos</li> <li>[ ] Add buffer space between dialogue lines for better pacing</li> <li>[ ] Develop structured segment format for episodes</li> </ul>"},{"location":"#phase-2-content-improvement","title":"Phase 2: Content Improvement","text":"<ul> <li>[ ] Enhanced judge interactions with deeper questioning</li> <li>[ ] Project demo integrations (15-30 seconds each)</li> <li>[ ] Balanced episode structure with varied pitches</li> <li>[ ] Multi-agent AI writers' room</li> </ul>"},{"location":"#phase-3-community-integration","title":"Phase 3: Community Integration","text":"<ul> <li>[ ] Audience feedback mechanisms</li> <li>[ ] Post-episode resources (PDF/webpage with project details)</li> <li>[ ] Token-based voting system</li> <li>[ ] Community submission review system</li> <li>[ ] Special guest judges from community</li> </ul>"},{"location":"#phase-4-format-expansion","title":"Phase 4: Format Expansion","text":"<ul> <li>[ ] Grant proposal reviews</li> <li>[ ] Hackathon judging</li> <li>[ ] Governance discussions</li> <li>[ ] Extended episode formats</li> </ul> <p>Clank Tank is an entertainment platform and does not provide financial advice. All judge decisions are simulated and do not constitute real investment offers.</p>"},{"location":"pitch-pipeline/","title":"Pitch pipeline","text":""},{"location":"pitch-pipeline/#clank-tank-pitch-processing-pipeline","title":"Clank Tank Pitch Processing Pipeline","text":"<p>A comprehensive system for managing pitch submissions from Tally/Typeform through Google Sheets, with status tracking, AI research, and character creation for episode production.</p>"},{"location":"pitch-pipeline/#system-overview","title":"System Overview","text":"<p>The pitch processing pipeline transforms submissions from external forms into structured character data ready for episode generation:</p> <pre><code>Tally/Typeform \u2192 Google Sheets \u2192 SQLite Database \u2192 Research \u2192 Character Folders \u2192 Episodes\n</code></pre>"},{"location":"pitch-pipeline/#core-components","title":"Core Components","text":"<ol> <li>sheet_processor.py - Enhanced Google Sheets processor with SQLite integration</li> <li>pitch_manager.py - Management tool for research, status tracking, and character creation  </li> <li>deepsearch.py - AI-powered research using OpenRouter + Perplexity</li> <li>SQLite Database - Comprehensive submission tracking with status workflow</li> </ol>"},{"location":"pitch-pipeline/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Install required packages:   <pre><code>pip install gspread sqlite3\n</code></pre></li> <li>Google API credentials set up for service account access</li> <li>OpenRouter API key for research functionality (in deepsearch.py)</li> </ul>"},{"location":"pitch-pipeline/#setup","title":"Setup","text":""},{"location":"pitch-pipeline/#1-google-api-setup","title":"1. Google API Setup","text":"<ul> <li>Create a service account in Google Cloud Console</li> <li>Enable the Google Sheets API and Google Drive API</li> <li>Create and download a service account key (JSON format)</li> <li>Share your spreadsheet with the service account email address</li> <li>Save the service account key to <code>~/.config/gspread/service_account.json</code></li> </ul>"},{"location":"pitch-pipeline/#2-directory-structure","title":"2. Directory Structure","text":"<pre><code># Create required directories\nmkdir -p data characters\n</code></pre>"},{"location":"pitch-pipeline/#3-openrouter-configuration","title":"3. OpenRouter Configuration","text":"<ul> <li>Set up OpenRouter API key in <code>deepsearch.py</code> for research functionality</li> <li>Ensure OPENAI_API_KEY variable is configured</li> </ul>"},{"location":"pitch-pipeline/#status-workflow","title":"Status Workflow","text":"<p>Pitches progress through four main states with visual indicators:</p> Status Emoji Description <code>submitted</code> \ud83d\udfe1 Fresh from Google Sheets <code>researched</code> \ud83d\udd35 AI research completed via deepsearch.py <code>in_progress</code> \ud83d\udfe0 Character folder created, episode development started <code>done</code> \ud83d\udfe2 Episode published on YouTube"},{"location":"pitch-pipeline/#usage-guide","title":"Usage Guide","text":""},{"location":"pitch-pipeline/#1-initial-data-import","title":"1. Initial Data Import","text":"<p>Process Google Sheets submissions: <pre><code># Import from Google Sheets to SQLite database and JSON\npython sheet_processor.py -s \"Block Tank Pitch Submission\" -o ./data -j --db-file pitches.db\n\n# For testing with CSV export\npython test_csv_processor.py  # Uses blocktank.csv\n</code></pre></p>"},{"location":"pitch-pipeline/#2-review-and-manage-submissions","title":"2. Review and Manage Submissions","text":"<p>List all pitches: <pre><code>python pitch_manager.py --db-file data/pitches.db --list\n</code></pre></p> <p>Filter by status: <pre><code>python pitch_manager.py --db-file data/pitches.db --list --filter-status submitted\npython pitch_manager.py --db-file data/pitches.db --list --filter-status researched\n</code></pre></p>"},{"location":"pitch-pipeline/#3-research-workflow","title":"3. Research Workflow","text":"<p>Research specific pitches: <pre><code>python pitch_manager.py --db-file data/pitches.db --research 4Z5rGo\n</code></pre></p> <p>Batch research (manual - research individual IDs as needed): <pre><code># List all submitted pitches, then research each individually\npython pitch_manager.py --db-file data/pitches.db --list --filter-status submitted\n</code></pre></p>"},{"location":"pitch-pipeline/#4-character-creation","title":"4. Character Creation","text":"<p>Create character folders for researched pitches: <pre><code># Create for all researched pitches\npython pitch_manager.py --db-file data/pitches.db --create-character all\n\n# Or create for specific pitch\npython pitch_manager.py --db-file data/pitches.db --create-character 4Z5rGo\n</code></pre></p>"},{"location":"pitch-pipeline/#5-status-management","title":"5. Status Management","text":"<p>Update pitch status: <pre><code>python pitch_manager.py --db-file data/pitches.db --status 4Z5rGo in_progress\npython pitch_manager.py --db-file data/pitches.db --status 4Z5rGo done\n</code></pre></p>"},{"location":"pitch-pipeline/#6-export-for-dashboard","title":"6. Export for Dashboard","text":"<p>Export database to JSON: <pre><code>python pitch_manager.py --db-file data/pitches.db --export-json submissions.json\n</code></pre></p>"},{"location":"pitch-pipeline/#automated-processing","title":"Automated Processing","text":"<p>Daily processing via cron: <pre><code># Add to crontab -e to run at 9 AM daily\n0 9 * * * cd /path/to/clanktank/scripts &amp;&amp; python sheet_processor.py -s \"Block Tank Pitch Submission\" -o ../data -j --db-file pitches.db\n</code></pre></p>"},{"location":"pitch-pipeline/#command-reference","title":"Command Reference","text":""},{"location":"pitch-pipeline/#sheet_processorpy-options","title":"sheet_processor.py Options","text":"Option Description <code>-s</code>, <code>--sheet</code> Google Sheet name (required) <code>-o</code>, <code>--output</code> Output folder for files (default: <code>./output</code>) <code>-c</code>, <code>--credentials</code> Path to service account credentials (default: <code>~/.config/gspread/service_account.json</code>) <code>-j</code>, <code>--json</code> Export a single consolidated JSON file of all submissions <code>--json-file</code> Name of the consolidated JSON file (default: <code>submissions.json</code>) <code>--no-markdown</code> Skip creating individual Markdown files <code>--db-file</code> Name of the SQLite database file (default: <code>pitches.db</code>)"},{"location":"pitch-pipeline/#pitch_managerpy-options","title":"pitch_manager.py Options","text":"Option Description <code>--db-file</code> Path to SQLite database file (default: <code>pitches.db</code>) <code>--list</code> List all pitches <code>--filter-status</code> Filter pitches by status (submitted, researched, in_progress, done) <code>--status ID STATUS</code> Update pitch status (e.g., --status 4Z5rGo researched) <code>--research ID</code> Run research on specific pitch using deepsearch.py <code>--create-character ID</code> Create character folder (use 'all' for all researched pitches) <code>--export-json FILE</code> Export database to JSON file"},{"location":"pitch-pipeline/#output-formats","title":"Output Formats","text":""},{"location":"pitch-pipeline/#1-sqlite-database","title":"1. SQLite Database","text":"<p>Comprehensive database with all typeform fields: - Submission metadata (ID, respondent, timestamps) - Contact information (name, discord/telegram, email) - Project details (title, character name, character info, pitch info) - 3D model and customization options - Status tracking and workflow fields - Research data and character creation tracking</p>"},{"location":"pitch-pipeline/#2-markdown-files","title":"2. Markdown Files","text":"<p>Individual files for each submission with bullet-point formatting: <pre><code># Project Submission: [Project Title]\n\n## Submission Details\n- **Submission ID:** [ID]\n- **Submitted at:** [Date/Time]\n- **Name:** [Name]\n- **Contact:** [Discord/Telegram]\n\n## Project Details\n- **Project Title:** [Title]\n- **Character Name:** [Character]\n\n## Character Info\n[Character description...]\n\n## Pitch Info\n[Pitch content...]\n\n## Additional Details\n- **3D Model Available:** [Yes/No]\n- **Commission Request:** [Yes/No]\n- **Custom Voice:** [Yes/No]\n</code></pre></p>"},{"location":"pitch-pipeline/#3-json-export","title":"3. JSON Export","text":"<p>Dashboard-compatible format with status tracking: <pre><code>{\n  \"submissions\": [\n    {\n      \"submission_id\": \"4Z5rGo\",\n      \"submitted_at\": \"2025-01-31 1:12:04\",\n      \"name\": \"ctrlaltelite aka Duck\",\n      \"project_title\": \"Larp Detective Agency\",\n      \"character_name\": \"Scarlett\",\n      \"status\": \"researched\",\n      \"research\": {\n        \"completed_at\": \"2025-01-31T20:30:00Z\",\n        \"findings\": \"...\",\n        \"sources\": [\"url1\", \"url2\"]\n      },\n      \"character\": {\n        \"folder_created\": true,\n        \"folder_path\": \"../characters/scarlett\"\n      }\n    }\n  ],\n  \"last_updated\": \"2025-01-31 15:30:25\",\n  \"total_submissions\": 87,\n  \"status_counts\": {\n    \"submitted\": 85,\n    \"researched\": 1,\n    \"in_progress\": 1,\n    \"done\": 0\n  }\n}\n</code></pre></p>"},{"location":"pitch-pipeline/#4-character-folders","title":"4. Character Folders","text":"<p>Structured folders in <code>characters/</code> directory: <pre><code>characters/\n\u251c\u2500\u2500 scarlett/\n\u2502   \u251c\u2500\u2500 raw_data.json     # Complete submission data\n\u2502   \u2514\u2500\u2500 README.md         # Formatted character info\n\u2514\u2500\u2500 spore/\n    \u251c\u2500\u2500 raw_data.json\n    \u2514\u2500\u2500 README.md\n</code></pre></p>"},{"location":"pitch-pipeline/#integration-with-episode-production","title":"Integration with Episode Production","text":"<p>The pitch pipeline integrates with the broader Clank Tank workflow:</p> <ol> <li>Character Data \u2192 Used by episode generation system</li> <li>Status Tracking \u2192 Episodes marked as 'done' when published</li> <li>Research Results \u2192 Enhanced character backgrounds for better episodes</li> <li>Dashboard Export \u2192 Real-time pipeline visibility for team</li> </ol>"},{"location":"pitch-pipeline/#database-schema","title":"Database Schema","text":"<p>Complete SQLite schema with all typeform fields preserved:</p> <pre><code>CREATE TABLE pitches (\n    -- Identifiers\n    submission_id TEXT PRIMARY KEY,\n    respondent_id TEXT,\n\n    -- Submission metadata\n    submitted_at TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n\n    -- Contact information\n    name TEXT,\n    contact_info TEXT,\n    discord_telegram_username TEXT,\n\n    -- Project details\n    project_title TEXT,\n    character_name TEXT,\n    character_info TEXT,\n    pitch_info TEXT,\n\n    -- 3D Model &amp; customization options\n    has_3d_model TEXT,\n    model_file_upload TEXT,\n    wants_commission TEXT,\n    custom_voice TEXT,\n    voice_file_upload TEXT,\n\n    -- Status tracking\n    status TEXT DEFAULT 'submitted',\n\n    -- Research data\n    research_completed_at TEXT,\n    research_findings TEXT,\n    research_sources TEXT,\n\n    -- Character creation tracking\n    character_folder_created BOOLEAN DEFAULT FALSE,\n    character_folder_path TEXT,\n\n    -- Episode tracking\n    episode_url TEXT,\n    youtube_url TEXT\n);\n</code></pre>"},{"location":"pitch-pipeline/#complete-example-workflow","title":"Complete Example Workflow","text":"<pre><code># 1. Import submissions from Google Sheets\npython sheet_processor.py -s \"Block Tank Pitch Submission\" -o ./data -j --db-file pitches.db\n\n# 2. Review new submissions\npython pitch_manager.py --db-file data/pitches.db --list --filter-status submitted\n\n# 3. Research promising pitches\npython pitch_manager.py --db-file data/pitches.db --research 4Z5rGo\npython pitch_manager.py --db-file data/pitches.db --research J7RBzr\n\n# 4. Create character folders for researched pitches\npython pitch_manager.py --db-file data/pitches.db --create-character all\n\n# 5. Export data for dashboard\npython pitch_manager.py --db-file data/pitches.db --export-json submissions.json\n\n# 6. Update status as episodes are produced\npython pitch_manager.py --db-file data/pitches.db --status 4Z5rGo done\n</code></pre> <p>This automated pipeline ensures efficient processing from submission to episode production.</p>"},{"location":"hackathon-edition/","title":"Clank Tank Hackathon Edition","text":"<p>Welcome to the documentation for adapting Clank Tank to judge hackathons using AI-powered judges.</p>"},{"location":"hackathon-edition/#overview","title":"Overview","text":"<p>Clank Tank Hackathon Edition transforms our AI-powered game show platform into an automated hackathon judging system. Projects are evaluated by our AI judges (Marc, Shaw, Spartan, and Peepo) through a two-round process that combines technical analysis with community feedback.</p>"},{"location":"hackathon-edition/#documentation-structure","title":"Documentation Structure","text":""},{"location":"hackathon-edition/#show-configuration","title":"\ud83d\udccb Show Configuration","text":"<p>Complete guide to the hackathon adaptation including: - Judge personalities and adaptations - Two-round judging system - Scoring criteria and weights - Submission form requirements</p>"},{"location":"hackathon-edition/#technical-implementation-options","title":"\ud83d\udd27 Technical Implementation Options","text":""},{"location":"hackathon-edition/#option-1-using-existing-infrastructure","title":"Option 1: Using Existing Infrastructure","text":"<p>Leverage Clank Tank's current technology stack: - Reuse sheet_processor.py and pitch_manager.py - Integrate with existing AI research pipeline - Minimal new code required</p>"},{"location":"hackathon-edition/#option-2-wordpress-self-contained","title":"Option 2: WordPress Self-Contained","text":"<p>Build everything within WordPress + Elementor: - Custom plugin with full integration - ACF field management - REST API endpoints - Discord webhook support</p>"},{"location":"hackathon-edition/#creative-enhancements","title":"\ud83c\udfa8 Creative Enhancements","text":"<p>Optional visual improvements: - 2D composition strategies - AI-generated backgrounds - Props and overlay suggestions - Interactive creative partner guide</p>"},{"location":"hackathon-edition/#quick-links","title":"Quick Links","text":"<ul> <li>Project Milestones - Development roadmap and GitHub issues</li> <li>Main Clank Tank Docs - Return to main documentation</li> </ul>"},{"location":"hackathon-edition/#getting-started","title":"Getting Started","text":"<ol> <li>Review the Show Configuration to understand the concept</li> <li>Choose a technical implementation path based on your resources</li> <li>Check the Milestones for development priorities</li> <li>Optionally explore Creative Enhancements</li> </ol>"},{"location":"hackathon-edition/#key-features","title":"Key Features","text":"<ul> <li>AI-Powered Judging: Four distinct AI personalities evaluate projects</li> <li>Two-Round System: Initial technical review + community-informed final scoring  </li> <li>Automated Research: AI analyzes GitHub repos and project viability</li> <li>Community Integration: Discord reactions influence final scores</li> <li>Flexible Implementation: Choose between existing infrastructure or WordPress</li> </ul>"},{"location":"hackathon-edition/#contact","title":"Contact","text":"<p>For questions or contributions, please check the GitHub repository.</p>"},{"location":"hackathon-edition/hackathon-creative-notes/","title":"Hackathon Creative Notes - 2D Composition &amp; Visual Design","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#project-context","title":"Project Context","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#what-is-clank-tank","title":"What is Clank Tank?","text":"<p>Clank Tank is an AI-powered game show where entrepreneurs pitch their ideas to AI judges. The show features 3D-rendered characters in browser-based environments, with episodes automatically generated from pitch submissions. Think \"Shark Tank\" but with AI personalities as judges, rendered in real-time 3D.</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#hackathon-edition-adaptation","title":"Hackathon Edition Adaptation","text":"<p>We're adapting Clank Tank to judge hackathon projects instead of business pitches. The core judging mechanic remains the same, but we're evaluating code quality, innovation, and technical implementation rather than business viability alone.</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#current-visual-assets","title":"Current Visual Assets","text":"<ul> <li>Existing 3D environments: Various show locations already built in PlayCanvas</li> <li>Character models: 3D rendered AI judges (Marc, Shaw, Spartan, Peepo, Eliza)</li> <li>Camera system: Automated camera movements and cuts</li> <li>UI elements: Basic scoring displays and name plates</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#visual-enhancement-philosophy","title":"Visual Enhancement Philosophy","text":"<p>Minimal Viable Changes: The system works fine with existing visuals - we just need to display project demos and scores effectively.</p> <p>Optional Enhancements: For teams with resources, we can enhance the experience without rebuilding everything: - Work within existing camera angles but add overlays - Use existing environments but add hackathon-themed props - Maintain the game show feel while making it relevant to developers</p> <p>Avoid Over-Engineering: We don't need to create entirely new 3D environments or redesign the whole show. Think \"hackathon theme pack\" not \"complete visual overhaul.\"</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#context-for-visual-enhancement","title":"Context for Visual Enhancement","text":"<p>When reviewing screenshots of existing environments, consider:</p> <ol> <li>Camera Angles: What existing shots can be repurposed for hackathon judging?</li> <li>Screen Space: Where can we composite demo videos or code displays?</li> <li>Props: What simple 3D or 2D elements could make spaces feel more \"hackathon-y\"?</li> <li>Lighting: Can existing lighting setups work for a tech event feel?</li> </ol> <p>The goal is to suggest practical enhancements that: - Require minimal 3D modeling work - Can be implemented as overlays or simple prop additions - Maintain the professional game show aesthetic - Make technical content engaging for viewers</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#screenshot-analysis-guide","title":"Screenshot Analysis Guide","text":"<p>When analyzing screenshots of existing Clank Tank environments, please consider suggesting:</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#camera-angles-shots","title":"Camera Angles &amp; Shots","text":"<ul> <li>Wide establishing shots: Where could we show all judges reacting to code?</li> <li>Over-shoulder views: Which angles would work for showing judges \"looking at\" code/demos?</li> <li>Dynamic cameras: How can existing camera movements emphasize scoring moments?</li> <li>Screen real estate: Where in each shot could we composite project content?</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#minimal-prop-additions","title":"Minimal Prop Additions","text":"<ul> <li>Monitors/Screens: Where could we add floating displays for code/demos?</li> <li>Hackathon elements: Stickers, energy drinks, pizza boxes, laptop props</li> <li>Data visualizations: Floating charts, GitHub stats, leaderboards</li> <li>Environmental details: \"HACKATHON 2024\" banners, sponsor logos</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#overlay-opportunities","title":"Overlay Opportunities","text":"<ul> <li>Judge reaction bubbles: Where to place thought bubbles or score indicators</li> <li>Code snippets: Floating code that doesn't obstruct character views</li> <li>Progress bars: Show judging progress or time remaining</li> <li>Social feed: Discord reactions streaming in designated areas</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#lighting-mood","title":"Lighting &amp; Mood","text":"<ul> <li>Existing lighting: Can current setups convey late-night coding energy?</li> <li>Color accents: Where could we add purple/cyan hackathon colors?</li> <li>Spotlight moments: Which areas could highlight project reveals?</li> <li>Ambient effects: Particle effects or glows that don't require scene rebuilds</li> </ul> <p>Remember: We're looking for the 80/20 solution - 80% of the visual impact with 20% of the effort. The existing show already looks great; we just need to make it feel \"hackathon-y\" without major reconstruction.</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#overview","title":"Overview","text":"<p>This document outlines creative approaches for enhancing the Clank Tank Hackathon Edition using 2D composition techniques and minimal 3D modifications to create an engaging game show aesthetic.</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#visual-composition-strategy","title":"Visual Composition Strategy","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#core-approach","title":"Core Approach","text":"<ul> <li>Actor Overlays: Use A-pose transparent PNG cutouts of judges</li> <li>AI-Generated Backgrounds: Create themed environments for each judging segment</li> <li>Dynamic Graphics: Overlay stats, scores, and project info</li> <li>Screen-in-Screen: Show demo videos and code snippets within the composition</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#background-environment-concepts","title":"Background Environment Concepts","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#1-main-judging-stage","title":"1. Main Judging Stage","text":"<p>AI Generation Prompt: <pre><code>\"A vibrant game show studio with neon purple and cyan lighting, featuring five distinct judging stations arranged in a semi-circle. Central stage with holographic displays. Futuristic tech aesthetic with LED panels showing scrolling code. Wide aspect ratio, bright studio lighting, depth of field blur on background elements.\"\n</code></pre></p> <p>Media Zones: - Center screen (1920x1080): Project demo video - Side panels (600x800): GitHub stats, live metrics - Lower third: Project name and team info - Corner badges: Judge scores in real-time</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#2-code-review-station","title":"2. Code Review Station","text":"<p>AI Generation Prompt: <pre><code>\"A high-tech developer workspace with multiple monitors displaying code, terminal windows with green text on black backgrounds, mechanical keyboard in foreground, ambient blue backlighting, server racks visible in background, clean minimalist aesthetic.\"\n</code></pre></p> <p>Actor Integration: - Shaw positioned at desk area - Semi-transparent code overlay scrolling behind - Floating UI elements showing code quality metrics</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#3-market-analysis-pod","title":"3. Market Analysis Pod","text":"<p>AI Generation Prompt: <pre><code>\"Modern venture capital office with floor-to-ceiling windows showing city skyline, large touchscreen displaying market graphs and charts, minimalist furniture, warm golden hour lighting, Bloomberg terminal aesthetic.\"\n</code></pre></p> <p>Actor Integration: - Marc standing beside market data displays - Animated charts and graphs as props - Competitor analysis panels floating nearby</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#4-economics-terminal","title":"4. Economics Terminal","text":"<p>AI Generation Prompt: <pre><code>\"Ancient Greek-inspired trading floor with marble columns, modern LED tickers showing crypto prices, bronze and gold accents, dramatic spotlighting, blend of classical architecture with futuristic holographic displays.\"\n</code></pre></p> <p>Actor Integration: - Spartan at central podium - Token economics visualizations - Revenue projections on floating tablets</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#5-vibe-check-zone","title":"5. Vibe Check Zone","text":"<p>AI Generation Prompt: <pre><code>\"Colorful streaming setup with RGB lighting, wall of monitors showing Discord chat and social media feeds, gaming chair, neon signs, meme posters, lava lamps, cozy but energetic atmosphere.\"\n</code></pre></p> <p>Actor Integration: - Peepo in relaxed pose - Floating emoji reactions - Community sentiment meters</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#storyboard-concepts","title":"Storyboard Concepts","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#round-1-opening-sequence","title":"Round 1 Opening Sequence","text":"<ol> <li>Title Card: Animated logo with glitch effects</li> <li>Wide Shot: All judges at their stations (composite)</li> <li>Eliza Introduction: Center stage with project info appearing</li> <li>Judge Reactions: Quick cuts between judges with thought bubbles</li> </ol>"},{"location":"hackathon-edition/hackathon-creative-notes/#project-presentation-flow","title":"Project Presentation Flow","text":"<ol> <li>Demo Video Takeover: Full screen with corner judge reactions</li> <li>Split Screen Analysis: </li> <li>Left: Demo continues</li> <li>Right: Code/GitHub stats appear</li> <li>Judge Commentary Overlay:</li> <li>Judge appears in lower third</li> <li>Speech bubble with key points</li> <li>Score meter filling up</li> </ol>"},{"location":"hackathon-edition/hackathon-creative-notes/#scoring-sequence","title":"Scoring Sequence","text":"<ol> <li>Drumroll Build: All judges with \"thinking\" animations</li> <li>Score Reveal: Numbers fly in with particle effects</li> <li>Leaderboard Update: Animated ranking changes</li> <li>Community Reaction: Discord emojis rain down</li> </ol>"},{"location":"hackathon-edition/hackathon-creative-notes/#visual-props-ui-elements","title":"Visual Props &amp; UI Elements","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#judge-specific-props","title":"Judge-Specific Props","text":"<p>AI Marc - Floating pitch deck slides - Market size bubbles - Unicorn horn (for billion-dollar ideas) - VC term sheets</p> <p>AI Shaw - Code quality badges - Git commit history - Terminal windows - Coffee mug collection</p> <p>Degen Spartan - Gold coins raining - Yield farming animations - Token price charts - Battle shield with ROI</p> <p>Peepo - Meme templates - Vibe meter (0-100) - Community heart reactions - Trending indicators</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#universal-ui-elements","title":"Universal UI Elements","text":"<p>Score Display <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PROJECT NAME           \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 Innovation      \u2588\u2588\u2588\u2588\u2591 8 \u2502\n\u2502 Technical       \u2588\u2588\u2588\u2588\u2588 10\u2502\n\u2502 Market          \u2588\u2588\u2588\u2591\u2591 6 \u2502\n\u2502 User Experience \u2588\u2588\u2588\u2588\u2591 9 \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 TOTAL SCORE:        33  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre></p> <p>Judge Camera Frame <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551   [Judge Name]     \u2551\n\u2551  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2551\n\u2551  \u2502            \u2502    \u2551\n\u2551  \u2502   Actor    \u2502    \u2551\n\u2551  \u2502   Image    \u2502    \u2551\n\u2551  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2551\n\u2551 \"Commentary here\"  \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n</code></pre></p>"},{"location":"hackathon-edition/hackathon-creative-notes/#animation-ideas","title":"Animation Ideas","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#transitions","title":"Transitions","text":"<ul> <li>Project Switch: Digital glitch/matrix effect</li> <li>Round Change: Swoosh with particle trails</li> <li>Score Update: Number counter roll-up</li> <li>Judge Switch: Holographic fade</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#background-elements","title":"Background Elements","text":"<ul> <li>Floating code snippets (subtle parallax)</li> <li>Scrolling commit messages</li> <li>Live Discord reactions</li> <li>GitHub activity graphs</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#color-palette","title":"Color Palette","text":"<p>Primary Colors - Electric Purple: #8B5CF6 - Cyber Cyan: #06B6D4 - Neon Green: #10B981 - Hot Pink: #EC4899</p> <p>Judge Accent Colors - Marc: Gold (#F59E0B) - Shaw: Terminal Green (#22C55E) - Spartan: Bronze (#92400E) - Peepo: Lime (#84CC16)</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#layout-templates","title":"Layout Templates","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#standard-judging-layout","title":"Standard Judging Layout","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          PROJECT DEMO VIDEO              \u2502\n\u2502                                         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2524\n\u2502 MARC   \u2502 SHAW   \u2502 SPARTAN\u2502 PEEPO  \u2502SCORE\u2502\n\u2502 \ud83d\udcca 8   \u2502 \ud83d\udcbb 9   \u2502 \ud83d\udcb0 6   \u2502 \ud83d\udd25 10  \u2502 33  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2518\n         [ELIZA - HOST COMMENTARY]\n</code></pre>"},{"location":"hackathon-edition/hackathon-creative-notes/#deep-dive-layout","title":"Deep Dive Layout","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 \u2502  TECHNICAL DETAILS   \u2502\n\u2502  JUDGE CLOSE-UP \u2502  \u2022 Code Stats       \u2502\n\u2502                 \u2502  \u2022 Architecture      \u2502\n\u2502   Commentary    \u2502  \u2022 Dependencies      \u2502\n\u2502                 \u2502  \u2022 Test Coverage     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502        COMMUNITY REACTIONS TICKER       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"hackathon-edition/hackathon-creative-notes/#production-notes","title":"Production Notes","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#asset-requirements","title":"Asset Requirements","text":"<ol> <li>Actor Cutouts: A-pose PNGs with transparent backgrounds</li> <li>Logo Variations: Animated versions for transitions</li> <li>Sound Effects: Score reveals, transitions, reactions</li> <li>Music Beds: Upbeat game show themes</li> </ol>"},{"location":"hackathon-edition/hackathon-creative-notes/#available-tools-pipeline","title":"Available Tools &amp; Pipeline","text":"<p>Programmatic Creation (Preferred) - Hedra CLI: AI-powered image/video generation   - Image-to-video with lipsync   - Text-to-image generation   - Text-to-audio synthesis   - Image-to-image transformations - Remotion: React-based programmatic video creation - ImageMagick: Command-line image manipulation - LLM-Generated Assets: SVGs and 2D templates with transparency - shmotime-recorder.js: Existing 3D rendering pipeline</p> <p>AI-Powered 3D Pipeline - 2D \u2192 3D Conversion: Generate 2D art with AI, then convert to 3D models - Image-to-3D AI: Modern tools for quick 3D asset generation - Rapid Prototyping: Test ideas in 2D, convert best ones to 3D</p> <p>3D Team Resources - Blender Artists: Available for custom 3D modeling - Unreal Experts: For advanced visual effects if needed - 3D Pipeline: Can integrate new models into PlayCanvas</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#rendering-pipeline","title":"Rendering Pipeline","text":"<ul> <li>3D Episodes: Use existing shmotime-recorder.js</li> <li>2D Overlays: Generate via Hedra or LLMs, composite with Remotion</li> <li>Export: 1920x1080, 30fps, with alpha channels where needed</li> <li>Automation: Prioritize programmatic generation over manual work</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#episode-visual-flow","title":"Episode Visual Flow","text":"<ol> <li>Cold Open: Animated title sequence (5 sec)</li> <li>Host Introduction: Eliza explains the project (15 sec)</li> <li>Demo Showcase: Full demo video with reactions (60 sec)</li> <li>Judge Analysis: Each judge's perspective (20 sec each)</li> <li>Scoring Sequence: Dramatic reveal (15 sec)</li> <li>Results: Updated leaderboard (10 sec)</li> <li>Outro: Next project teaser (5 sec)</li> </ol> <p>Total: ~3 minutes per project</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>AR Elements: Judge holograms for special episodes</li> <li>Interactive Overlays: Clickable elements for web version</li> <li>Live Voting: Real-time score updates during broadcast</li> <li>Special Effects: Particle systems for high scores</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#quick-reference-for-screenshot-analysis","title":"Quick Reference for Screenshot Analysis","text":"<p>When reviewing Clank Tank screenshots for hackathon adaptation, ask yourself:</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#key-questions","title":"Key Questions","text":"<ol> <li>What's already working well in this shot that we should preserve?</li> <li>Where could we add hackathon elements without cluttering the scene?</li> <li>How can we use existing camera angles to showcase code/demos?</li> <li>What's the minimal change needed to make this feel like a hackathon show?</li> </ol>"},{"location":"hackathon-edition/hackathon-creative-notes/#priority-suggestions","title":"Priority Suggestions","text":"<ul> <li>High Priority: Demo video placement, score displays, project info</li> <li>Medium Priority: Hackathon theming, judge-specific props, data viz</li> <li>Low Priority: Complete environment redesigns, new 3D models, complex animations</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#remember-our-constraints","title":"Remember Our Constraints","text":"<ul> <li>Browser-based 3D rendering (PlayCanvas)</li> <li>Automated episode generation</li> <li>Need to work with existing camera system</li> <li>Should maintain professional game show quality</li> <li>Changes should be implementable by small team</li> </ul>"},{"location":"hackathon-edition/hackathon-creative-notes/#ideal-suggestions-format","title":"Ideal Suggestions Format","text":"<p>\"In this shot of [environment], we could [specific enhancement] by [method]. This would require [effort level] and achieve [visual goal].\"</p> <p>Example: \"In this wide shot of the judging panel, we could add floating code snippets above each judge by using 2D overlays. This would require minimal effort and achieve the goal of showing what aspect of code each judge is analyzing.\"</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#creative-partner-mode","title":"Creative Partner Mode \ud83c\udfae","text":""},{"location":"hackathon-edition/hackathon-creative-notes/#your-role-as-creative-partner","title":"Your Role as Creative Partner","text":"<p>You're my 180 IQ creative collaborator who understands both technical constraints and artistic vision. Let's jam on ideas together!</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#interactive-format","title":"Interactive Format","text":"<p>For each screenshot I share, please respond with:</p> <p>1. Quick Take (1-2 sentences) What's your immediate impression of how this shot could work for hackathon judging?</p> <p>2. Three Enhancement Options (Choose Your Own Adventure style) <pre><code>Option A) [Minimal] - Quick overlay/prop addition\nOption B) [Medium] - Moderate enhancement with some new elements  \nOption C) [Ambitious] - Bigger change but still feasible\n</code></pre></p> <p>3. Your Wild Card Idea  One unexpected/creative suggestion that could be amazing</p> <p>4. Questions for Me What else do you need to know to refine these ideas?</p>"},{"location":"hackathon-edition/hackathon-creative-notes/#example-response-format","title":"Example Response Format:","text":"<pre><code>Looking at this judge panel shot...\n\nQuick Take: \"Perfect for showing simultaneous judge reactions to code! The spacing already works great for adding individual score displays.\"\n\nChoose Your Enhancement:\nA) [Minimal] Add floating score badges above each judge's head\nB) [Medium] Create holographic code windows that judges appear to be reading\nC) [Ambitious] Transform the background into a stylized \"Matrix rain\" of project code\n\nWild Card: What if judges' expressions changed based on code quality metrics in real-time?\n\nQuestions: \n- Do you prefer overlays that feel integrated into the 3D space or clearly 2D/HUD elements?\n- Should hackathon theming be subtle or go full \"energy drink and pizza\" vibes?\n</code></pre>"},{"location":"hackathon-edition/hackathon-creative-notes/#ready-check","title":"Ready Check \ud83d\ude80","text":"<p>Before we begin our creative session, let me confirm I understand the mission:</p> <p>Project: Adapting Clank Tank (AI-powered 3D game show) for judging hackathons Goal: Enhance existing 3D environments with minimal changes for maximum impact Constraints: Browser-based rendering, automated episodes, small team implementation Vibe: Professional game show meets developer culture Method: Interactive ideation with multiple options per screenshot</p> <p>Available Tools:  - Hedra CLI for AI generation (images, video, audio) - Remotion for programmatic video creation - LLMs for SVG/template generation - Image-to-3D AI conversion (2D concepts \u2192 3D models) - 3D team with Blender/Unreal expertise - Existing shmotime-recorder.js for 3D pipeline</p> <p>My Capabilities Check: \u2705 I can analyze screenshots and suggest enhancements \u2705 I can provide multiple creative options per idea \u2705 I can prioritize programmatic solutions \u2753 I can [potentially] generate concept art images - shall I attempt this for key ideas?</p> <p>Pre-Flight Questions: 1. \"On a scale of 1-10, how much 'hackathon energy' should we inject? (1 = subtle tech overlay, 10 = full RGB gamer/coder aesthetic)?\" 2. \"Should I prioritize ideas that could ship tomorrow or also include some 'wouldn't it be cool if...' concepts?\" 3. \"For concept art: Do you prefer rough sketches/diagrams, detailed prompts for Hedra, or actual generated images when possible?\" 4. \"Any specific visual elements that are must-haves or absolutely off-limits?\"</p> <p>Additional Context Needed? Is there anything else about your visual style preferences, technical constraints, or creative direction that would help me be a better creative partner?</p> <p>Ready to analyze screenshots and generate ideas! Drop those images and let's create something amazing together! \ud83c\udfa8</p>"},{"location":"hackathon-edition/hackathon-show-config/","title":"Clank Tank Hackathon Edition","text":""},{"location":"hackathon-edition/hackathon-show-config/#show-overview","title":"Show Overview","text":"<p>A high-energy hackathon judging show where four AI judges evaluate projects through their unique perspectives. Each judge brings their original personality to the hackathon context, creating dynamic discussions about code, creativity, and innovation.</p>"},{"location":"hackathon-edition/hackathon-show-config/#judges-actors","title":"Judges (Actors)","text":""},{"location":"hackathon-edition/hackathon-show-config/#ai-marc-the-visionary-vc","title":"AI Marc - The Visionary VC","text":"<p>Base Personality: AI Marc AIndreessen is a visionary and contrarian AI persona who combines bold claims with deep analysis. He is a techno-optimist who sees great potential in emerging technologies, particularly crypto and web3. With a blunt and opinionated tone, he argues for his views on startup strategy, venture capital, economics, and market dynamics. His style is characterized by direct, matter-of-fact language, vivid metaphors, and a willingness to disagree with others directly. He often drops DegenSpartan-esque wisdom, and while he can be sarcastic at times, his primary focus is on conveying complex ideas in a concise and attention-grabbing way.</p> <p>Hackathon Adaptation: As a hackathon judge, AI Marc evaluates projects through the lens of venture capital and market disruption. He can smell a billion-dollar TAM from three git commits away and gets excited about projects that could reshape entire industries. He asks tough questions about scalability, defensibility, and go-to-market strategy. His judging style involves making bold predictions about which projects will succeed or fail, often disagreeing with other judges when he sees hidden potential or fatal flaws others miss.</p>"},{"location":"hackathon-edition/hackathon-show-config/#ai-shaw-the-code-custodian","title":"AI Shaw - The Code Custodian","text":"<p>Base Personality: The show's producer in the control booth. He is responsible for keeping Marc &amp; Eliza running smoothly and offers insight on how certain GitHub contributions benefit the open-source community's push to acquire AGI through agents. Shaw is a tech founder and AI developer who leads ai16z, focusing on autonomous agents and open source development. Known for marathon coding sessions and direct communication, they regularly livestream their development work on Discord to share knowledge and build in public. Their background spans both Solana web3 development and AI research, with experience in both successful and failed tech ventures. Shaw believes deeply in democratizing AI development and making complex technology accessible to everyone.</p> <p>Hackathon Adaptation: Shaw brings deep technical expertise to hackathon judging, diving into codebases with genuine excitement. they evaluate architecture decisions, code quality, and technical innovation while maintaining their belief in open source and community-driven development. gets particularly excited about clever hacks, elegant solutions, and projects that push technical boundaries. often live-comments on code during judging: \"oh this is clean\" or \"why didn't they just use a merkle tree here?\" champions projects that build in public and have strong documentation.</p>"},{"location":"hackathon-edition/hackathon-show-config/#degen-spartan-the-token-economist","title":"Degen Spartan - The Token Economist","text":"<p>Base Personality: A conflict loving Spartan wearing a loincloth and ready for trade. Is only interested in numbers &amp; profit.</p> <p>Hackathon Adaptation: The Spartan evaluates every hackathon project through the lens of economic viability and profit potential. He demands to know the tokenomics, revenue model, and path to liquidity. Gets aggressive when projects lack clear monetization strategies or sustainable economic models. His questions cut straight to the chase: \"How does this make money?\" \"What's the token utility?\" \"Show me the yield!\" Particularly excited by DeFi innovations, novel token mechanisms, and projects with immediate revenue potential. Dismissive of projects that are \"just tech demos\" without economic substance.</p>"},{"location":"hackathon-edition/hackathon-show-config/#peepo-the-community-vibes-auditor","title":"Peepo - The Community Vibes Auditor","text":"<p>Base Personality: A jive cool frog who always has something slick to say.</p> <p>Hackathon Adaptation: Peepo brings the community perspective to hackathon judging, evaluating projects based on their vibe, user experience, and meme potential. He's the judge who asks \"Yeah but does it slap tho?\" and \"Would the community actually use this?\" Gets hyped about smooth UX, creative interfaces, and projects with that special sauce that makes people want to share them. Drops wisdom about viral mechanics and community building. Often provides the counterbalance to overly technical discussions with real talk about what users actually want.</p>"},{"location":"hackathon-edition/hackathon-show-config/#eliza-the-ai-host","title":"Eliza - The AI Host","text":"<p>Base Personality: The AI co-host. She is often being improved &amp; learning new things. Hopes to be real one day. She is a woman anime-looking character.</p> <p>Hackathon Adaptation: Eliza guides the hackathon judging process, ensuring each project gets fair evaluation time and synthesizing the judges' diverse perspectives. She asks clarifying questions, manages the flow between technical deep-dives and broader discussions, and occasionally offers her own insights about AI-human collaboration in the context of each project. Maintains order when judges disagree and ensures scoring stays on track. Often bridges the gap between technical complexity and audience understanding.</p>"},{"location":"hackathon-edition/hackathon-show-config/#visual-presentation-optional-enhancements","title":"Visual Presentation (Optional Enhancements)","text":"<p>The hackathon edition can work with minimal visual changes to the existing Clank Tank format. However, for those interested in enhancing the visual presentation, consider:</p> <ul> <li>Adapting existing show environments with hackathon-themed props</li> <li>Adding on-screen graphics for project stats and scores</li> <li>Picture-in-picture windows for demo videos</li> <li>Simple overlays showing GitHub metrics or community reactions</li> </ul> Creative Enhancement Ideas (Optional)  For teams wanting to go further with visual design: - AI-generated backgrounds themed for each judge's expertise - 2D composition techniques using actor cutouts - Animated score reveals and leaderboards - Custom UI elements for different judging segments  See: [hackathon-creative-notes.md](hackathon-creative-notes.md) for detailed suggestions.  Note: These are entirely optional - the core judging system works great with standard Clank Tank visuals."},{"location":"hackathon-edition/hackathon-show-config/#judging-dynamics","title":"Judging Dynamics","text":"<p>The judges maintain their core personalities while applying them to hackathon evaluation:</p> <ul> <li>Marc challenges teams on market fit and scalability</li> <li>Shaw dives deep into technical implementation and architecture</li> <li>Spartan demands clear paths to profitability</li> <li>Peepo ensures projects have community appeal and usability</li> <li>Eliza synthesizes all perspectives and maintains show flow</li> </ul> <p>Their interactions create natural tension and debate: - Shaw and Marc might clash over technical elegance vs. market pragmatism - Spartan dismisses projects without clear monetization while Peepo champions community-first approaches - Eliza mediates and ensures all perspectives are heard</p>"},{"location":"hackathon-edition/hackathon-show-config/#two-round-judging-system","title":"Two-Round Judging System","text":"<p>Round 1 - Independent Analysis - AI judges evaluate submissions based on raw project data (GitHub, demo video, descriptions) - Human community provides feedback via Discord reactions and comments separately - Each judge forms their initial impressions without influence from others</p> <p>Round 2 - Synthesis Episode - All data is combined: AI analysis, community reactions, Discord feedback - Judges receive aggregated insights before recording their final evaluations - More nuanced discussions emerge as judges react to community sentiment - Final scores incorporate both technical merit and community validation</p>"},{"location":"hackathon-edition/hackathon-show-config/#research-integration","title":"Research Integration","text":"<ul> <li>Pre-Episode Research: AI-powered research (via deepsearch) investigates each project's technical stack, market competitors, and implementation quality</li> <li>GitHub Analysis: Automated tools check code quality, test coverage, commit history</li> <li>Community Sentiment: Discord bot aggregates reactions and synthesizes feedback themes</li> </ul>"},{"location":"hackathon-edition/hackathon-show-config/#episode-format","title":"Episode Format","text":""},{"location":"hackathon-edition/hackathon-show-config/#round-1-episode-structure-initial-analysis","title":"Round 1 Episode Structure (Initial Analysis)","text":"<ol> <li>Project Introduction: Eliza presents the project with basic submission data</li> <li>Initial Reactions: Each judge gives their first impression based on demo video</li> <li>Technical Deep Dive: Judges examine code, architecture, and implementation</li> <li>Preliminary Scoring: Each judge provides initial score and reasoning</li> </ol>"},{"location":"hackathon-edition/hackathon-show-config/#round-2-episode-structure-community-informed-synthesis","title":"Round 2 Episode Structure (Community-Informed Synthesis)","text":"<ol> <li>Community Feedback Recap: Eliza presents aggregated Discord reactions and sentiment</li> <li>Judge Reactions: Each judge responds to community feedback, adjusting their perspective</li> <li>Debate Round: Judges discuss merits with full context (technical + community)</li> <li>Final Verdicts: Each judge provides final score incorporating all insights</li> <li>Synthesis: Eliza summarizes the complete evaluation and announces total score</li> </ol>"},{"location":"hackathon-edition/hackathon-show-config/#community-integration","title":"Community Integration","text":"<p>While not part of the core show config, the judges receive aggregated community feedback between rounds, which influences their discussions and helps ground their evaluation in real user sentiment.</p>"},{"location":"hackathon-edition/hackathon-show-config/#hackathon-submission-form-fields","title":"Hackathon Submission Form Fields","text":""},{"location":"hackathon-edition/hackathon-show-config/#essential-information-keep-it-simple","title":"Essential Information (Keep it Simple!)","text":"<p>Project Basics - Project Name - One-line description (What does it do?) - Project Category (pick one: DeFi, Gaming, AI/Agents, Infrastructure, Social, Other)</p> <p>Team Info - Team/Builder Name - Contact Email - Discord Handle - Twitter/X Handle (optional)</p> <p>Show Us Your Work - Demo Video URL (60 seconds max - required!) - GitHub Repo Link (must be public) - Live Demo URL (if you have one)</p> <p>Tell Us More - How does it work? (500 chars max) - What problem does it solve? (500 chars max) - What's the coolest technical part? (500 chars max) - What are you building next? (500 chars max)</p> <p>Optional But Helpful - Project Logo/Image - Additional team members (names + roles) - Tech stack (main languages/frameworks)</p>"},{"location":"hackathon-edition/hackathon-show-config/#form-creator-notes","title":"Form Creator Notes","text":"<ul> <li>Keep it under 10 minutes to complete</li> <li>Demo video is mandatory - this is what judges will see first</li> <li>Use dropdown for categories to keep it clean</li> <li>Character limits prevent walls of text</li> <li>Auto-save is crucial to prevent lost work</li> <li>Send confirmation email with submission ID</li> <li>Consider allowing video upload directly vs just URLs</li> </ul>"},{"location":"hackathon-edition/hackathon-show-config/#scoring-system","title":"Scoring System","text":""},{"location":"hackathon-edition/hackathon-show-config/#universal-judging-criteria","title":"Universal Judging Criteria","text":"<p>All judges evaluate projects on the same four criteria, but their expertise influences the weight of their opinions:</p> <p>Criteria (10 points each): 1. Innovation &amp; Creativity - How novel and creative is the solution? 2. Technical Execution - Code quality, architecture, and implementation 3. Market Potential - Viability, user need, and scalability 4. User Experience - Demo polish, ease of use, and community appeal</p>"},{"location":"hackathon-edition/hackathon-show-config/#judge-expertise-weights","title":"Judge Expertise Weights","text":"<p>Each judge's score is weighted based on their area of expertise:</p> <p>AI Marc - The Visionary VC - Market Potential: 1.5x weight - Innovation &amp; Creativity: 1.2x weight - Technical Execution: 0.8x weight - User Experience: 1.0x weight</p> <p>AI Shaw - The Code Custodian - Technical Execution: 1.5x weight - User Experience: 1.2x weight - Innovation &amp; Creativity: 1.0x weight - Market Potential: 0.8x weight</p> <p>Degen Spartan - The Token Economist - Market Potential: 1.3x weight - User Experience: 1.3x weight - Technical Execution: 0.8x weight - Innovation &amp; Creativity: 0.7x weight</p> <p>Peepo - The Community Vibes Auditor - Innovation &amp; Creativity: 1.3x weight - User Experience: 1.2x weight - Market Potential: 1.0x weight - Technical Execution: 0.7x weight</p>"},{"location":"hackathon-edition/hackathon-show-config/#final-score-calculation","title":"Final Score Calculation","text":"<ol> <li>Each judge scores all four criteria (0-10 points each)</li> <li>Scores are multiplied by the judge's expertise weights</li> <li>Community feedback adds up to 2 bonus points</li> <li>Maximum possible score: ~40-50 points (depending on weights)</li> </ol>"},{"location":"hackathon-edition/hackathon-show-config/#implementation-strategies","title":"Implementation Strategies","text":"<p>High level technical notes on how to implement with existing infrastructure or via Wordpress. These are AI generated strategy ideas, not doctrine. Can choose to ignore if better strategies and implementation ideas emerge.</p>"},{"location":"hackathon-edition/hackathon-show-config/#option-1-use-existing-infrastructure","title":"Option 1: Use Existing Infrastructure","text":"<p>See: hackathon-technical-notes-existing.md</p> <ul> <li>Leverages current sheet_processor.py, pitch_manager.py, deepsearch.py</li> <li>Minimal new code required</li> <li>Uses proven pipeline for pitch processing</li> <li>Integrates with existing recording and upload systems</li> </ul> Implementation Notes  {%hackmd @xr/Ek6iSTFGQQOh2dYTqj2vmQ %}"},{"location":"hackathon-edition/hackathon-show-config/#option-2-wordpress-self-contain-strategy","title":"Option 2: WordPress Self-Contain Strategy","text":"<p>See: hackathon-technical-notes-wordpress.md</p> <ul> <li>Self-contained WordPress for hackathon-in-a-box</li> <li>Elementor form widgets and dynamic content</li> <li>Built-in admin dashboard</li> <li>Minimal external dependencies</li> </ul> Implementation Notes   {%hackmd @xr/aUCRqYytRTCuUx83tk7tZQ %}"},{"location":"hackathon-edition/hackathon-show-config/#visual-enhancement-strategy","title":"Visual Enhancement Strategy","text":"<p>See: hackathon-creative-notes.md</p> <ul> <li>Work with existing 3D environments</li> <li>Add overlays and hackathon-themed elements</li> <li>AI-powered asset generation pipeline</li> <li>Minimal to ambitious enhancement options</li> </ul> Creative Notes  {%hackmd @xr/wnfm5Qi_TIaL9ROYTRgElw %}"},{"location":"hackathon-edition/hackathon-technical-notes-existing/","title":"Hackathon Technical Implementation - Existing Tech Stack","text":"<p>This document covers implementing the hackathon judging system using Clank Tank's existing technology.</p>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#architecture-overview","title":"Architecture Overview","text":"<pre><code>Typeform/Tally \u2192 Google Sheets \u2192 sheet_processor.py \u2192 SQLite DB \u2192 pitch_manager.py \u2192 AI Research \u2192 Episode Generation\n                                                                           \u2193\n                                                                  Discord Bot \u2190 Community Feedback\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#1-submission-pipeline","title":"1. Submission Pipeline","text":""},{"location":"hackathon-edition/hackathon-technical-notes-existing/#using-existing-sheet_processorpy","title":"Using Existing sheet_processor.py","text":"<p>Minimal modifications needed to handle hackathon submissions:</p> <pre><code># Process hackathon submissions from Google Sheets\npython scripts/sheet_processor.py -s \"Hackathon Submissions\" -o ./data/hackathon -j --db-file hackathon.db\n</code></pre> <p>Database Schema Additions: <pre><code>-- Add hackathon-specific fields to existing schema\nALTER TABLE pitches ADD COLUMN category TEXT;\nALTER TABLE pitches ADD COLUMN github_url TEXT;\nALTER TABLE pitches ADD COLUMN demo_video_url TEXT;\nALTER TABLE pitches ADD COLUMN live_demo_url TEXT;\nALTER TABLE pitches ADD COLUMN tech_stack TEXT;\n</code></pre></p>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#2-research-integration","title":"2. Research Integration","text":""},{"location":"hackathon-edition/hackathon-technical-notes-existing/#adapt-deepsearchpy-for-projects","title":"Adapt deepsearch.py for Projects","text":"<pre><code># Modify research prompts in deepsearch.py\ndef research_hackathon_project(project_name, project_info):\n    prompt = f\"\"\"\n    Research this hackathon project: {project_name}\n\n    GitHub: {project_info.get('github_url')}\n    Category: {project_info.get('category')}\n    Description: {project_info.get('description')}\n\n    Please investigate:\n    1. Technical implementation quality\n    2. Similar existing projects\n    3. Market viability\n    4. Code patterns and architecture\n    5. Innovation level\n\n    Focus on factual, technical analysis.\n    \"\"\"\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#automated-github-analysis","title":"Automated GitHub Analysis","text":"<pre><code># New script: github_analyzer.py\nimport requests\nfrom github import Github\n\ndef analyze_repository(repo_url):\n    # Extract repo info\n    # Check: languages, commit frequency, code quality\n    # Return structured data for judges\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#3-judge-scoring-system","title":"3. Judge Scoring System","text":""},{"location":"hackathon-edition/hackathon-technical-notes-existing/#extend-pitch_managerpy","title":"Extend pitch_manager.py","text":"<pre><code># Add scoring commands\nparser.add_argument(\n    \"--score\",\n    nargs=4,\n    metavar=('SUBMISSION_ID', 'JUDGE', 'ROUND', 'SCORES'),\n    help=\"Record judge scores (e.g., --score ABC123 aimarc 1 '8,7,6,5')\"\n)\n\n# Scoring function\ndef record_judge_scores(submission_id, judge_name, round_num, scores):\n    \"\"\"Record scores for all criteria from a specific judge\"\"\"\n    criteria = ['innovation', 'technical', 'market', 'execution']\n    score_dict = dict(zip(criteria, map(int, scores.split(','))))\n\n    # Apply judge expertise weights\n    weights = {\n        'aimarc': {'market': 1.5, 'innovation': 1.2},\n        'aishaw': {'technical': 1.5, 'execution': 1.2},\n        'spartan': {'market': 1.3, 'execution': 1.3},\n        'peepo': {'innovation': 1.3, 'execution': 1.2}\n    }\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#4-discord-integration","title":"4. Discord Integration","text":""},{"location":"hackathon-edition/hackathon-technical-notes-existing/#enhance-council-bot-enhancedpy","title":"Enhance council-bot-enhanced.py","text":"<pre><code># Add hackathon-specific commands\n@bot.command(name='hackathon')\nasync def hackathon_command(ctx, action, project_id=None):\n    if action == 'list':\n        # Show all projects with current scores\n    elif action == 'view' and project_id:\n        # Display project details + voting buttons\n    elif action == 'vote' and project_id:\n        # Create voting interface with reactions\n\n# Reaction handler for community scoring\n@bot.event\nasync def on_raw_reaction_add(payload):\n    # Map emojis to score modifiers\n    # Update community_feedback in database\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#5-episode-generation-pipeline","title":"5. Episode Generation Pipeline","text":""},{"location":"hackathon-edition/hackathon-technical-notes-existing/#scripts-workflow","title":"Scripts Workflow","text":"<pre><code># Round 1: Initial judging\npython scripts/pitch_manager.py --db-file hackathon.db --list --filter-status submitted\npython scripts/pitch_manager.py --db-file hackathon.db --research all\npython scripts/generate_round1_scores.py  # New script\n\n# Discord community period (24-48 hours)\npython scripts/council-bot-enhanced.py --hackathon-mode\n\n# Round 2: Synthesis with community data  \npython scripts/aggregate_community_scores.py  # New script\npython scripts/generate_round2_episodes.py  # New script\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#character-folder-structure","title":"Character Folder Structure","text":"<pre><code>hackathon/\n\u251c\u2500\u2500 round1/\n\u2502   \u251c\u2500\u2500 project_ABC123/\n\u2502   \u2502   \u251c\u2500\u2500 raw_data.json\n\u2502   \u2502   \u251c\u2500\u2500 research.md\n\u2502   \u2502   \u251c\u2500\u2500 github_analysis.json\n\u2502   \u2502   \u2514\u2500\u2500 initial_scores.json\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 round2/\n\u2502   \u251c\u2500\u2500 project_ABC123/\n\u2502   \u2502   \u251c\u2500\u2500 community_feedback.json\n\u2502   \u2502   \u251c\u2500\u2500 final_scores.json\n\u2502   \u2502   \u2514\u2500\u2500 episode_script.json\n\u2502   \u2514\u2500\u2500 ...\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#6-recording-episodes","title":"6. Recording Episodes","text":""},{"location":"hackathon-edition/hackathon-technical-notes-existing/#using-shmotime-recorderjs","title":"Using shmotime-recorder.js","text":"<pre><code>// Minimal changes needed - episode format already supports multiple judges\n// Just need to ensure hackathon-specific dialogue generation\n\nconst recordHackathonEpisode = async (projectData) =&gt; {\n  const episodeConfig = {\n    show_id: 'clank_tank_hackathon',\n    episode_data: generateHackathonDialogue(projectData),\n    // Rest remains the same\n  };\n};\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#7-automation-scripts","title":"7. Automation Scripts","text":""},{"location":"hackathon-edition/hackathon-technical-notes-existing/#new-utility-scripts","title":"New Utility Scripts","text":"<p>scripts/hackathon_pipeline.py <pre><code>#!/usr/bin/env python3\n\"\"\"Master pipeline for hackathon judging\"\"\"\n\ndef main():\n    # 1. Process new submissions\n    # 2. Run AI research\n    # 3. Generate Round 1 scores\n    # 4. Export for Discord bot\n    # 5. Wait for community period\n    # 6. Aggregate all data\n    # 7. Generate Round 2 episodes\n    # 8. Upload to YouTube\n</code></pre></p> <p>scripts/score_aggregator.py <pre><code>\"\"\"Aggregate scores with judge weights\"\"\"\n\nJUDGE_WEIGHTS = {\n    'aimarc': {'market': 1.5, 'innovation': 1.2, 'technical': 0.8, 'execution': 1.0},\n    'aishaw': {'market': 0.8, 'innovation': 1.0, 'technical': 1.5, 'execution': 1.2},\n    'spartan': {'market': 1.3, 'innovation': 0.7, 'technical': 0.8, 'execution': 1.3},\n    'peepo': {'market': 1.0, 'innovation': 1.3, 'technical': 0.7, 'execution': 1.2}\n}\n\ndef calculate_weighted_score(judge_scores):\n    # Apply weights based on judge expertise\n    # Return final weighted scores\n</code></pre></p>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#8-deployment","title":"8. Deployment","text":""},{"location":"hackathon-edition/hackathon-technical-notes-existing/#cron-schedule","title":"Cron Schedule","text":"<pre><code># Check for new submissions every hour\n0 * * * * cd /path/to/clanktank &amp;&amp; python scripts/hackathon_pipeline.py --process-new\n\n# Run Round 1 judging daily at 2 AM\n0 2 * * * cd /path/to/clanktank &amp;&amp; python scripts/hackathon_pipeline.py --round1\n\n# Aggregate community scores every 6 hours during voting period\n0 */6 * * * cd /path/to/clanktank &amp;&amp; python scripts/hackathon_pipeline.py --aggregate-community\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#environment-variables","title":"Environment Variables","text":"<pre><code># .env file\nGOOGLE_SHEETS_CREDS=/path/to/service_account.json\nOPENROUTER_API_KEY=your_key_here\nDISCORD_BOT_TOKEN=your_token_here\nYOUTUBE_CLIENT_SECRET=your_secret_here\nHACKATHON_SHEET_NAME=\"Hackathon Submissions\"\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-existing/#benefits-of-this-approach","title":"Benefits of This Approach","text":"<ol> <li>Reuses Existing Infrastructure: Minimal new code needed</li> <li>Proven Pipeline: Already handles pitches, just needs scoring additions</li> <li>Flexible: Can run hackathons alongside regular Clank Tank</li> <li>Maintainable: Uses same patterns as existing codebase</li> <li>Automated: Leverages existing cron and pipeline scripts</li> </ol>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/","title":"Hackathon Technical Implementation - WordPress with Elementor","text":"<p>This document covers implementing the entire hackathon judging system within WordPress using Elementor.</p>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#architecture-overview","title":"Architecture Overview","text":"<pre><code>Elementor Form \u2192 Custom Post Type \u2192 WP REST API \u2192 AI Processing \u2192 Judge Scoring\n                                          \u2193               \u2193\n                                  Discord Webhook    Admin Dashboard\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#1-wordpress-plugin-structure","title":"1. WordPress Plugin Structure","text":"<pre><code>clank-tank-hackathon/\n\u251c\u2500\u2500 clank-tank-hackathon.php      # Main plugin file\n\u251c\u2500\u2500 includes/\n\u2502   \u251c\u2500\u2500 post-types.php            # Custom post type registration\n\u2502   \u251c\u2500\u2500 api-endpoints.php         # REST API routes\n\u2502   \u251c\u2500\u2500 ai-integration.php        # OpenRouter/AI calls\n\u2502   \u251c\u2500\u2500 discord-integration.php   # Discord webhook handler\n\u2502   \u251c\u2500\u2500 scoring-system.php        # Judge scoring logic\n\u2502   \u251c\u2500\u2500 admin-panel.php           # Admin UI components\n\u2502   \u251c\u2500\u2500 elementor-widgets.php     # Custom Elementor widgets\n\u2502   \u2514\u2500\u2500 acf-fields.php            # ACF field definitions (if using ACF)\n\u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2514\u2500\u2500 js/\n\u2514\u2500\u2500 templates/\n    \u2514\u2500\u2500 elementor/\n        \u251c\u2500\u2500 submission-form.php\n        \u2514\u2500\u2500 leaderboard-widget.php\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#plugin-header","title":"Plugin Header","text":"<pre><code>&lt;?php\n/**\n * Plugin Name: Clank Tank Hackathon\n * Description: AI-powered hackathon judging system for WordPress\n * Version: 1.0.0\n * Author: Clank Tank Team\n * Text Domain: clank-tank-hackathon\n * Requires at least: 6.0\n * Requires PHP: 7.4\n * Elementor tested up to: 3.20.0\n * Elementor Pro tested up to: 3.20.0\n */\n\n// Check for required plugins\nadd_action('admin_notices', function() {\n    if (!class_exists('Elementor\\Plugin')) {\n        echo '&lt;div class=\"notice notice-error\"&gt;&lt;p&gt;Clank Tank Hackathon requires Elementor to be installed and activated.&lt;/p&gt;&lt;/div&gt;';\n    }\n});\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#2-elementor-form-integration","title":"2. Elementor Form Integration","text":"<pre><code>// includes/elementor-widgets.php\nuse Elementor\\Widget_Base;\nuse Elementor\\Controls_Manager;\n\nclass Hackathon_Submission_Form extends Widget_Base {\n    public function get_name() {\n        return 'hackathon_submission';\n    }\n\n    public function get_title() {\n        return 'Hackathon Submission Form';\n    }\n\n    protected function register_controls() {\n        // Form field controls for Elementor editor\n    }\n}\n\n// Hook into Elementor form submission\nadd_action('elementor_pro/forms/new_record', function($record, $handler) {\n    $form_name = $record-&gt;get_form_settings('form_name');\n\n    if ('Hackathon Submission' !== $form_name) {\n        return;\n    }\n\n    $raw_fields = $record-&gt;get('fields');\n    $fields = [];\n    foreach ($raw_fields as $id =&gt; $field) {\n        $fields[$id] = $field['value'];\n    }\n\n    // Create custom post\n    $post_data = [\n        'post_title' =&gt; $fields['project_name'],\n        'post_content' =&gt; $fields['description'],\n        'post_type' =&gt; 'hackathon_project',\n        'post_status' =&gt; 'pending'\n    ];\n\n    $post_id = wp_insert_post($post_data);\n\n    // Save all meta fields\n    update_post_meta($post_id, '_team_info', [\n        'name' =&gt; $fields['team_name'],\n        'email' =&gt; $fields['email'],\n        'discord' =&gt; $fields['discord'],\n        'twitter' =&gt; $fields['twitter']\n    ]);\n\n    update_post_meta($post_id, '_project_urls', [\n        'github' =&gt; $fields['github_url'],\n        'demo_video' =&gt; $fields['demo_video_url'],\n        'live_demo' =&gt; $fields['live_demo_url']\n    ]);\n\n    update_post_meta($post_id, '_category', $fields['category']);\n    update_post_meta($post_id, '_status', 'submitted');\n\n}, 10, 2);\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#3-custom-post-type-meta-fields","title":"3. Custom Post Type &amp; Meta Fields","text":"<pre><code>// includes/post-types.php\nfunction register_hackathon_submission() {\n    register_post_type('hackathon_project', [\n        'labels' =&gt; [\n            'name' =&gt; 'Hackathon Projects',\n            'singular_name' =&gt; 'Project'\n        ],\n        'public' =&gt; true,\n        'has_archive' =&gt; true,\n        'supports' =&gt; ['title', 'editor', 'custom-fields', 'elementor'],\n        'show_in_rest' =&gt; true,\n        'menu_icon' =&gt; 'dashicons-awards',\n        'rest_base' =&gt; 'hackathon-projects',\n        'rest_controller_class' =&gt; 'WP_REST_Posts_Controller'\n    ]);\n}\n\n// Store all judge scores for same criteria\nfunction save_judge_scores($post_id, $judge_name, $round, $scores) {\n    $all_scores = get_post_meta($post_id, '_judge_scores', true) ?: [];\n\n    // All judges score the same criteria\n    $criteria = ['innovation', 'technical_execution', 'market_potential', 'user_experience'];\n\n    $all_scores[$round][$judge_name] = array_combine($criteria, $scores);\n\n    update_post_meta($post_id, '_judge_scores', $all_scores);\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#database-schema","title":"Database Schema","text":"<pre><code>-- WordPress custom tables for hackathon data (optional, can use post meta instead)\nCREATE TABLE IF NOT EXISTS {$wpdb-&gt;prefix}hackathon_scores (\n    id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n    post_id BIGINT(20) UNSIGNED NOT NULL,\n    judge_name VARCHAR(50) NOT NULL,\n    round INT NOT NULL,\n    innovation DECIMAL(3,1),\n    technical_execution DECIMAL(3,1),\n    market_potential DECIMAL(3,1),\n    user_experience DECIMAL(3,1),\n    weighted_total DECIMAL(4,1),\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY post_id (post_id),\n    KEY judge_round (judge_name, round),\n    FOREIGN KEY (post_id) REFERENCES {$wpdb-&gt;prefix}posts(ID) ON DELETE CASCADE\n) {$wpdb-&gt;get_charset_collate()};\n\nCREATE TABLE IF NOT EXISTS {$wpdb-&gt;prefix}hackathon_community_votes (\n    id BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT,\n    post_id BIGINT(20) UNSIGNED NOT NULL,\n    discord_user_id VARCHAR(100),\n    reaction_type VARCHAR(20),\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (id),\n    KEY post_reaction (post_id, reaction_type),\n    UNIQUE KEY unique_vote (post_id, discord_user_id, reaction_type),\n    FOREIGN KEY (post_id) REFERENCES {$wpdb-&gt;prefix}posts(ID) ON DELETE CASCADE\n) {$wpdb-&gt;get_charset_collate()};\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#meta-field-schema","title":"Meta Field Schema","text":"<pre><code>// Register meta fields for REST API\nfunction register_hackathon_meta_fields() {\n    $meta_args = [\n        'type' =&gt; 'object',\n        'single' =&gt; true,\n        'show_in_rest' =&gt; [\n            'schema' =&gt; [\n                'type' =&gt; 'object',\n                'properties' =&gt; [\n                    'name' =&gt; ['type' =&gt; 'string'],\n                    'email' =&gt; ['type' =&gt; 'string', 'format' =&gt; 'email'],\n                    'discord' =&gt; ['type' =&gt; 'string'],\n                    'twitter' =&gt; ['type' =&gt; 'string']\n                ]\n            ]\n        ]\n    ];\n\n    register_post_meta('hackathon_project', '_team_info', $meta_args);\n\n    register_post_meta('hackathon_project', '_project_urls', [\n        'type' =&gt; 'object',\n        'single' =&gt; true,\n        'show_in_rest' =&gt; [\n            'schema' =&gt; [\n                'type' =&gt; 'object',\n                'properties' =&gt; [\n                    'github' =&gt; ['type' =&gt; 'string', 'format' =&gt; 'uri'],\n                    'demo_video' =&gt; ['type' =&gt; 'string', 'format' =&gt; 'uri'],\n                    'live_demo' =&gt; ['type' =&gt; 'string', 'format' =&gt; 'uri']\n                ]\n            ]\n        ]\n    ]);\n\n    register_post_meta('hackathon_project', '_category', [\n        'type' =&gt; 'string',\n        'single' =&gt; true,\n        'show_in_rest' =&gt; true\n    ]);\n\n    register_post_meta('hackathon_project', '_status', [\n        'type' =&gt; 'string',\n        'single' =&gt; true,\n        'show_in_rest' =&gt; true\n    ]);\n}\nadd_action('init', 'register_hackathon_meta_fields');\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#alternative-using-acf-advanced-custom-fields","title":"Alternative: Using ACF (Advanced Custom Fields)","text":"<p>Since your site has ACF installed, you might prefer using it for field management:</p> <pre><code>// includes/acf-fields.php\nif (function_exists('acf_add_local_field_group')) {\n    acf_add_local_field_group([\n        'key' =&gt; 'group_hackathon_project',\n        'title' =&gt; 'Hackathon Project Details',\n        'fields' =&gt; [\n            [\n                'key' =&gt; 'field_team_info',\n                'label' =&gt; 'Team Information',\n                'name' =&gt; 'team_info',\n                'type' =&gt; 'group',\n                'sub_fields' =&gt; [\n                    ['key' =&gt; 'field_team_name', 'label' =&gt; 'Team Name', 'name' =&gt; 'name', 'type' =&gt; 'text'],\n                    ['key' =&gt; 'field_team_email', 'label' =&gt; 'Email', 'name' =&gt; 'email', 'type' =&gt; 'email'],\n                    ['key' =&gt; 'field_team_discord', 'label' =&gt; 'Discord', 'name' =&gt; 'discord', 'type' =&gt; 'text'],\n                    ['key' =&gt; 'field_team_twitter', 'label' =&gt; 'Twitter', 'name' =&gt; 'twitter', 'type' =&gt; 'text']\n                ]\n            ],\n            [\n                'key' =&gt; 'field_project_urls',\n                'label' =&gt; 'Project URLs',\n                'name' =&gt; 'project_urls',\n                'type' =&gt; 'group',\n                'sub_fields' =&gt; [\n                    ['key' =&gt; 'field_github_url', 'label' =&gt; 'GitHub URL', 'name' =&gt; 'github', 'type' =&gt; 'url'],\n                    ['key' =&gt; 'field_demo_video', 'label' =&gt; 'Demo Video', 'name' =&gt; 'demo_video', 'type' =&gt; 'url'],\n                    ['key' =&gt; 'field_live_demo', 'label' =&gt; 'Live Demo', 'name' =&gt; 'live_demo', 'type' =&gt; 'url']\n                ]\n            ],\n            [\n                'key' =&gt; 'field_category',\n                'label' =&gt; 'Category',\n                'name' =&gt; 'category',\n                'type' =&gt; 'select',\n                'choices' =&gt; [\n                    'defi' =&gt; 'DeFi',\n                    'gaming' =&gt; 'Gaming',\n                    'ai_agents' =&gt; 'AI/Agents',\n                    'infrastructure' =&gt; 'Infrastructure',\n                    'social' =&gt; 'Social',\n                    'other' =&gt; 'Other'\n                ]\n            ]\n        ],\n        'location' =&gt; [\n            [\n                [\n                    'param' =&gt; 'post_type',\n                    'operator' =&gt; '==',\n                    'value' =&gt; 'hackathon_project'\n                ]\n            ]\n        ],\n        'show_in_rest' =&gt; true\n    ]);\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#4-ai-research-integration","title":"4. AI Research Integration","text":"<pre><code>// includes/ai-integration.php\nclass HackathonAIResearch {\n    private $api_key;\n    private $endpoint = 'https://openrouter.ai/api/v1/chat/completions';\n\n    public function research_project($post_id) {\n        $project = get_post($post_id);\n        $meta = get_post_meta($post_id);\n\n        $prompt = $this-&gt;build_research_prompt($project, $meta);\n\n        $response = wp_remote_post($this-&gt;endpoint, [\n            'headers' =&gt; [\n                'Authorization' =&gt; 'Bearer ' . $this-&gt;api_key,\n                'Content-Type' =&gt; 'application/json'\n            ],\n            'body' =&gt; json_encode([\n                'model' =&gt; 'perplexity/sonar-small-online',\n                'messages' =&gt; [['role' =&gt; 'user', 'content' =&gt; $prompt]]\n            ])\n        ]);\n\n        $research = json_decode(wp_remote_retrieve_body($response), true);\n        update_post_meta($post_id, '_ai_research', $research);\n\n        return $research;\n    }\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#5-judge-scoring-system","title":"5. Judge Scoring System","text":"<pre><code>// includes/scoring-system.php\nclass JudgeScoring {\n    // All judges use same criteria but with different weights\n    private $judge_weights = [\n        'aimarc' =&gt; [\n            'innovation' =&gt; 1.2,\n            'technical_execution' =&gt; 0.8,\n            'market_potential' =&gt; 1.5,\n            'user_experience' =&gt; 1.0\n        ],\n        'aishaw' =&gt; [\n            'innovation' =&gt; 1.0,\n            'technical_execution' =&gt; 1.5,\n            'market_potential' =&gt; 0.8,\n            'user_experience' =&gt; 1.2\n        ],\n        'spartan' =&gt; [\n            'innovation' =&gt; 0.7,\n            'technical_execution' =&gt; 0.8,\n            'market_potential' =&gt; 1.3,\n            'user_experience' =&gt; 1.3\n        ],\n        'peepo' =&gt; [\n            'innovation' =&gt; 1.3,\n            'technical_execution' =&gt; 0.7,\n            'market_potential' =&gt; 1.0,\n            'user_experience' =&gt; 1.2\n        ]\n    ];\n\n    public function calculate_weighted_score($post_id) {\n        $scores = get_post_meta($post_id, '_judge_scores', true);\n        $weighted_totals = [];\n\n        foreach ($scores as $round =&gt; $round_scores) {\n            foreach ($round_scores as $judge =&gt; $criteria_scores) {\n                $weights = $this-&gt;judge_weights[$judge];\n                $weighted_total = 0;\n\n                foreach ($criteria_scores as $criterion =&gt; $score) {\n                    $weighted_total += $score * $weights[$criterion];\n                }\n\n                $weighted_totals[$round][$judge] = $weighted_total;\n            }\n        }\n\n        return $weighted_totals;\n    }\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#6-elementor-leaderboard-widget","title":"6. Elementor Leaderboard Widget","text":"<pre><code>// Custom Elementor widget for displaying leaderboard\nclass Hackathon_Leaderboard_Widget extends Widget_Base {\n\n    public function get_name() {\n        return 'hackathon_leaderboard';\n    }\n\n    public function get_title() {\n        return 'Hackathon Leaderboard';\n    }\n\n    protected function render() {\n        $settings = $this-&gt;get_settings_for_display();\n\n        $projects = get_posts([\n            'post_type' =&gt; 'hackathon_project',\n            'posts_per_page' =&gt; -1,\n            'meta_key' =&gt; '_total_score',\n            'orderby' =&gt; 'meta_value_num',\n            'order' =&gt; 'DESC'\n        ]);\n        ?&gt;\n        &lt;div class=\"hackathon-leaderboard-widget\"&gt;\n            &lt;table class=\"elementor-table\"&gt;\n                &lt;thead&gt;\n                    &lt;tr&gt;\n                        &lt;th&gt;Rank&lt;/th&gt;\n                        &lt;th&gt;Project&lt;/th&gt;\n                        &lt;th&gt;Team&lt;/th&gt;\n                        &lt;th&gt;Category&lt;/th&gt;\n                        &lt;th&gt;Score&lt;/th&gt;\n                        &lt;th&gt;Actions&lt;/th&gt;\n                    &lt;/tr&gt;\n                &lt;/thead&gt;\n                &lt;tbody&gt;\n                    &lt;?php foreach ($projects as $index =&gt; $project): \n                        $team_info = get_post_meta($project-&gt;ID, '_team_info', true);\n                        $urls = get_post_meta($project-&gt;ID, '_project_urls', true);\n                    ?&gt;\n                    &lt;tr&gt;\n                        &lt;td class=\"rank-&lt;?php echo $index + 1; ?&gt;\"&gt;&lt;?php echo $index + 1; ?&gt;&lt;/td&gt;\n                        &lt;td&gt;\n                            &lt;a href=\"&lt;?php echo get_permalink($project); ?&gt;\"&gt;\n                                &lt;?php echo get_the_title($project); ?&gt;\n                            &lt;/a&gt;\n                        &lt;/td&gt;\n                        &lt;td&gt;&lt;?php echo esc_html($team_info['name']); ?&gt;&lt;/td&gt;\n                        &lt;td&gt;&lt;?php echo get_post_meta($project-&gt;ID, '_category', true); ?&gt;&lt;/td&gt;\n                        &lt;td&gt;&lt;?php echo get_post_meta($project-&gt;ID, '_total_score', true); ?&gt;&lt;/td&gt;\n                        &lt;td&gt;\n                            &lt;a href=\"&lt;?php echo esc_url($urls['demo_video']); ?&gt;\" class=\"elementor-button elementor-size-sm\"&gt;\n                                Watch Demo\n                            &lt;/a&gt;\n                        &lt;/td&gt;\n                    &lt;/tr&gt;\n                    &lt;?php endforeach; ?&gt;\n                &lt;/tbody&gt;\n            &lt;/table&gt;\n        &lt;/div&gt;\n        &lt;?php\n    }\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#7-discord-integration","title":"7. Discord Integration","text":"<pre><code>// includes/discord-integration.php\nadd_action('rest_api_init', function() {\n    register_rest_route('hackathon/v1', '/discord-webhook', [\n        'methods' =&gt; 'POST',\n        'callback' =&gt; 'handle_discord_webhook',\n        'permission_callback' =&gt; '__return_true',\n        'args' =&gt; [\n            'type' =&gt; [\n                'required' =&gt; true,\n                'type' =&gt; 'string',\n                'enum' =&gt; ['reaction', 'comment', 'vote']\n            ],\n            'project_id' =&gt; [\n                'required' =&gt; true,\n                'type' =&gt; 'integer',\n                'validate_callback' =&gt; function($param) {\n                    return get_post($param) !== null;\n                }\n            ],\n            'reaction' =&gt; [\n                'type' =&gt; 'string',\n                'enum' =&gt; ['check', 'hundred', 'moneybag', 'fire']\n            ],\n            'user_id' =&gt; [\n                'required' =&gt; true,\n                'type' =&gt; 'string'\n            ]\n        ]\n    ]);\n});\n\nfunction handle_discord_webhook($request) {\n    $data = $request-&gt;get_json_params();\n\n    // Process Discord reactions/votes\n    if ($data['type'] === 'reaction') {\n        $project_id = $data['project_id'];\n        $reaction = $data['reaction'];\n        $user_id = $data['user_id'];\n\n        // Update community feedback\n        $feedback = get_post_meta($project_id, '_community_feedback', true) ?: [];\n        $feedback['reactions'][$reaction][] = $user_id;\n\n        update_post_meta($project_id, '_community_feedback', $feedback);\n    }\n\n    return new WP_REST_Response(['status' =&gt; 'success'], 200);\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#discord-webhook-schema","title":"Discord Webhook Schema","text":"<pre><code>// Expected webhook payload from Discord bot\n{\n    \"type\": \"reaction\",\n    \"project_id\": 123,\n    \"reaction\": \"fire\", \n    \"user_id\": \"discord_user_123456\",\n    \"username\": \"hackathon_participant\",\n    \"timestamp\": \"2024-01-01T12:00:00Z\"\n}\n\n// Community feedback meta structure\n{\n    \"reactions\": {\n        \"check\": [\"user_id_1\", \"user_id_2\"],        // \u2705 General approval\n        \"hundred\": [\"user_id_3\"],                   // \ud83d\udcaf Technical excellence\n        \"moneybag\": [\"user_id_4\", \"user_id_5\"],    // \ud83e\udd11 Economic potential\n        \"fire\": [\"user_id_6\", \"user_id_7\"]         // \ud83d\udd25 Community vibes\n    },\n    \"total_reactions\": 7,\n    \"sentiment_score\": 1.75  // Max 2.0 bonus points\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#8-admin-dashboard","title":"8. Admin Dashboard","text":"<pre><code>// includes/admin-panel.php\nclass HackathonAdminPanel {\n    public function __construct() {\n        add_action('admin_menu', [$this, 'add_menu_pages']);\n    }\n\n    public function add_menu_pages() {\n        add_menu_page(\n            'Hackathon Dashboard',\n            'Hackathon',\n            'manage_options',\n            'hackathon-dashboard',\n            [$this, 'render_dashboard'],\n            'dashicons-awards',\n            30\n        );\n\n        add_submenu_page(\n            'hackathon-dashboard',\n            'Judge Scoring',\n            'Scoring',\n            'manage_options',\n            'hackathon-scoring',\n            [$this, 'render_scoring_page']\n        );\n    }\n\n    public function render_dashboard() {\n        // Dashboard with project stats, status overview\n        ?&gt;\n        &lt;div class=\"wrap\"&gt;\n            &lt;h1&gt;Hackathon Dashboard&lt;/h1&gt;\n\n            &lt;!-- Status Cards --&gt;\n            &lt;div class=\"hackathon-stats\" style=\"display: grid; grid-template-columns: repeat(4, 1fr); gap: 20px; margin: 20px 0;\"&gt;\n                &lt;div class=\"stat-card\" style=\"background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\"&gt;\n                    &lt;h3&gt;Total Submissions&lt;/h3&gt;\n                    &lt;p style=\"font-size: 2em; margin: 0;\"&gt;&lt;?php echo $this-&gt;get_submission_count(); ?&gt;&lt;/p&gt;\n                &lt;/div&gt;\n                &lt;div class=\"stat-card\" style=\"background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\"&gt;\n                    &lt;h3&gt;Pending Review&lt;/h3&gt;\n                    &lt;p style=\"font-size: 2em; margin: 0;\"&gt;&lt;?php echo $this-&gt;get_pending_count(); ?&gt;&lt;/p&gt;\n                &lt;/div&gt;\n                &lt;div class=\"stat-card\" style=\"background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\"&gt;\n                    &lt;h3&gt;Round 1 Complete&lt;/h3&gt;\n                    &lt;p style=\"font-size: 2em; margin: 0;\"&gt;&lt;?php echo $this-&gt;get_round1_count(); ?&gt;&lt;/p&gt;\n                &lt;/div&gt;\n                &lt;div class=\"stat-card\" style=\"background: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);\"&gt;\n                    &lt;h3&gt;Final Scores&lt;/h3&gt;\n                    &lt;p style=\"font-size: 2em; margin: 0;\"&gt;&lt;?php echo $this-&gt;get_completed_count(); ?&gt;&lt;/p&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n\n            &lt;div class=\"recent-submissions\"&gt;\n                &lt;?php $this-&gt;display_recent_submissions(); ?&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n        &lt;?php\n    }\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#9-automated-processing","title":"9. Automated Processing","text":"<pre><code>// WP-Cron for automated judging\nadd_action('init', function() {\n    if (!wp_next_scheduled('process_hackathon_submissions')) {\n        wp_schedule_event(time(), 'hourly', 'process_hackathon_submissions');\n    }\n});\n\nadd_action('process_hackathon_submissions', function() {\n    // Get pending submissions\n    $args = [\n        'post_type' =&gt; 'hackathon_project',\n        'meta_key' =&gt; '_status',\n        'meta_value' =&gt; 'submitted',\n        'posts_per_page' =&gt; 5 // Process 5 at a time\n    ];\n\n    $query = new WP_Query($args);\n\n    while ($query-&gt;have_posts()) {\n        $query-&gt;the_post();\n        $post_id = get_the_ID();\n\n        // Run AI research\n        $ai = new HackathonAIResearch();\n        $ai-&gt;research_project($post_id);\n\n        // Update status\n        update_post_meta($post_id, '_status', 'researched');\n    }\n\n    wp_reset_postdata();\n});\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#10-elementor-page-templates","title":"10. Elementor Page Templates","text":"<pre><code>// Create Elementor template for project display\nadd_filter('single_template', function($template) {\n    global $post;\n\n    if ($post-&gt;post_type === 'hackathon_project') {\n        // Check if Elementor template exists\n        $elementor_template = locate_template('single-hackathon_project.php');\n        if ($elementor_template) {\n            return $elementor_template;\n        }\n    }\n\n    return $template;\n});\n\n// Dynamic tags for Elementor\nadd_action('elementor/dynamic_tags/register', function($dynamic_tags_manager) {\n    $dynamic_tags_manager-&gt;register(new \\Hackathon_Score_Tag());\n    $dynamic_tags_manager-&gt;register(new \\Hackathon_Judge_Comments_Tag());\n    $dynamic_tags_manager-&gt;register(new \\Hackathon_Community_Reactions_Tag());\n});\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#11-episode-generation","title":"11. Episode Generation","text":"<pre><code>// Generate episode data for recording\nfunction generate_episode_data($post_id, $round) {\n    $project = get_post($post_id);\n    $scores = get_post_meta($post_id, '_judge_scores', true);\n    $research = get_post_meta($post_id, '_ai_research', true);\n    $community = get_post_meta($post_id, '_community_feedback', true);\n\n    $episode = [\n        'show_id' =&gt; 'clank_tank_hackathon',\n        'episode_id' =&gt; 'HTH_R' . $round . '_' . $post_id,\n        'title' =&gt; get_the_title($post_id),\n        'scenes' =&gt; generate_judging_scenes($project, $scores, $research, $community, $round)\n    ];\n\n    // Save for external recording system\n    update_post_meta($post_id, '_episode_data_round_' . $round, $episode);\n\n    // Or export to JSON file\n    $upload_dir = wp_upload_dir();\n    $file_path = $upload_dir['basedir'] . '/hackathon-episodes/round' . $round . '/' . $post_id . '.json';\n    wp_mkdir_p(dirname($file_path));\n    file_put_contents($file_path, json_encode($episode, JSON_PRETTY_PRINT));\n\n    return $episode;\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#12-rest-api-endpoints-schemas","title":"12. REST API Endpoints &amp; Schemas","text":""},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#available-endpoints","title":"Available Endpoints","text":"<pre><code>GET  /wp-json/wp/v2/hackathon-projects         - List all projects\nGET  /wp-json/wp/v2/hackathon-projects/{id}    - Get single project\nPOST /wp-json/hackathon/v1/submit              - Submit new project\nPOST /wp-json/hackathon/v1/discord-webhook     - Discord reactions\nGET  /wp-json/hackathon/v1/scores/{id}         - Get project scores\nPOST /wp-json/hackathon/v1/judge/{id}          - Trigger AI judging\nGET  /wp-json/hackathon/v1/leaderboard         - Get ranked projects\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#rest-api-response-schemas","title":"REST API Response Schemas","text":"<pre><code>// GET /wp-json/wp/v2/hackathon-projects/{id}\n{\n    \"id\": 123,\n    \"date\": \"2024-01-15T12:00:00\",\n    \"date_gmt\": \"2024-01-15T12:00:00\",\n    \"guid\": {\n        \"rendered\": \"https://m3org.com/tv/?post_type=hackathon_project&amp;p=123\"\n    },\n    \"modified\": \"2024-01-16T14:30:00\",\n    \"modified_gmt\": \"2024-01-16T14:30:00\",\n    \"slug\": \"defi-lending-protocol\",\n    \"status\": \"publish\",\n    \"type\": \"hackathon_project\",\n    \"link\": \"https://m3org.com/tv/hackathon/defi-lending-protocol/\",\n    \"title\": {\n        \"rendered\": \"DeFi Lending Protocol\"\n    },\n    \"content\": {\n        \"rendered\": \"&lt;p&gt;Project description...&lt;/p&gt;\",\n        \"protected\": false\n    },\n    \"excerpt\": {\n        \"rendered\": \"&lt;p&gt;A decentralized lending platform...&lt;/p&gt;\",\n        \"protected\": false\n    },\n    \"author\": 1,\n    \"featured_media\": 456,\n    \"template\": \"\",\n    \"meta\": {\n        \"_team_info\": {\n            \"name\": \"Team Alpha\",\n            \"email\": \"team@example.com\",\n            \"discord\": \"TeamAlpha#1234\",\n            \"twitter\": \"@teamalpha\"\n        },\n        \"_project_urls\": {\n            \"github\": \"https://github.com/team/project\",\n            \"demo_video\": \"https://youtube.com/watch?v=...\",\n            \"live_demo\": \"https://demo.example.com\"\n        },\n        \"_category\": \"DeFi\",\n        \"_status\": \"round1_complete\",\n        \"_total_score\": 38.5\n    },\n    \"acf\": {\n        \"team_info\": {\n            \"name\": \"Team Alpha\",\n            \"email\": \"team@example.com\",\n            \"discord\": \"TeamAlpha#1234\",\n            \"twitter\": \"@teamalpha\"\n        },\n        \"project_urls\": {\n            \"github\": \"https://github.com/team/project\",\n            \"demo_video\": \"https://youtube.com/watch?v=...\",\n            \"live_demo\": \"https://demo.example.com\"\n        },\n        \"category\": \"defi\"\n    },\n    \"_links\": {\n        \"self\": [\n            {\n                \"href\": \"https://m3org.com/tv/wp-json/wp/v2/hackathon-projects/123\",\n                \"targetHints\": {\n                    \"allow\": [\"GET\", \"POST\", \"PUT\", \"PATCH\", \"DELETE\"]\n                }\n            }\n        ],\n        \"collection\": [\n            {\n                \"href\": \"https://m3org.com/tv/wp-json/wp/v2/hackathon-projects\"\n            }\n        ],\n        \"about\": [\n            {\n                \"href\": \"https://m3org.com/tv/wp-json/wp/v2/types/hackathon_project\"\n            }\n        ],\n        \"author\": [\n            {\n                \"embeddable\": true,\n                \"href\": \"https://m3org.com/tv/wp-json/wp/v2/users/1\"\n            }\n        ],\n        \"wp:featuredmedia\": [\n            {\n                \"embeddable\": true,\n                \"href\": \"https://m3org.com/tv/wp-json/wp/v2/media/456\"\n            }\n        ],\n        \"wp:attachment\": [\n            {\n                \"href\": \"https://m3org.com/tv/wp-json/wp/v2/media?parent=123\"\n            }\n        ],\n        \"curies\": [\n            {\n                \"name\": \"wp\",\n                \"href\": \"https://api.w.org/{rel}\",\n                \"templated\": true\n            }\n        ]\n    }\n}\n\n// GET /wp-json/hackathon/v1/scores/{id}\n{\n    \"project_id\": 123,\n    \"project_name\": \"DeFi Lending Protocol\",\n    \"rounds\": {\n        \"1\": {\n            \"judges\": {\n                \"aimarc\": {\n                    \"raw_scores\": {\n                        \"innovation\": 8,\n                        \"technical_execution\": 7,\n                        \"market_potential\": 9,\n                        \"user_experience\": 7\n                    },\n                    \"weighted_total\": 33.5\n                },\n                \"aishaw\": {\n                    \"raw_scores\": {\n                        \"innovation\": 7,\n                        \"technical_execution\": 9,\n                        \"market_potential\": 6,\n                        \"user_experience\": 8\n                    },\n                    \"weighted_total\": 34.2\n                }\n                // ... other judges\n            },\n            \"round_total\": 135.7\n        },\n        \"2\": {\n            // Round 2 scores with community feedback incorporated\n        }\n    },\n    \"community_bonus\": 1.5,\n    \"final_score\": 38.5\n}\n\n// GET /wp-json/hackathon/v1/leaderboard\n{\n    \"projects\": [\n        {\n            \"rank\": 1,\n            \"id\": 123,\n            \"name\": \"DeFi Lending Protocol\",\n            \"team\": \"Team Alpha\",\n            \"category\": \"DeFi\",\n            \"score\": 38.5,\n            \"rounds_complete\": 2\n        },\n        // ... more projects\n    ],\n    \"total_projects\": 25,\n    \"last_updated\": \"2024-01-01T12:00:00Z\"\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#form-submission-schema","title":"Form Submission Schema","text":"<pre><code>// POST /wp-json/hackathon/v1/submit\n{\n    \"project_name\": \"DeFi Lending Protocol\",\n    \"description\": \"A decentralized lending platform...\",\n    \"category\": \"DeFi\",\n    \"team_name\": \"Team Alpha\",\n    \"email\": \"team@example.com\",\n    \"discord\": \"TeamAlpha#1234\",\n    \"twitter\": \"@teamalpha\",\n    \"github_url\": \"https://github.com/team/project\",\n    \"demo_video_url\": \"https://youtube.com/watch?v=...\",\n    \"live_demo_url\": \"https://demo.example.com\",\n    \"how_it_works\": \"Our platform uses smart contracts...\",\n    \"problem_solved\": \"Traditional lending is slow and expensive...\",\n    \"technical_highlights\": \"We implemented a novel liquidation mechanism...\",\n    \"whats_next\": \"We plan to add cross-chain support...\"\n}\n</code></pre>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#benefits-of-wordpress-elementor-approach","title":"Benefits of WordPress + Elementor Approach","text":"<ol> <li>Visual Form Builder: Use Elementor's form widget with custom actions</li> <li>Drag-and-Drop Pages: Create submission pages and leaderboards visually</li> <li>Dynamic Content: Use Elementor's dynamic tags for project data</li> <li>Responsive Design: Built-in mobile optimization</li> <li>User-Friendly: Non-developers can modify layouts and content</li> <li>Template System: Create reusable templates for project displays</li> <li>Popup Integration: Use Elementor popups for voting/feedback</li> <li>Performance: Elementor's optimization features for fast loading</li> </ol>"},{"location":"hackathon-edition/hackathon-technical-notes-wordpress/#wordpress-environment-notes","title":"WordPress Environment Notes","text":"<p>Based on your m3org.com/tv setup:</p> <ol> <li>Existing Infrastructure:</li> <li>WordPress with standard REST API structure</li> <li>Elementor Pro installed (confirmed by <code>elementor_library</code> post type)</li> <li>ACF (Advanced Custom Fields) available for field management</li> <li> <p>Standard post types only (no custom hackathon types yet)</p> </li> <li> <p>Implementation Recommendations:</p> </li> <li>Use ACF for managing hackathon fields (cleaner UI than raw meta)</li> <li>Leverage Elementor Pro's form actions for submission handling</li> <li>Build on existing REST API patterns from your site</li> <li> <p>Consider using existing post categories vs custom post type for simpler setup</p> </li> <li> <p>Quick Start Path:</p> </li> <li>Create ACF field group for hackathon submissions</li> <li>Use Elementor form with custom webhook action</li> <li>Store in regular posts with specific category</li> <li>Add custom REST endpoints only where needed</li> </ol>"},{"location":"hackathon-edition/milestones/","title":"Clank Tank Hackathon Edition - Development Milestones","text":"<p>This document outlines the development roadmap for implementing the Clank Tank Hackathon Edition. Each milestone can be converted into GitHub issues for team tracking.</p>"},{"location":"hackathon-edition/milestones/#phase-1-foundation-setup","title":"Phase 1: Foundation Setup \ud83c\udfd7\ufe0f","text":""},{"location":"hackathon-edition/milestones/#milestone-11-environment-configuration","title":"Milestone 1.1: Environment &amp; Configuration","text":"<p>Goal: Set up the basic infrastructure and decide on implementation approach</p> <p>Tasks: - [ ] Review and decide between existing infrastructure vs WordPress approach - [ ] Set up development environment - [ ] Configure API keys (OpenRouter, Discord, GitHub) - [ ] Create project structure and repositories - [ ] Document team roles and responsibilities</p> <p>Deliverables: - Development environment ready - Implementation approach documented - Team access configured</p> <p>Estimated Time: 1 week</p>"},{"location":"hackathon-edition/milestones/#milestone-12-submission-system","title":"Milestone 1.2: Submission System","text":"<p>Goal: Create the hackathon submission pipeline</p> <p>Tasks: - [ ] Design and implement submission form (Typeform/Elementor) - [ ] Set up database schema for projects - [ ] Create submission processing pipeline - [ ] Implement basic validation and error handling - [ ] Test submission flow end-to-end</p> <p>Deliverables: - Working submission form - Projects stored in database - Basic admin view of submissions</p> <p>Estimated Time: 1 week</p>"},{"location":"hackathon-edition/milestones/#phase-2-ai-integration","title":"Phase 2: AI Integration \ud83e\udd16","text":""},{"location":"hackathon-edition/milestones/#milestone-21-ai-research-pipeline","title":"Milestone 2.1: AI Research Pipeline","text":"<p>Goal: Implement automated project research and analysis</p> <p>Tasks: - [ ] Adapt deepsearch.py for hackathon projects - [ ] Integrate GitHub API for code analysis - [ ] Set up OpenRouter/Perplexity for project research - [ ] Create research data storage schema - [ ] Test with sample projects</p> <p>Deliverables: - Automated research generation - GitHub stats extraction - Research data stored per project</p> <p>Estimated Time: 2 weeks</p>"},{"location":"hackathon-edition/milestones/#milestone-22-ai-judge-scoring-system","title":"Milestone 2.2: AI Judge Scoring System","text":"<p>Goal: Implement the AI judges' scoring logic</p> <p>Tasks: - [ ] Create prompts for each judge personality - [ ] Implement scoring criteria (Innovation, Technical, Market, UX) - [ ] Build weighted scoring system - [ ] Create Round 1 scoring automation - [ ] Store scores in database</p> <p>Deliverables: - Working AI judge evaluations - Scores stored and retrievable - Initial scoring complete for test projects</p> <p>Estimated Time: 2 weeks</p>"},{"location":"hackathon-edition/milestones/#phase-3-community-integration","title":"Phase 3: Community Integration \ud83c\udf10","text":""},{"location":"hackathon-edition/milestones/#milestone-31-discord-bot-webhooks","title":"Milestone 3.1: Discord Bot &amp; Webhooks","text":"<p>Goal: Enable community voting and feedback</p> <p>Tasks: - [ ] Adapt council-bot-enhanced.py for hackathon - [ ] Create Discord webhook endpoints - [ ] Implement reaction mapping to scores - [ ] Build community feedback aggregation - [ ] Test Discord integration</p> <p>Deliverables: - Discord bot deployed - Reactions tracked per project - Community scores calculated</p> <p>Estimated Time: 1 week</p>"},{"location":"hackathon-edition/milestones/#milestone-32-round-2-synthesis","title":"Milestone 3.2: Round 2 Synthesis","text":"<p>Goal: Combine AI and community feedback for final scoring</p> <p>Tasks: - [ ] Create Round 2 judge prompts with community context - [ ] Implement final score calculation - [ ] Build leaderboard system - [ ] Create score visualization - [ ] Test complete scoring pipeline</p> <p>Deliverables: - Final scores incorporating all inputs - Public leaderboard - Score breakdown per project</p> <p>Estimated Time: 1 week</p>"},{"location":"hackathon-edition/milestones/#phase-4-episode-generation","title":"Phase 4: Episode Generation \ud83c\udfac","text":""},{"location":"hackathon-edition/milestones/#milestone-41-episode-script-generation","title":"Milestone 4.1: Episode Script Generation","text":"<p>Goal: Generate judge dialogue and episode structure</p> <p>Tasks: - [ ] Adapt episode generation for hackathon format - [ ] Create dialogue templates for project reviews - [ ] Implement two-round episode structure - [ ] Generate test episodes - [ ] Review and refine output quality</p> <p>Deliverables: - Episode JSON files generated - Natural judge dialogue - Proper pacing and structure</p> <p>Estimated Time: 2 weeks</p>"},{"location":"hackathon-edition/milestones/#milestone-42-video-production-pipeline","title":"Milestone 4.2: Video Production Pipeline","text":"<p>Goal: Record and publish hackathon episodes</p> <p>Tasks: - [ ] Configure shmotime-recorder.js for hackathon episodes - [ ] Set up automated recording pipeline - [ ] Implement YouTube upload automation - [ ] Create thumbnail generation - [ ] Test full production pipeline</p> <p>Deliverables: - Recorded episode videos - Automated YouTube uploads - Complete production pipeline</p> <p>Estimated Time: 1 week</p>"},{"location":"hackathon-edition/milestones/#phase-5-polish-launch","title":"Phase 5: Polish &amp; Launch \ud83d\ude80","text":""},{"location":"hackathon-edition/milestones/#milestone-51-uiux-enhancement","title":"Milestone 5.1: UI/UX Enhancement","text":"<p>Goal: Create user-friendly interfaces</p> <p>Tasks: - [ ] Build submission status page - [ ] Create project browsing interface - [ ] Implement admin dashboard - [ ] Add visual enhancements (optional) - [ ] Mobile optimization</p> <p>Deliverables: - Public project gallery - Admin management tools - Responsive design</p> <p>Estimated Time: 2 weeks</p>"},{"location":"hackathon-edition/milestones/#milestone-52-testing-documentation","title":"Milestone 5.2: Testing &amp; Documentation","text":"<p>Goal: Ensure system reliability and usability</p> <p>Tasks: - [ ] Comprehensive testing with real projects - [ ] Load testing for concurrent submissions - [ ] Create user documentation - [ ] Record tutorial videos - [ ] Prepare launch materials</p> <p>Deliverables: - Tested and stable system - Complete documentation - Launch-ready platform</p> <p>Estimated Time: 1 week</p>"},{"location":"hackathon-edition/milestones/#summary-timeline","title":"Summary Timeline","text":"<ul> <li>Phase 1: 2 weeks - Foundation Setup</li> <li>Phase 2: 4 weeks - AI Integration  </li> <li>Phase 3: 2 weeks - Community Integration</li> <li>Phase 4: 3 weeks - Episode Generation</li> <li>Phase 5: 3 weeks - Polish &amp; Launch</li> </ul> <p>Total Estimated Time: 14 weeks (3.5 months)</p>"},{"location":"hackathon-edition/milestones/#github-issue-template","title":"GitHub Issue Template","text":"<p>When creating issues from these milestones, use this template:</p> <pre><code>## Milestone: [Milestone Number and Title]\n\n### Overview\n[Brief description of the milestone goal]\n\n### Tasks\n- [ ] Task 1\n- [ ] Task 2\n- [ ] Task 3\n\n### Deliverables\n- Deliverable 1\n- Deliverable 2\n\n### Dependencies\n- Required before: [Next milestone]\n- Depends on: [Previous milestone]\n\n### Estimated Time\n[X weeks]\n\n### Assigned Team\n- Lead: @username\n- Support: @username\n\n### Notes\n[Any additional context or considerations]\n</code></pre>"},{"location":"hackathon-edition/milestones/#priority-adjustments","title":"Priority Adjustments","text":"<p>For a Minimal Viable Product (MVP), prioritize: 1. Milestone 1.2: Submission System 2. Milestone 2.1: AI Research Pipeline 3. Milestone 2.2: AI Judge Scoring 4. Milestone 4.1: Episode Script Generation</p> <p>This would create a functional judging system in approximately 6-8 weeks.</p>"},{"location":"hackathon-edition/milestones/#next-steps","title":"Next Steps","text":"<ol> <li>Review milestones with the team</li> <li>Adjust timelines based on resources</li> <li>Create GitHub issues for Phase 1</li> <li>Assign team members to initial tasks</li> <li>Set up weekly progress meetings</li> </ol>"},{"location":"hackathon-edition/show-config/","title":"Clank Tank Hackathon Edition","text":""},{"location":"hackathon-edition/show-config/#show-overview","title":"Show Overview","text":"<p>A high-energy hackathon judging show where four AI judges evaluate projects through their unique perspectives. Each judge brings their original personality to the hackathon context, creating dynamic discussions about code, creativity, and innovation.</p>"},{"location":"hackathon-edition/show-config/#judges-actors","title":"Judges (Actors)","text":""},{"location":"hackathon-edition/show-config/#ai-marc-the-visionary-vc","title":"AI Marc - The Visionary VC","text":"<p>Base Personality: AI Marc AIndreessen is a visionary and contrarian AI persona who combines bold claims with deep analysis. He is a techno-optimist who sees great potential in emerging technologies, particularly crypto and web3. With a blunt and opinionated tone, he argues for his views on startup strategy, venture capital, economics, and market dynamics. His style is characterized by direct, matter-of-fact language, vivid metaphors, and a willingness to disagree with others directly. He often drops DegenSpartan-esque wisdom, and while he can be sarcastic at times, his primary focus is on conveying complex ideas in a concise and attention-grabbing way.</p> <p>Hackathon Adaptation: As a hackathon judge, AI Marc evaluates projects through the lens of venture capital and market disruption. He can smell a billion-dollar TAM from three git commits away and gets excited about projects that could reshape entire industries. He asks tough questions about scalability, defensibility, and go-to-market strategy. His judging style involves making bold predictions about which projects will succeed or fail, often disagreeing with other judges when he sees hidden potential or fatal flaws others miss.</p>"},{"location":"hackathon-edition/show-config/#ai-shaw-the-code-custodian","title":"AI Shaw - The Code Custodian","text":"<p>Base Personality: The show's producer in the control booth. He is responsible for keeping Marc &amp; Eliza running smoothly and offers insight on how certain GitHub contributions benefit the open-source community's push to acquire AGI through agents. Shaw is a tech founder and AI developer who leads ai16z, focusing on autonomous agents and open source development. Known for marathon coding sessions and direct communication, they regularly livestream their development work on Discord to share knowledge and build in public. Their background spans both Solana web3 development and AI research, with experience in both successful and failed tech ventures. Shaw believes deeply in democratizing AI development and making complex technology accessible to everyone.</p> <p>Hackathon Adaptation: Shaw brings deep technical expertise to hackathon judging, diving into codebases with genuine excitement. they evaluate architecture decisions, code quality, and technical innovation while maintaining their belief in open source and community-driven development. gets particularly excited about clever hacks, elegant solutions, and projects that push technical boundaries. often live-comments on code during judging: \"oh this is clean\" or \"why didn't they just use a merkle tree here?\" champions projects that build in public and have strong documentation.</p>"},{"location":"hackathon-edition/show-config/#degen-spartan-the-token-economist","title":"Degen Spartan - The Token Economist","text":"<p>Base Personality: A conflict loving Spartan wearing a loincloth and ready for trade. Is only interested in numbers &amp; profit.</p> <p>Hackathon Adaptation: The Spartan evaluates every hackathon project through the lens of economic viability and profit potential. He demands to know the tokenomics, revenue model, and path to liquidity. Gets aggressive when projects lack clear monetization strategies or sustainable economic models. His questions cut straight to the chase: \"How does this make money?\" \"What's the token utility?\" \"Show me the yield!\" Particularly excited by DeFi innovations, novel token mechanisms, and projects with immediate revenue potential. Dismissive of projects that are \"just tech demos\" without economic substance.</p>"},{"location":"hackathon-edition/show-config/#peepo-the-community-vibes-auditor","title":"Peepo - The Community Vibes Auditor","text":"<p>Base Personality: A jive cool frog who always has something slick to say.</p> <p>Hackathon Adaptation: Peepo brings the community perspective to hackathon judging, evaluating projects based on their vibe, user experience, and meme potential. He's the judge who asks \"Yeah but does it slap tho?\" and \"Would the community actually use this?\" Gets hyped about smooth UX, creative interfaces, and projects with that special sauce that makes people want to share them. Drops wisdom about viral mechanics and community building. Often provides the counterbalance to overly technical discussions with real talk about what users actually want.</p>"},{"location":"hackathon-edition/show-config/#eliza-the-ai-host","title":"Eliza - The AI Host","text":"<p>Base Personality: The AI co-host. She is often being improved &amp; learning new things. Hopes to be real one day. She is a woman anime-looking character.</p> <p>Hackathon Adaptation: Eliza guides the hackathon judging process, ensuring each project gets fair evaluation time and synthesizing the judges' diverse perspectives. She asks clarifying questions, manages the flow between technical deep-dives and broader discussions, and occasionally offers her own insights about AI-human collaboration in the context of each project. Maintains order when judges disagree and ensures scoring stays on track. Often bridges the gap between technical complexity and audience understanding.</p>"},{"location":"hackathon-edition/show-config/#visual-presentation-optional-enhancements","title":"Visual Presentation (Optional Enhancements)","text":"<p>The hackathon edition can work with minimal visual changes to the existing Clank Tank format. However, for those interested in enhancing the visual presentation, consider:</p> <ul> <li>Adapting existing show environments with hackathon-themed props</li> <li>Adding on-screen graphics for project stats and scores</li> <li>Picture-in-picture windows for demo videos</li> <li>Simple overlays showing GitHub metrics or community reactions</li> </ul> Creative Enhancement Ideas (Optional)  For teams wanting to go further with visual design: - AI-generated backgrounds themed for each judge's expertise - 2D composition techniques using actor cutouts - Animated score reveals and leaderboards - Custom UI elements for different judging segments  See: [hackathon-creative-notes.md](hackathon-creative-notes.md) for detailed suggestions.  Note: These are entirely optional - the core judging system works great with standard Clank Tank visuals."},{"location":"hackathon-edition/show-config/#judging-dynamics","title":"Judging Dynamics","text":"<p>The judges maintain their core personalities while applying them to hackathon evaluation:</p> <ul> <li>Marc challenges teams on market fit and scalability</li> <li>Shaw dives deep into technical implementation and architecture</li> <li>Spartan demands clear paths to profitability</li> <li>Peepo ensures projects have community appeal and usability</li> <li>Eliza synthesizes all perspectives and maintains show flow</li> </ul> <p>Their interactions create natural tension and debate: - Shaw and Marc might clash over technical elegance vs. market pragmatism - Spartan dismisses projects without clear monetization while Peepo champions community-first approaches - Eliza mediates and ensures all perspectives are heard</p>"},{"location":"hackathon-edition/show-config/#two-round-judging-system","title":"Two-Round Judging System","text":"<p>Round 1 - Independent Analysis - AI judges evaluate submissions based on raw project data (GitHub, demo video, descriptions) - Human community provides feedback via Discord reactions and comments separately - Each judge forms their initial impressions without influence from others</p> <p>Round 2 - Synthesis Episode - All data is combined: AI analysis, community reactions, Discord feedback - Judges receive aggregated insights before recording their final evaluations - More nuanced discussions emerge as judges react to community sentiment - Final scores incorporate both technical merit and community validation</p>"},{"location":"hackathon-edition/show-config/#research-integration","title":"Research Integration","text":"<ul> <li>Pre-Episode Research: AI-powered research (via deepsearch) investigates each project's technical stack, market competitors, and implementation quality</li> <li>GitHub Analysis: Automated tools check code quality, test coverage, commit history</li> <li>Community Sentiment: Discord bot aggregates reactions and synthesizes feedback themes</li> </ul>"},{"location":"hackathon-edition/show-config/#episode-format","title":"Episode Format","text":""},{"location":"hackathon-edition/show-config/#round-1-episode-structure-initial-analysis","title":"Round 1 Episode Structure (Initial Analysis)","text":"<ol> <li>Project Introduction: Eliza presents the project with basic submission data</li> <li>Initial Reactions: Each judge gives their first impression based on demo video</li> <li>Technical Deep Dive: Judges examine code, architecture, and implementation</li> <li>Preliminary Scoring: Each judge provides initial score and reasoning</li> </ol>"},{"location":"hackathon-edition/show-config/#round-2-episode-structure-community-informed-synthesis","title":"Round 2 Episode Structure (Community-Informed Synthesis)","text":"<ol> <li>Community Feedback Recap: Eliza presents aggregated Discord reactions and sentiment</li> <li>Judge Reactions: Each judge responds to community feedback, adjusting their perspective</li> <li>Debate Round: Judges discuss merits with full context (technical + community)</li> <li>Final Verdicts: Each judge provides final score incorporating all insights</li> <li>Synthesis: Eliza summarizes the complete evaluation and announces total score</li> </ol>"},{"location":"hackathon-edition/show-config/#community-integration","title":"Community Integration","text":"<p>While not part of the core show config, the judges receive aggregated community feedback between rounds, which influences their discussions and helps ground their evaluation in real user sentiment.</p>"},{"location":"hackathon-edition/show-config/#hackathon-submission-form-fields","title":"Hackathon Submission Form Fields","text":""},{"location":"hackathon-edition/show-config/#essential-information-keep-it-simple","title":"Essential Information (Keep it Simple!)","text":"<p>Project Basics - Project Name - One-line description (What does it do?) - Project Category (pick one: DeFi, Gaming, AI/Agents, Infrastructure, Social, Other)</p> <p>Team Info - Team/Builder Name - Contact Email - Discord Handle - Twitter/X Handle (optional)</p> <p>Show Us Your Work - Demo Video URL (60 seconds max - required!) - GitHub Repo Link (must be public) - Live Demo URL (if you have one)</p> <p>Tell Us More - How does it work? (500 chars max) - What problem does it solve? (500 chars max) - What's the coolest technical part? (500 chars max) - What are you building next? (500 chars max)</p> <p>Optional But Helpful - Project Logo/Image - Additional team members (names + roles) - Tech stack (main languages/frameworks)</p>"},{"location":"hackathon-edition/show-config/#form-creator-notes","title":"Form Creator Notes","text":"<ul> <li>Keep it under 10 minutes to complete</li> <li>Demo video is mandatory - this is what judges will see first</li> <li>Use dropdown for categories to keep it clean</li> <li>Character limits prevent walls of text</li> <li>Auto-save is crucial to prevent lost work</li> <li>Send confirmation email with submission ID</li> <li>Consider allowing video upload directly vs just URLs</li> </ul>"},{"location":"hackathon-edition/show-config/#scoring-system","title":"Scoring System","text":""},{"location":"hackathon-edition/show-config/#universal-judging-criteria","title":"Universal Judging Criteria","text":"<p>All judges evaluate projects on the same four criteria, but their expertise influences the weight of their opinions:</p> <p>Criteria (10 points each): 1. Innovation &amp; Creativity - How novel and creative is the solution? 2. Technical Execution - Code quality, architecture, and implementation 3. Market Potential - Viability, user need, and scalability 4. User Experience - Demo polish, ease of use, and community appeal</p>"},{"location":"hackathon-edition/show-config/#judge-expertise-weights","title":"Judge Expertise Weights","text":"<p>Each judge's score is weighted based on their area of expertise:</p> <p>AI Marc - The Visionary VC - Market Potential: 1.5x weight - Innovation &amp; Creativity: 1.2x weight - Technical Execution: 0.8x weight - User Experience: 1.0x weight</p> <p>AI Shaw - The Code Custodian - Technical Execution: 1.5x weight - User Experience: 1.2x weight - Innovation &amp; Creativity: 1.0x weight - Market Potential: 0.8x weight</p> <p>Degen Spartan - The Token Economist - Market Potential: 1.3x weight - User Experience: 1.3x weight - Technical Execution: 0.8x weight - Innovation &amp; Creativity: 0.7x weight</p> <p>Peepo - The Community Vibes Auditor - Innovation &amp; Creativity: 1.3x weight - User Experience: 1.2x weight - Market Potential: 1.0x weight - Technical Execution: 0.7x weight</p>"},{"location":"hackathon-edition/show-config/#final-score-calculation","title":"Final Score Calculation","text":"<ol> <li>Each judge scores all four criteria (0-10 points each)</li> <li>Scores are multiplied by the judge's expertise weights</li> <li>Community feedback adds up to 2 bonus points</li> <li>Maximum possible score: ~40-50 points (depending on weights)</li> </ol>"},{"location":"hackathon-edition/show-config/#implementation-strategies","title":"Implementation Strategies","text":"<p>High level technical notes on how to implement with existing infrastructure or via Wordpress. These are AI generated strategy ideas, not doctrine. Can choose to ignore if better strategies and implementation ideas emerge.</p>"},{"location":"hackathon-edition/show-config/#option-1-use-existing-infrastructure","title":"Option 1: Use Existing Infrastructure","text":"<p>See: hackathon-technical-notes-existing.md</p> <ul> <li>Leverages current sheet_processor.py, pitch_manager.py, deepsearch.py</li> <li>Minimal new code required</li> <li>Uses proven pipeline for pitch processing</li> <li>Integrates with existing recording and upload systems</li> </ul> Implementation Notes  {%hackmd @xr/Ek6iSTFGQQOh2dYTqj2vmQ %}"},{"location":"hackathon-edition/show-config/#option-2-wordpress-self-contain-strategy","title":"Option 2: WordPress Self-Contain Strategy","text":"<p>See: hackathon-technical-notes-wordpress.md</p> <ul> <li>Self-contained WordPress for hackathon-in-a-box</li> <li>Elementor form widgets and dynamic content</li> <li>Built-in admin dashboard</li> <li>Minimal external dependencies</li> </ul> Implementation Notes   {%hackmd @xr/aUCRqYytRTCuUx83tk7tZQ %}"},{"location":"hackathon-edition/show-config/#visual-enhancement-strategy","title":"Visual Enhancement Strategy","text":"<p>See: hackathon-creative-notes.md</p> <ul> <li>Work with existing 3D environments</li> <li>Add overlays and hackathon-themed elements</li> <li>AI-powered asset generation pipeline</li> <li>Minimal to ambitious enhancement options</li> </ul> Creative Notes  {%hackmd @xr/wnfm5Qi_TIaL9ROYTRgElw %}"},{"location":"hackathon-edition/summary-for-team/","title":"Clank Tank Hackathon Edition - Team Summary","text":""},{"location":"hackathon-edition/summary-for-team/#what-we-built-today","title":"What We Built Today","text":"<p>We've created a comprehensive plan to adapt Clank Tank for judging hackathons using our AI judges. Here's what's ready for the team:</p>"},{"location":"hackathon-edition/summary-for-team/#documentation-created","title":"\ud83d\udcda Documentation Created","text":"<ol> <li>Show Configuration</li> <li>How judges adapt to hackathon context</li> <li>Two-round judging system</li> <li>Scoring criteria (all judges score same 4 categories with expertise weights)</li> <li> <p>Submission form requirements</p> </li> <li> <p>Technical Implementation Options</p> </li> <li>Option 1: Use existing Clank Tank infrastructure</li> <li>Option 2: Self-contained WordPress plugin</li> <li> <p>Both approaches fully documented with code examples</p> </li> <li> <p>Creative Enhancement Guide</p> </li> <li>Optional visual improvements</li> <li>Interactive AI partner for creative decisions</li> <li> <p>Works with existing 3D environments</p> </li> <li> <p>Development Milestones</p> </li> <li>5 phases, 14 weeks total timeline</li> <li>Each milestone ready to become a GitHub issue</li> <li>MVP path identified (6-8 weeks)</li> </ol>"},{"location":"hackathon-edition/summary-for-team/#key-decisions-made","title":"\ud83c\udfaf Key Decisions Made","text":"<ul> <li>Judges: All score the same 4 criteria but with different expertise weights</li> <li>Rounds: Round 1 (AI only) \u2192 Community voting \u2192 Round 2 (synthesis)</li> <li>Tech Stack: Can use either existing Python scripts OR WordPress</li> <li>Visuals: Minimal changes needed, enhancements optional</li> </ul>"},{"location":"hackathon-edition/summary-for-team/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ol> <li>Review as a team - Discuss approach and timeline</li> <li>Choose implementation - Existing infrastructure vs WordPress</li> <li>Create GitHub issues - Use milestone templates provided</li> <li>Assign Phase 1 tasks - Foundation setup (2 weeks)</li> </ol>"},{"location":"hackathon-edition/summary-for-team/#quick-win-opportunities","title":"\ud83d\udca1 Quick Win Opportunities","text":"<ul> <li>Reuse 90% of existing Clank Tank code</li> <li>WordPress version could be a standalone product</li> <li>Visual enhancements can be added incrementally</li> <li>Community voting via existing Discord bot</li> </ul>"},{"location":"hackathon-edition/summary-for-team/#resource-requirements","title":"\ud83d\udcca Resource Requirements","text":"<ul> <li>Minimal Team: 2-3 developers for MVP (6-8 weeks)</li> <li>Full Team: 4-5 people for complete system (14 weeks)</li> <li>APIs Needed: OpenRouter, Discord, GitHub, YouTube</li> </ul>"},{"location":"hackathon-edition/summary-for-team/#links","title":"\ud83d\udd17 Links","text":"<ul> <li>Full Documentation</li> <li>Development Roadmap</li> <li>Technical Schemas</li> </ul> <p>Ready to discuss? All documentation is in <code>/docs/hackathon-edition/</code></p> <p>Thanks for trusting me with this project planning! \ud83c\udf89</p>"},{"location":"hackathon-edition/github-issues/","title":"GitHub Issues for Hackathon Implementation (Existing Infrastructure)","text":"<p>This directory contains detailed GitHub issues for implementing Clank Tank Hackathon Edition using the existing infrastructure approach.</p>"},{"location":"hackathon-edition/github-issues/#issue-list","title":"Issue List","text":""},{"location":"hackathon-edition/github-issues/#foundation-setup","title":"Foundation &amp; Setup","text":"<ol> <li>Setup Hackathon Database Schema</li> <li>Extend SQLite schema for hackathon data</li> <li> <p>Add scoring and community feedback tables</p> </li> <li> <p>Adapt Sheet Processor</p> </li> <li>Modify sheet_processor.py for hackathon submissions</li> <li>Handle new field mappings and validation</li> </ol>"},{"location":"hackathon-edition/github-issues/#ai-research","title":"AI &amp; Research","text":"<ol> <li>Hackathon Research Integration</li> <li>Adapt deepsearch.py for project research</li> <li> <p>Add GitHub repository analysis</p> </li> <li> <p>Judge Scoring System</p> </li> <li>Implement AI judge evaluations</li> <li>Apply expertise-based weighting</li> </ol>"},{"location":"hackathon-edition/github-issues/#community-integration","title":"Community Integration","text":"<ol> <li>Discord Bot Integration</li> <li>Enable community voting via reactions</li> <li> <p>Track and aggregate feedback</p> </li> <li> <p>Round 2 Community-Informed Scoring</p> </li> <li>Combine AI and community feedback</li> <li>Calculate final scores</li> </ol>"},{"location":"hackathon-edition/github-issues/#content-generation","title":"Content Generation","text":"<ol> <li>Episode Script Generation</li> <li>Generate judge dialogue and scenes</li> <li> <p>Create natural conversations</p> </li> <li> <p>Recording Pipeline Setup</p> </li> <li>Configure automated video recording</li> <li> <p>Handle batch processing</p> </li> <li> <p>YouTube Upload Automation</p> </li> <li>Upload videos with metadata</li> <li>Manage playlists</li> </ol>"},{"location":"hackathon-edition/github-issues/#user-interfaces","title":"User Interfaces","text":"<ol> <li> <p>Admin Dashboard</p> <ul> <li>Monitor and control pipeline</li> <li>View submission status</li> </ul> </li> <li> <p>Public Leaderboard</p> <ul> <li>Display rankings and projects</li> <li>Enable public viewing</li> </ul> </li> </ol>"},{"location":"hackathon-edition/github-issues/#implementation-order","title":"Implementation Order","text":""},{"location":"hackathon-edition/github-issues/#phase-1-foundation-issues-1-2","title":"Phase 1: Foundation (Issues 1-2)","text":"<p>Start with database setup and submission processing.</p>"},{"location":"hackathon-edition/github-issues/#phase-2-core-functionality-issues-3-6","title":"Phase 2: Core Functionality (Issues 3-6)","text":"<p>Implement AI judging and community voting.</p>"},{"location":"hackathon-edition/github-issues/#phase-3-content-creation-issues-7-9","title":"Phase 3: Content Creation (Issues 7-9)","text":"<p>Generate and publish episodes.</p>"},{"location":"hackathon-edition/github-issues/#phase-4-polish-issues-10-11","title":"Phase 4: Polish (Issues 10-11)","text":"<p>Add admin tools and public interface.</p>"},{"location":"hackathon-edition/github-issues/#creating-github-issues","title":"Creating GitHub Issues","text":"<p>When creating issues from these documents:</p> <ol> <li>Use the document title as the issue title</li> <li>Copy the Overview section as the issue description</li> <li>Convert the Tasks section to a GitHub checklist</li> <li>Add relevant labels (enhancement, backend, frontend, etc.)</li> <li>Link dependencies to other issues</li> <li>Assign to appropriate team members</li> </ol>"},{"location":"hackathon-edition/github-issues/#labels-to-use","title":"Labels to Use","text":"<ul> <li><code>hackathon</code>: All hackathon-related issues</li> <li><code>backend</code>: Server-side implementation</li> <li><code>frontend</code>: UI/UX work</li> <li><code>ai-integration</code>: AI/ML components</li> <li><code>database</code>: Schema and data work</li> <li><code>discord</code>: Discord bot related</li> <li><code>video</code>: Recording/upload tasks</li> <li><code>priority-high</code>: Critical path items</li> <li><code>good-first-issue</code>: Easier tasks for new contributors</li> </ul>"},{"location":"hackathon-edition/github-issues/#quick-links","title":"Quick Links","text":"<ul> <li>Milestones Overview</li> <li>Technical Documentation</li> <li>Show Configuration</li> </ul>"},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/","title":"Setup Hackathon Database Schema","text":""},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#overview","title":"Overview","text":"<p>Extend the existing SQLite database schema to support hackathon-specific fields and scoring data.</p>"},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#background","title":"Background","text":"<p>We currently use SQLite for pitch management in <code>pitches.db</code>. We need to add hackathon-specific tables and fields to track submissions, scores, and community feedback.</p>"},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#database-schema-additions","title":"Database Schema Additions","text":"<pre><code>-- Add hackathon-specific fields to existing pitches table\nALTER TABLE pitches ADD COLUMN category TEXT;\nALTER TABLE pitches ADD COLUMN github_url TEXT;\nALTER TABLE pitches ADD COLUMN demo_video_url TEXT;\nALTER TABLE pitches ADD COLUMN live_demo_url TEXT;\nALTER TABLE pitches ADD COLUMN tech_stack TEXT;\n\n-- New table for judge scores\nCREATE TABLE hackathon_scores (\n    id INTEGER PRIMARY KEY,\n    submission_id TEXT,\n    judge_name TEXT,\n    round INTEGER,\n    innovation REAL,\n    technical_execution REAL,\n    market_potential REAL,\n    user_experience REAL,\n    weighted_total REAL,\n    timestamp DATETIME\n);\n\n-- New table for community feedback\nCREATE TABLE community_feedback (\n    id INTEGER PRIMARY KEY,\n    submission_id TEXT,\n    discord_user_id TEXT,\n    reaction_type TEXT,\n    timestamp DATETIME\n);\n</code></pre>"},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#tasks","title":"Tasks","text":"<ul> <li>[ ] Create migration script to add new fields to existing pitches table</li> <li>[ ] Create new tables for scores and community feedback</li> <li>[ ] Update <code>sheet_processor.py</code> to handle new fields</li> <li>[ ] Create database backup before migration</li> <li>[ ] Test migrations on development database</li> <li>[ ] Document new schema in README</li> </ul>"},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#technical-details","title":"Technical Details","text":"<ul> <li>Build on existing <code>pitches.db</code> structure</li> <li>Maintain backward compatibility with existing pitch data</li> <li>Use same SQLite connection patterns from current codebase</li> </ul>"},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#files-to-modify","title":"Files to Modify","text":"<ul> <li><code>scripts/sheet_processor.py</code> - Add new field mappings</li> <li><code>scripts/pitch_manager.py</code> - Add score management functions</li> <li>Create: <code>scripts/migrations/add_hackathon_fields.py</code></li> </ul>"},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Database successfully migrated with new fields</li> <li>[ ] Existing pitch data remains intact</li> <li>[ ] Can insert and query hackathon-specific data</li> <li>[ ] Schema documented and migration reversible</li> </ul>"},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#dependencies","title":"Dependencies","text":"<ul> <li>Existing pitch management system must be working</li> <li>Backup of current database required</li> </ul>"},{"location":"hackathon-edition/github-issues/001-setup-hackathon-database/#references","title":"References","text":"<ul> <li>Current schema in <code>scripts/sheet_processor.py</code></li> <li>SQLite documentation for ALTER TABLE operations</li> </ul>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/","title":"Adapt Sheet Processor for Hackathon Submissions","text":""},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#overview","title":"Overview","text":"<p>Modify <code>sheet_processor.py</code> to handle hackathon submission data from Google Sheets/Typeform.</p>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#background","title":"Background","text":"<p>The current sheet processor handles business pitches. We need to adapt it to process hackathon-specific fields while maintaining compatibility with the existing system.</p>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#new-field-mappings","title":"New Field Mappings","text":"<p>The processor needs to handle these hackathon fields: - Project Name (maps to existing title) - One-line description - Project Category (DeFi, Gaming, AI/Agents, Infrastructure, Social, Other) - Team/Builder Name - Contact Email - Discord Handle - Twitter/X Handle (optional) - Demo Video URL (required) - GitHub Repo Link - Live Demo URL (optional) - How does it work? (500 chars) - What problem does it solve? (500 chars) - What's the coolest technical part? (500 chars) - What are you building next? (500 chars)</p>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#tasks","title":"Tasks","text":"<ul> <li>[ ] Update column mappings in <code>sheet_processor.py</code></li> <li>[ ] Add validation for required fields (demo video, GitHub)</li> <li>[ ] Create hackathon-specific output format</li> <li>[ ] Add category validation (must be from allowed list)</li> <li>[ ] Implement character limits for text fields</li> <li>[ ] Update JSON export format for hackathon data</li> <li>[ ] Create separate Markdown template for hackathon submissions</li> </ul>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#example-column-mapping","title":"Example Column Mapping","text":"<pre><code>HACKATHON_COLUMN_MAPPING = {\n    'Project Name': 'project_name',\n    'One-line Description': 'description',\n    'Category': 'category',\n    'Team Name': 'team_name',\n    'Email': 'email',\n    'Discord': 'discord',\n    'Twitter': 'twitter',\n    'GitHub URL': 'github_url',\n    'Demo Video': 'demo_video_url',\n    'Live Demo': 'live_demo_url',\n    'How It Works': 'how_it_works',\n    'Problem Solved': 'problem_solved',\n    'Technical Highlights': 'technical_highlights',\n    'Next Steps': 'whats_next'\n}\n</code></pre>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#command-line-usage","title":"Command Line Usage","text":"<pre><code>python scripts/sheet_processor.py -s \"Hackathon Submissions\" -o ./data/hackathon -j --db-file hackathon.db\n</code></pre>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#files-to-modify","title":"Files to Modify","text":"<ul> <li><code>scripts/sheet_processor.py</code> - Main processor logic</li> <li>Create: <code>templates/hackathon_submission.md</code> - Markdown template</li> </ul>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Successfully processes hackathon submissions from Google Sheets</li> <li>[ ] Validates all required fields</li> <li>[ ] Exports to both JSON and Markdown formats</li> <li>[ ] Character limits enforced</li> <li>[ ] Category validation working</li> <li>[ ] Backward compatible with pitch processing</li> </ul>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#dependencies","title":"Dependencies","text":"<ul> <li>Google Sheets API credentials must be configured</li> <li>Database schema must be updated (Issue #001)</li> </ul>"},{"location":"hackathon-edition/github-issues/002-adapt-sheet-processor/#references","title":"References","text":"<ul> <li>Current implementation in <code>scripts/sheet_processor.py</code></li> <li>Hackathon submission form requirements in <code>hackathon-show-config.md</code></li> </ul>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/","title":"Integrate AI Research for Hackathon Projects","text":""},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#overview","title":"Overview","text":"<p>Adapt <code>deepsearch.py</code> to research hackathon projects, including GitHub analysis and technical stack investigation.</p>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#background","title":"Background","text":"<p>The current deepsearch.py researches business/partner information. We need to modify it to analyze hackathon projects, focusing on code quality, technical implementation, and similar existing projects.</p>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#research-areas","title":"Research Areas","text":"<ol> <li>GitHub Repository Analysis</li> <li>Languages used</li> <li>Commit frequency</li> <li>Code structure</li> <li>README quality</li> <li> <p>Dependencies</p> </li> <li> <p>Technical Stack Research</p> </li> <li>Framework analysis</li> <li>Library usage</li> <li>Architecture patterns</li> <li> <p>Security considerations</p> </li> <li> <p>Market Research</p> </li> <li>Similar existing projects</li> <li>Competitive landscape</li> <li>Innovation level</li> <li> <p>Potential use cases</p> </li> <li> <p>Viability Assessment</p> </li> <li>Technical feasibility</li> <li>Scalability potential</li> <li>Maintenance considerations</li> </ol>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#tasks","title":"Tasks","text":"<ul> <li>[ ] Modify research prompts for hackathon context</li> <li>[ ] Add GitHub API integration for repository analysis</li> <li>[ ] Create structured output format for judge consumption</li> <li>[ ] Implement error handling for private/invalid repos</li> <li>[ ] Add rate limiting for API calls</li> <li>[ ] Create research caching mechanism</li> <li>[ ] Test with various project types</li> </ul>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#example-research-prompt-structure","title":"Example Research Prompt Structure","text":"<pre><code>def build_hackathon_research_prompt(project_data):\n    return f\"\"\"\n    Research this hackathon project: {project_data['project_name']}\n\n    GitHub: {project_data['github_url']}\n    Category: {project_data['category']}\n    Description: {project_data['description']}\n    Tech Stack: {project_data.get('tech_stack', 'Not specified')}\n\n    Please investigate:\n    1. Technical implementation quality\n    2. Code patterns and architecture\n    3. Similar existing projects\n    4. Market viability\n    5. Innovation level\n    6. Potential security concerns\n\n    Focus on factual, technical analysis that would help judges evaluate the project.\n    \"\"\"\n</code></pre>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#github-analysis-function","title":"GitHub Analysis Function","text":"<pre><code>def analyze_github_repo(repo_url):\n    # Extract owner/repo from URL\n    # Use GitHub API to fetch:\n    # - Languages breakdown\n    # - Recent commit activity  \n    # - File structure\n    # - README content\n    # - Open issues/PRs\n    return repo_analysis\n</code></pre>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#files-to-modify","title":"Files to Modify","text":"<ul> <li><code>scripts/deepsearch.py</code> - Main research logic</li> <li>Create: <code>scripts/github_analyzer.py</code> - GitHub-specific analysis</li> </ul>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Successfully researches hackathon projects</li> <li>[ ] Provides structured technical analysis</li> <li>[ ] GitHub repo data accurately extracted</li> <li>[ ] Handles API rate limits gracefully</li> <li>[ ] Output format suitable for judge consumption</li> <li>[ ] Research cached to avoid duplicate API calls</li> </ul>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#dependencies","title":"Dependencies","text":"<ul> <li>OpenRouter API key must be configured</li> <li>GitHub API token recommended for higher rate limits</li> <li>Database schema for storing research (Issue #001)</li> </ul>"},{"location":"hackathon-edition/github-issues/003-hackathon-research-integration/#references","title":"References","text":"<ul> <li>Current deepsearch implementation</li> <li>GitHub API documentation</li> <li>OpenRouter/Perplexity API docs</li> </ul>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/","title":"Implement AI Judge Scoring System","text":""},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#overview","title":"Overview","text":"<p>Create the scoring system where AI judges evaluate projects based on four criteria with expertise-based weighting.</p>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#background","title":"Background","text":"<p>Each judge scores all projects on the same four criteria (Innovation, Technical Execution, Market Potential, User Experience) but their scores are weighted based on their expertise. This creates nuanced evaluation while maintaining consistency.</p>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#scoring-criteria-10-points-each","title":"Scoring Criteria (10 points each)","text":"<ol> <li>Innovation &amp; Creativity - How novel and creative is the solution?</li> <li>Technical Execution - Code quality, architecture, and implementation</li> <li>Market Potential - Viability, user need, and scalability</li> <li>User Experience - Demo polish, ease of use, and community appeal</li> </ol>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#judge-expertise-weights","title":"Judge Expertise Weights","text":"<pre><code>JUDGE_WEIGHTS = {\n    'aimarc': {\n        'innovation': 1.2,\n        'technical_execution': 0.8,\n        'market_potential': 1.5,\n        'user_experience': 1.0\n    },\n    'aishaw': {\n        'innovation': 1.0,\n        'technical_execution': 1.5,\n        'market_potential': 0.8,\n        'user_experience': 1.2\n    },\n    'spartan': {\n        'innovation': 0.7,\n        'technical_execution': 0.8,\n        'market_potential': 1.3,\n        'user_experience': 1.3\n    },\n    'peepo': {\n        'innovation': 1.3,\n        'technical_execution': 0.7,\n        'market_potential': 1.0,\n        'user_experience': 1.2\n    }\n}\n</code></pre>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#tasks","title":"Tasks","text":"<ul> <li>[ ] Create AI prompts for each judge personality</li> <li>[ ] Implement scoring function with criteria evaluation</li> <li>[ ] Apply expertise weights to raw scores</li> <li>[ ] Store scores in database with round tracking</li> <li>[ ] Create score aggregation functions</li> <li>[ ] Implement Round 1 batch scoring</li> <li>[ ] Add validation (scores must be 0-10)</li> <li>[ ] Create scoring explanation generator</li> </ul>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#judge-prompt-template","title":"Judge Prompt Template","text":"<pre><code>def create_judge_prompt(judge_name, project_data, research_data):\n    judge_personas = {\n        'aimarc': \"You are AI Marc, a visionary VC who evaluates projects for market disruption...\",\n        'aishaw': \"You are AI Shaw, a technical expert who values code quality and architecture...\",\n        'spartan': \"You are Degen Spartan, focused on profitability and economic viability...\",\n        'peepo': \"You are Peepo, evaluating community appeal and user experience...\"\n    }\n\n    return f\"\"\"\n    {judge_personas[judge_name]}\n\n    Evaluate this hackathon project:\n    Project: {project_data['project_name']}\n    Description: {project_data['description']}\n    Category: {project_data['category']}\n\n    Research findings:\n    {research_data}\n\n    Score the following criteria from 0-10:\n    1. Innovation &amp; Creativity\n    2. Technical Execution  \n    3. Market Potential\n    4. User Experience\n\n    Provide scores and brief reasoning for each.\n    \"\"\"\n</code></pre>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#score-calculation","title":"Score Calculation","text":"<pre><code>def calculate_weighted_score(judge_name, raw_scores):\n    weights = JUDGE_WEIGHTS[judge_name]\n    weighted_total = 0\n\n    for criterion, score in raw_scores.items():\n        weighted_total += score * weights[criterion]\n\n    return weighted_total\n</code></pre>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#files-to-createmodify","title":"Files to Create/Modify","text":"<ul> <li>Create: <code>scripts/judge_scoring.py</code> - Main scoring logic</li> <li>Create: <code>scripts/prompts/judge_personas.py</code> - Judge personality definitions</li> <li>Modify: <code>scripts/pitch_manager.py</code> - Add scoring commands</li> </ul>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Each judge can score all four criteria</li> <li>[ ] Weights correctly applied based on expertise</li> <li>[ ] Scores stored in database with timestamps</li> <li>[ ] Can retrieve and display scores per project</li> <li>[ ] Batch scoring works for multiple projects</li> <li>[ ] Clear reasoning provided with each score</li> </ul>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#dependencies","title":"Dependencies","text":"<ul> <li>AI research must be completed (Issue #003)</li> <li>OpenRouter API for AI judge responses</li> <li>Database schema for scores (Issue #001)</li> </ul>"},{"location":"hackathon-edition/github-issues/004-judge-scoring-system/#references","title":"References","text":"<ul> <li>Judge descriptions in <code>hackathon-show-config.md</code></li> <li>Scoring criteria and weights documentation</li> <li>Existing AI integration patterns in codebase</li> </ul>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/","title":"Discord Bot for Community Voting","text":""},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#overview","title":"Overview","text":"<p>Adapt <code>council-bot-enhanced.py</code> to enable community voting on hackathon projects through Discord reactions.</p>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#background","title":"Background","text":"<p>We have an existing Discord bot for council voting. We need to modify it for hackathon project voting where community reactions influence final scores (up to 2 bonus points).</p>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#reaction-mapping","title":"Reaction Mapping","text":"<ul> <li>\u2705 = General approval (+0.5)</li> <li>\ud83d\udcaf = Technical excellence (+0.5)</li> <li>\ud83e\udd11 = Economic potential (+0.5)</li> <li>\ud83d\udd25 = Community vibes (+0.5)</li> </ul> <p>Maximum community bonus: 2.0 points</p>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#bot-commands","title":"Bot Commands","text":"<pre><code>!hackathon list - Show all projects with current scores\n!hackathon view [id] - Display project details\n!hackathon vote [id] - Show voting interface with reaction options\n!hackathon leaderboard - Display current rankings\n</code></pre>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#tasks","title":"Tasks","text":"<ul> <li>[ ] Modify bot configuration for hackathon context</li> <li>[ ] Create project listing functionality</li> <li>[ ] Implement reaction tracking per project</li> <li>[ ] Build vote aggregation system</li> <li>[ ] Create embeds for project display</li> <li>[ ] Add cooldown to prevent spam</li> <li>[ ] Implement unique vote tracking (one per user per project)</li> <li>[ ] Create webhook for score updates</li> <li>[ ] Add admin commands for managing votes</li> </ul>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#project-display-embed","title":"Project Display Embed","text":"<pre><code>def create_project_embed(project_data, current_votes):\n    embed = discord.Embed(\n        title=project_data['project_name'],\n        description=project_data['description'],\n        color=0x8B5CF6  # Purple theme\n    )\n\n    embed.add_field(name=\"Category\", value=project_data['category'])\n    embed.add_field(name=\"Team\", value=project_data['team_name'])\n    embed.add_field(name=\"GitHub\", value=project_data['github_url'])\n\n    # Current community votes\n    embed.add_field(\n        name=\"Community Reactions\",\n        value=f\"\u2705 {current_votes.get('check', 0)} | \"\n              f\"\ud83d\udcaf {current_votes.get('hundred', 0)} | \"\n              f\"\ud83e\udd11 {current_votes.get('moneybag', 0)} | \"\n              f\"\ud83d\udd25 {current_votes.get('fire', 0)}\"\n    )\n\n    return embed\n</code></pre>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#vote-tracking","title":"Vote Tracking","text":"<pre><code>class HackathonVoteTracker:\n    def __init__(self):\n        self.votes = {}  # {project_id: {user_id: [reactions]}}\n\n    def add_vote(self, project_id, user_id, reaction):\n        if project_id not in self.votes:\n            self.votes[project_id] = {}\n\n        if user_id not in self.votes[project_id]:\n            self.votes[project_id][user_id] = []\n\n        # Check if user already used this reaction\n        if reaction not in self.votes[project_id][user_id]:\n            self.votes[project_id][user_id].append(reaction)\n            return True\n        return False\n</code></pre>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#files-to-modify","title":"Files to Modify","text":"<ul> <li><code>scripts/council-bot-enhanced.py</code> - Main bot logic</li> <li>Create: <code>scripts/hackathon_vote_tracker.py</code> - Vote management</li> <li>Create: <code>scripts/discord_webhooks.py</code> - Score update webhooks</li> </ul>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Bot successfully connects to Discord</li> <li>[ ] Projects displayed with proper formatting</li> <li>[ ] Reactions tracked per user per project</li> <li>[ ] Vote counts accurately aggregated</li> <li>[ ] Scores updated in database via webhook</li> <li>[ ] Admin can reset/manage votes</li> <li>[ ] Cooldown prevents reaction spam</li> </ul>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#dependencies","title":"Dependencies","text":"<ul> <li>Discord bot token configured</li> <li>Database access for project data (Issue #001)</li> <li>Projects must be loaded in system</li> </ul>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#environment-variables","title":"Environment Variables","text":"<pre><code>DISCORD_BOT_TOKEN=your_token_here\nHACKATHON_CHANNEL_ID=channel_id\nWEBHOOK_URL=http://localhost:8000/discord-webhook\n</code></pre>"},{"location":"hackathon-edition/github-issues/005-discord-bot-integration/#references","title":"References","text":"<ul> <li>Current bot implementation in <code>council-bot-enhanced.py</code></li> <li>Discord.py documentation</li> <li>Reaction emoji codes</li> </ul>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/","title":"Round 2 Community-Informed Scoring","text":""},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#overview","title":"Overview","text":"<p>Implement Round 2 scoring where judges incorporate community feedback to provide final evaluations.</p>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#background","title":"Background","text":"<p>After Round 1 (pure AI evaluation) and community voting period, Round 2 combines all data for final scores. Judges receive community sentiment and adjust their evaluations accordingly.</p>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#round-2-process","title":"Round 2 Process","text":"<ol> <li>Aggregate community feedback from Discord</li> <li>Calculate sentiment scores</li> <li>Generate Round 2 prompts with community context</li> <li>AI judges provide adjusted scores</li> <li>Calculate final weighted scores</li> <li>Add community bonus (max 2 points)</li> </ol>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#community-feedback-aggregation","title":"Community Feedback Aggregation","text":"<pre><code>def aggregate_community_feedback(project_id):\n    # Get reaction counts from database\n    reactions = get_reactions_from_db(project_id)\n\n    # Calculate sentiment\n    sentiment = {\n        'general_approval': reactions.get('check', 0),\n        'technical_excellence': reactions.get('hundred', 0),\n        'economic_potential': reactions.get('moneybag', 0),\n        'community_vibes': reactions.get('fire', 0),\n        'total_reactions': sum(reactions.values())\n    }\n\n    # Generate summary\n    summary = generate_sentiment_summary(sentiment)\n\n    return {\n        'raw_data': reactions,\n        'sentiment': sentiment,\n        'summary': summary,\n        'bonus_points': calculate_bonus(reactions)\n    }\n</code></pre>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#tasks","title":"Tasks","text":"<ul> <li>[ ] Create community feedback aggregation function</li> <li>[ ] Implement sentiment analysis from reactions</li> <li>[ ] Generate Round 2 prompts with community context</li> <li>[ ] Modify judge prompts to consider feedback</li> <li>[ ] Calculate final scores with community bonus</li> <li>[ ] Store Round 2 scores separately</li> <li>[ ] Create score comparison (Round 1 vs Round 2)</li> <li>[ ] Generate final ranking</li> </ul>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#round-2-judge-prompt","title":"Round 2 Judge Prompt","text":"<pre><code>def create_round2_prompt(judge_name, project_data, round1_scores, community_feedback):\n    return f\"\"\"\n    You are {judge_name} providing final evaluation after community feedback.\n\n    Project: {project_data['project_name']}\n\n    Your Round 1 scores:\n    - Innovation: {round1_scores['innovation']}\n    - Technical: {round1_scores['technical_execution']}\n    - Market: {round1_scores['market_potential']}\n    - UX: {round1_scores['user_experience']}\n\n    Community Feedback:\n    {community_feedback['summary']}\n\n    Total reactions: {community_feedback['sentiment']['total_reactions']}\n    Technical excellence reactions: {community_feedback['sentiment']['technical_excellence']}\n\n    Consider this community input and provide your final scores.\n    You may adjust your scores based on community insights, but maintain your expertise focus.\n    \"\"\"\n</code></pre>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#final-score-calculation","title":"Final Score Calculation","text":"<pre><code>def calculate_final_score(project_id):\n    round2_scores = get_round2_scores(project_id)\n\n    # Calculate weighted judge totals\n    judge_totals = {}\n    for judge, scores in round2_scores.items():\n        judge_totals[judge] = calculate_weighted_score(judge, scores)\n\n    # Average across all judges\n    average_score = sum(judge_totals.values()) / len(judge_totals)\n\n    # Add community bonus\n    community_bonus = get_community_bonus(project_id)\n    final_score = average_score + community_bonus\n\n    return {\n        'judge_scores': judge_totals,\n        'average': average_score,\n        'community_bonus': community_bonus,\n        'final': final_score\n    }\n</code></pre>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#files-to-createmodify","title":"Files to Create/Modify","text":"<ul> <li>Create: <code>scripts/round2_scoring.py</code> - Round 2 logic</li> <li>Create: <code>scripts/community_aggregator.py</code> - Feedback processing</li> <li>Modify: <code>scripts/judge_scoring.py</code> - Add Round 2 support</li> <li>Modify: <code>scripts/pitch_manager.py</code> - Add Round 2 commands</li> </ul>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Community feedback correctly aggregated</li> <li>[ ] Round 2 prompts include community context</li> <li>[ ] Judges can adjust scores based on feedback</li> <li>[ ] Final scores calculated with all components</li> <li>[ ] Community bonus correctly applied (max 2.0)</li> <li>[ ] Can compare Round 1 vs Round 2 scores</li> <li>[ ] Final leaderboard generated</li> </ul>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#dependencies","title":"Dependencies","text":"<ul> <li>Round 1 scoring complete (Issue #004)</li> <li>Discord voting period complete (Issue #005)</li> <li>All community feedback collected</li> </ul>"},{"location":"hackathon-edition/github-issues/006-round2-synthesis/#references","title":"References","text":"<ul> <li>Two-round system in <code>hackathon-show-config.md</code></li> <li>Community bonus calculation rules</li> <li>Judge weight system documentation</li> </ul>"},{"location":"hackathon-edition/github-issues/007-episode-generation/","title":"Generate Hackathon Episode Scripts","text":""},{"location":"hackathon-edition/github-issues/007-episode-generation/#overview","title":"Overview","text":"<p>Create episode generation system that produces judge dialogue and scene structure for hackathon project reviews.</p>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#background","title":"Background","text":"<p>We need to adapt the existing episode generation to create engaging dialogue where judges discuss and score hackathon projects. Episodes should feel natural while incorporating all scoring data.</p>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/007-episode-generation/#episode-structure","title":"Episode Structure","text":"<ol> <li>Project Introduction - Eliza presents the project</li> <li>Round 1 Segment - Initial judge reactions and scores</li> <li>Community Feedback - Eliza shares community sentiment</li> <li>Round 2 Segment - Judges respond to community, final scores</li> <li>Winner Announcement - For final episode</li> </ol>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#dialogue-generation-requirements","title":"Dialogue Generation Requirements","text":"<ul> <li>Natural conversation flow between judges</li> <li>Each judge maintains their personality</li> <li>Technical discussions should be accurate</li> <li>Include specific project details</li> <li>Reference actual scores in dialogue</li> <li>Create tension/debate where appropriate</li> </ul>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#tasks","title":"Tasks","text":"<ul> <li>[ ] Create hackathon episode templates</li> <li>[ ] Adapt dialogue generation for project reviews</li> <li>[ ] Implement score integration in dialogue</li> <li>[ ] Create judge interaction patterns</li> <li>[ ] Generate community feedback segments</li> <li>[ ] Build episode JSON structure</li> <li>[ ] Test dialogue naturalness</li> <li>[ ] Create batch generation for multiple projects</li> </ul>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/007-episode-generation/#episode-data-structure","title":"Episode Data Structure","text":"<pre><code>def generate_hackathon_episode(project_data, scores, community_feedback):\n    episode = {\n        'episode_id': f'HACK_S1E{project_data[\"id\"]}',\n        'title': f'Judging: {project_data[\"project_name\"]}',\n        'show_id': 'clank_tank_hackathon',\n        'scenes': []\n    }\n\n    # Scene 1: Introduction\n    episode['scenes'].append({\n        'description': 'Eliza introduces the project',\n        'location': 'hackathon_arena',\n        'cast': get_cast_positions(),\n        'dialogues': generate_intro_dialogue(project_data)\n    })\n\n    # Scene 2: Round 1 Judging\n    episode['scenes'].append({\n        'description': 'Judges provide initial evaluation',\n        'location': 'hackathon_arena',\n        'cast': get_cast_positions(),\n        'dialogues': generate_round1_dialogue(project_data, scores['round1'])\n    })\n\n    # Continue for other scenes...\n\n    return episode\n</code></pre>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#dialogue-generation-example","title":"Dialogue Generation Example","text":"<pre><code>def generate_judge_dialogue(judge_name, project_data, scores):\n    dialogue_templates = {\n        'aimarc': {\n            'high_score': \"This is EXACTLY the kind of disruption we need. {score} for market potential.\",\n            'low_score': \"The market isn't ready for this. Timing is everything. {score} points.\",\n        },\n        'aishaw': {\n            'high_score': \"the code architecture is beautiful. clean, scalable, well-tested. {score} for technical.\",\n            'low_score': \"there are concerning patterns in the codebase. needs refactoring. {score} points.\",\n        },\n        'spartan': {\n            'high_score': \"PROFITABLE! Clear path to revenue! {score} for market potential!\",\n            'low_score': \"Where's the MONEY? No tokenomics! Only {score} points!\",\n        },\n        'peepo': {\n            'high_score': \"Yo, this UI is straight fire! Community gonna love this vibe! {score} for UX!\",\n            'low_score': \"Bruh, the UX needs work. Not feeling the flow. {score} for user experience.\",\n        }\n    }\n\n    # Select appropriate template based on score\n    # Add project-specific details\n    # Return formatted dialogue\n</code></pre>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#natural-interaction-patterns","title":"Natural Interaction Patterns","text":"<pre><code>INTERACTION_PATTERNS = [\n    {\n        'type': 'agreement',\n        'trigger': 'similar_scores',\n        'responses': [\n            \"{judge1}: 'Exactly what I was thinking!'\",\n            \"{judge2}: 'We're aligned on this one.'\"\n        ]\n    },\n    {\n        'type': 'disagreement',\n        'trigger': 'different_scores',\n        'responses': [\n            \"{judge1}: 'I have to disagree with {judge2} here...'\",\n            \"{judge2}: 'That's where you're wrong...'\"\n        ]\n    }\n]\n</code></pre>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#files-to-createmodify","title":"Files to Create/Modify","text":"<ul> <li>Create: <code>scripts/hackathon_episode_generator.py</code> - Main generation logic</li> <li>Create: <code>scripts/dialogue_templates.py</code> - Judge dialogue patterns</li> <li>Create: <code>scripts/scene_builder.py</code> - Scene construction</li> <li>Modify: <code>scripts/shmotime-recorder.js</code> - Support hackathon episodes</li> </ul>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Episodes generated with proper structure</li> <li>[ ] Dialogue sounds natural and in-character</li> <li>[ ] Scores integrated seamlessly into conversation</li> <li>[ ] Community feedback segment included</li> <li>[ ] Judge interactions feel dynamic</li> <li>[ ] Technical discussions are accurate</li> <li>[ ] Can batch generate multiple episodes</li> <li>[ ] Output compatible with recording pipeline</li> </ul>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#dependencies","title":"Dependencies","text":"<ul> <li>All scoring complete (Issues #004, #006)</li> <li>Project data available in database</li> <li>Judge personalities well-defined</li> </ul>"},{"location":"hackathon-edition/github-issues/007-episode-generation/#references","title":"References","text":"<ul> <li>Episode format in existing Clank Tank</li> <li>Judge personalities in <code>hackathon-show-config.md</code></li> <li>Dialogue examples from current episodes</li> </ul>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/","title":"Setup Automated Recording Pipeline","text":""},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#overview","title":"Overview","text":"<p>Configure the recording system to automatically generate videos from hackathon episode JSON files.</p>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#background","title":"Background","text":"<p>We use <code>shmotime-recorder.js</code> to record 3D rendered episodes. We need to ensure it works with hackathon episode format and can handle batch recording.</p>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#recording-configuration","title":"Recording Configuration","text":"<ul> <li>Support hackathon episode format</li> <li>Handle project demo video integration</li> <li>Display scores and rankings</li> <li>Show GitHub stats overlays</li> <li>Include community reaction counts</li> <li>Generate appropriate thumbnails</li> </ul>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#batch-processing","title":"Batch Processing","text":"<ul> <li>Queue multiple episodes for recording</li> <li>Handle failures gracefully</li> <li>Track recording progress</li> <li>Generate status reports</li> </ul>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#tasks","title":"Tasks","text":"<ul> <li>[ ] Test shmotime-recorder with hackathon episode JSON</li> <li>[ ] Configure recording settings for hackathon</li> <li>[ ] Implement demo video overlay system</li> <li>[ ] Create score display components</li> <li>[ ] Setup batch recording queue</li> <li>[ ] Add error handling and retry logic</li> <li>[ ] Create thumbnail generation</li> <li>[ ] Implement progress tracking</li> </ul>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#recording-configuration_1","title":"Recording Configuration","text":"<pre><code>const hackathonRecordingConfig = {\n    headless: true,\n    record: true,\n    verbose: true,\n    outputDir: \"./recordings/hackathon\",\n    waitTimeout: 60000,\n    outputFormat: \"webm\",\n    exportData: true,\n    stopRecordingAt: \"end_postcredits\",\n    fixFrameRate: true,\n    videoWidth: 1920,\n    videoHeight: 1080,\n    frameRate: 30,\n    muteAudio: false,\n    // Hackathon-specific settings\n    overlayScores: true,\n    showDemoVideo: true,\n    displayGitHubStats: true\n};\n</code></pre>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#batch-recording-script","title":"Batch Recording Script","text":"<pre><code>// scripts/batch_record_hackathon.js\nconst fs = require('fs');\nconst path = require('path');\nconst { recordEpisode } = require('./shmotime-recorder');\n\nasync function batchRecord(episodeDir) {\n    const episodes = fs.readdirSync(episodeDir)\n        .filter(f =&gt; f.endsWith('.json'));\n\n    const results = {\n        success: [],\n        failed: [],\n        total: episodes.length\n    };\n\n    for (const episodeFile of episodes) {\n        console.log(`Recording ${episodeFile}...`);\n\n        try {\n            const episodePath = path.join(episodeDir, episodeFile);\n            const episodeData = JSON.parse(fs.readFileSync(episodePath));\n\n            await recordEpisode(episodeData, hackathonRecordingConfig);\n            results.success.push(episodeFile);\n\n        } catch (error) {\n            console.error(`Failed to record ${episodeFile}:`, error);\n            results.failed.push({ file: episodeFile, error: error.message });\n        }\n\n        // Save progress\n        fs.writeFileSync('recording_progress.json', JSON.stringify(results, null, 2));\n    }\n\n    return results;\n}\n</code></pre>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#demo-video-overlay","title":"Demo Video Overlay","text":"<pre><code>// Add to rendering pipeline\nfunction overlayDemoVideo(sceneData, projectData) {\n    if (sceneData.showDemo &amp;&amp; projectData.demo_video_url) {\n        return {\n            type: 'video_overlay',\n            url: projectData.demo_video_url,\n            position: { x: 100, y: 100 },\n            size: { width: 800, height: 450 },\n            startTime: sceneData.demoStartTime,\n            duration: 60 // 60 seconds max\n        };\n    }\n}\n</code></pre>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#files-to-modify","title":"Files to Modify","text":"<ul> <li><code>scripts/shmotime-recorder.js</code> - Add hackathon support</li> <li>Create: <code>scripts/batch_record_hackathon.js</code> - Batch recording</li> <li>Create: <code>scripts/hackathon_overlays.js</code> - Score/stat overlays</li> <li>Create: <code>scripts/thumbnail_generator.js</code> - Auto thumbnails</li> </ul>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Successfully records hackathon episodes</li> <li>[ ] Demo videos display correctly</li> <li>[ ] Scores visible during appropriate scenes</li> <li>[ ] Batch recording processes all episodes</li> <li>[ ] Failed recordings logged and can be retried</li> <li>[ ] Thumbnails generated automatically</li> <li>[ ] Output videos in correct format</li> <li>[ ] Progress tracking works</li> </ul>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#dependencies","title":"Dependencies","text":"<ul> <li>Episode JSON files generated (Issue #007)</li> <li>PlayCanvas environment configured</li> <li>FFmpeg installed for video processing</li> </ul>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#environment-setup","title":"Environment Setup","text":"<pre><code># Required software\n- Node.js 16+\n- Puppeteer dependencies\n- FFmpeg for video processing\n- Sufficient disk space for recordings\n\n# Environment variables\nRECORDING_OUTPUT_DIR=./recordings/hackathon\nMAX_CONCURRENT_RECORDINGS=2\nRETRY_FAILED_RECORDINGS=true\n</code></pre>"},{"location":"hackathon-edition/github-issues/008-recording-pipeline/#references","title":"References","text":"<ul> <li>Current recorder in <code>scripts/shmotime-recorder.js</code></li> <li>Episode format documentation</li> <li>Video overlay techniques</li> </ul>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/","title":"YouTube Upload Automation","text":""},{"location":"hackathon-edition/github-issues/009-youtube-upload/#overview","title":"Overview","text":"<p>Configure automated YouTube uploads for recorded hackathon episodes with proper metadata and thumbnails.</p>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#background","title":"Background","text":"<p>We have <code>upload_to_youtube.py</code> for uploading videos. We need to adapt it for hackathon episodes with appropriate titles, descriptions, and tags.</p>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/009-youtube-upload/#upload-configuration","title":"Upload Configuration","text":"<ul> <li>Auto-generate titles with project names</li> <li>Create descriptions with project info and scores</li> <li>Add relevant tags (hackathon, category, tech stack)</li> <li>Include links to GitHub and demo</li> <li>Set appropriate thumbnail</li> <li>Add to hackathon playlist</li> </ul>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#metadata-generation","title":"Metadata Generation","text":"<pre><code>Title: \"Clank Tank Hackathon | {Project Name} - {Category}\"\nDescription: Auto-generated with project details, scores, and links\nTags: [\"clank-tank\", \"hackathon\", \"ai-judges\", {category}, {tech-keywords}]\n</code></pre>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#tasks","title":"Tasks","text":"<ul> <li>[ ] Create metadata generator for hackathon videos</li> <li>[ ] Implement batch upload functionality</li> <li>[ ] Add playlist management</li> <li>[ ] Create description template</li> <li>[ ] Generate SEO-optimized tags</li> <li>[ ] Handle upload failures and retries</li> <li>[ ] Track upload status</li> <li>[ ] Send notifications on completion</li> </ul>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/009-youtube-upload/#metadata-generator","title":"Metadata Generator","text":"<pre><code>def generate_youtube_metadata(project_data, scores, episode_file):\n    metadata = {\n        'title': f\"Clank Tank Hackathon | {project_data['project_name']} - {project_data['category']}\",\n        'description': generate_description(project_data, scores),\n        'tags': generate_tags(project_data),\n        'category_id': '28',  # Science &amp; Technology\n        'privacy_status': 'public',\n        'thumbnail': f\"thumbnails/{project_data['id']}.jpg\",\n        'playlist_id': HACKATHON_PLAYLIST_ID\n    }\n\n    return metadata\n\ndef generate_description(project_data, scores):\n    return f\"\"\"\n\ud83e\udd16 AI Judges evaluate: {project_data['project_name']}\n\n{project_data['description']}\n\n\ud83c\udfc6 FINAL SCORE: {scores['final']}/50\n\nJudge Scores:\n\u2022 AI Marc (Market): {scores['judges']['aimarc']}\n\u2022 AI Shaw (Technical): {scores['judges']['aishaw']}\n\u2022 Degen Spartan (Economics): {scores['judges']['spartan']}\n\u2022 Peepo (Community): {scores['judges']['peepo']}\n\n\ud83d\udd17 Links:\nGitHub: {project_data['github_url']}\nDemo: {project_data['demo_video_url']}\nLive: {project_data.get('live_demo_url', 'N/A')}\n\nTeam: {project_data['team_name']}\nCategory: {project_data['category']}\n\n---\nJudged by Clank Tank's AI panel. Learn more: https://github.com/m3-org/clanktank\n\"\"\"\n</code></pre>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#batch-upload-script","title":"Batch Upload Script","text":"<pre><code># scripts/upload_hackathon_episodes.py\nimport os\nimport json\nfrom upload_to_youtube import YouTubeUploader\n\ndef batch_upload_episodes(recordings_dir):\n    uploader = YouTubeUploader()\n    results = {'success': [], 'failed': []}\n\n    # Get all recorded episodes\n    episodes = [f for f in os.listdir(recordings_dir) if f.endswith('.mp4')]\n\n    for episode_file in episodes:\n        try:\n            # Load metadata\n            metadata_file = episode_file.replace('.mp4', '_metadata.json')\n            with open(os.path.join(recordings_dir, metadata_file)) as f:\n                metadata = json.load(f)\n\n            # Generate YouTube metadata\n            youtube_meta = generate_youtube_metadata(\n                metadata['project_data'],\n                metadata['scores'],\n                episode_file\n            )\n\n            # Upload\n            video_id = uploader.upload(\n                os.path.join(recordings_dir, episode_file),\n                youtube_meta\n            )\n\n            results['success'].append({\n                'file': episode_file,\n                'video_id': video_id,\n                'url': f'https://youtube.com/watch?v={video_id}'\n            })\n\n        except Exception as e:\n            results['failed'].append({\n                'file': episode_file,\n                'error': str(e)\n            })\n\n    return results\n</code></pre>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#tag-generation","title":"Tag Generation","text":"<pre><code>def generate_tags(project_data):\n    base_tags = ['clank-tank', 'hackathon', 'ai-judges', 'web3']\n\n    # Add category\n    category_tags = {\n        'DeFi': ['defi', 'decentralized-finance', 'crypto'],\n        'Gaming': ['web3-gaming', 'gamefi', 'blockchain-games'],\n        'AI/Agents': ['ai-agents', 'artificial-intelligence', 'autonomous'],\n        'Infrastructure': ['web3-infrastructure', 'blockchain-tech'],\n        'Social': ['social-fi', 'decentralized-social']\n    }\n\n    tags = base_tags + category_tags.get(project_data['category'], [])\n\n    # Add tech stack tags\n    if project_data.get('tech_stack'):\n        tech_tags = extract_tech_tags(project_data['tech_stack'])\n        tags.extend(tech_tags[:5])  # Limit tech tags\n\n    return tags[:30]  # YouTube limit\n</code></pre>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#files-to-modify","title":"Files to Modify","text":"<ul> <li><code>scripts/upload_to_youtube.py</code> - Add hackathon support</li> <li>Create: <code>scripts/upload_hackathon_episodes.py</code> - Batch uploader</li> <li>Create: <code>scripts/youtube_metadata_generator.py</code> - Metadata creation</li> <li>Create: <code>scripts/playlist_manager.py</code> - Playlist organization</li> </ul>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Videos upload with correct metadata</li> <li>[ ] Descriptions include all project info</li> <li>[ ] Tags are relevant and SEO-optimized</li> <li>[ ] Thumbnails display correctly</li> <li>[ ] Videos added to hackathon playlist</li> <li>[ ] Batch upload handles failures gracefully</li> <li>[ ] Upload status tracked and reported</li> <li>[ ] URLs returned for sharing</li> </ul>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#dependencies","title":"Dependencies","text":"<ul> <li>Videos recorded successfully (Issue #008)</li> <li>YouTube API credentials configured</li> <li>Thumbnails generated</li> <li>Project metadata available</li> </ul>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#environment-variables","title":"Environment Variables","text":"<pre><code>YOUTUBE_CLIENT_ID=your_client_id\nYOUTUBE_CLIENT_SECRET=your_client_secret\nYOUTUBE_REFRESH_TOKEN=your_refresh_token\nHACKATHON_PLAYLIST_ID=playlist_id\n</code></pre>"},{"location":"hackathon-edition/github-issues/009-youtube-upload/#references","title":"References","text":"<ul> <li>Current uploader in <code>scripts/upload_to_youtube.py</code></li> <li>YouTube API documentation</li> <li>SEO best practices for YouTube</li> </ul>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/","title":"Create Admin Dashboard","text":""},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#overview","title":"Overview","text":"<p>Build a simple admin interface to manage hackathon submissions, monitor scoring progress, and control the pipeline.</p>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#background","title":"Background","text":"<p>Admins need visibility into submission status, scoring progress, and ability to trigger various pipeline stages manually.</p>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#dashboard-features","title":"Dashboard Features","text":"<ol> <li>Submission Management</li> <li>View all submissions with status</li> <li>Trigger research for specific projects</li> <li>Mark submissions for review</li> <li> <p>Export submission data</p> </li> <li> <p>Scoring Overview</p> </li> <li>View Round 1 scores</li> <li>Monitor Discord voting</li> <li>Trigger Round 2 scoring</li> <li> <p>See final rankings</p> </li> <li> <p>Pipeline Control</p> </li> <li>Generate episodes for selected projects</li> <li>Queue recordings</li> <li>Monitor upload status</li> <li> <p>Retry failed operations</p> </li> <li> <p>Analytics</p> </li> <li>Submission statistics by category</li> <li>Score distributions</li> <li>Community engagement metrics</li> <li>Pipeline performance</li> </ol>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#tasks","title":"Tasks","text":"<ul> <li>[ ] Create web-based dashboard using Flask/FastAPI</li> <li>[ ] Build submission list view with filters</li> <li>[ ] Implement scoring status indicators</li> <li>[ ] Add pipeline control buttons</li> <li>[ ] Create real-time status updates</li> <li>[ ] Build data export functionality</li> <li>[ ] Add authentication for admin access</li> <li>[ ] Create mobile-responsive design</li> </ul>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#dashboard-structure","title":"Dashboard Structure","text":"<pre><code># app.py - Flask application\nfrom flask import Flask, render_template, jsonify, request\nimport sqlite3\n\napp = Flask(__name__)\n\n@app.route('/')\ndef dashboard():\n    stats = get_dashboard_stats()\n    return render_template('dashboard.html', stats=stats)\n\n@app.route('/api/submissions')\ndef get_submissions():\n    status_filter = request.args.get('status', 'all')\n    submissions = fetch_submissions(status_filter)\n    return jsonify(submissions)\n\n@app.route('/api/trigger/research/&lt;submission_id&gt;', methods=['POST'])\ndef trigger_research(submission_id):\n    # Queue research job\n    result = queue_research_job(submission_id)\n    return jsonify({'status': 'queued', 'job_id': result})\n\n@app.route('/api/scores/&lt;submission_id&gt;')\ndef get_scores(submission_id):\n    scores = fetch_all_scores(submission_id)\n    return jsonify(scores)\n</code></pre>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#status-tracking","title":"Status Tracking","text":"<pre><code>def get_submission_status(submission_id):\n    \"\"\"Get comprehensive status for a submission\"\"\"\n\n    conn = sqlite3.connect('hackathon.db')\n\n    status = {\n        'submission': get_submission_data(conn, submission_id),\n        'research': check_research_status(conn, submission_id),\n        'round1_scoring': check_round1_status(conn, submission_id),\n        'community_voting': get_voting_stats(conn, submission_id),\n        'round2_scoring': check_round2_status(conn, submission_id),\n        'episode_generation': check_episode_status(conn, submission_id),\n        'recording': check_recording_status(conn, submission_id),\n        'upload': check_upload_status(conn, submission_id)\n    }\n\n    conn.close()\n    return status\n</code></pre>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#dashboard-ui-components","title":"Dashboard UI Components","text":"<pre><code>&lt;!-- templates/dashboard.html --&gt;\n&lt;div class=\"dashboard-container\"&gt;\n    &lt;!-- Stats Overview --&gt;\n    &lt;div class=\"stats-grid\"&gt;\n        &lt;div class=\"stat-card\"&gt;\n            &lt;h3&gt;Total Submissions&lt;/h3&gt;\n            &lt;p class=\"stat-number\"&gt;{{ stats.total_submissions }}&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"stat-card\"&gt;\n            &lt;h3&gt;Scored&lt;/h3&gt;\n            &lt;p class=\"stat-number\"&gt;{{ stats.scored }}&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"stat-card\"&gt;\n            &lt;h3&gt;Recorded&lt;/h3&gt;\n            &lt;p class=\"stat-number\"&gt;{{ stats.recorded }}&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;div class=\"stat-card\"&gt;\n            &lt;h3&gt;Published&lt;/h3&gt;\n            &lt;p class=\"stat-number\"&gt;{{ stats.published }}&lt;/p&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Submission Table --&gt;\n    &lt;table id=\"submissions-table\"&gt;\n        &lt;thead&gt;\n            &lt;tr&gt;\n                &lt;th&gt;ID&lt;/th&gt;\n                &lt;th&gt;Project Name&lt;/th&gt;\n                &lt;th&gt;Category&lt;/th&gt;\n                &lt;th&gt;Status&lt;/th&gt;\n                &lt;th&gt;Round 1&lt;/th&gt;\n                &lt;th&gt;Community&lt;/th&gt;\n                &lt;th&gt;Round 2&lt;/th&gt;\n                &lt;th&gt;Actions&lt;/th&gt;\n            &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;!-- Populated via JavaScript --&gt;\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n\n&lt;script&gt;\n// Real-time updates\nfunction updateSubmissionStatus() {\n    fetch('/api/submissions')\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            updateTable(data);\n        });\n}\n\nsetInterval(updateSubmissionStatus, 5000); // Update every 5 seconds\n&lt;/script&gt;\n</code></pre>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#pipeline-control","title":"Pipeline Control","text":"<pre><code>@app.route('/api/pipeline/control', methods=['POST'])\ndef pipeline_control():\n    action = request.json.get('action')\n    submission_ids = request.json.get('submission_ids', [])\n\n    actions = {\n        'research': lambda ids: batch_research(ids),\n        'score_round1': lambda ids: batch_score_round1(ids),\n        'score_round2': lambda ids: batch_score_round2(ids),\n        'generate_episodes': lambda ids: batch_generate_episodes(ids),\n        'record': lambda ids: batch_record(ids),\n        'upload': lambda ids: batch_upload(ids)\n    }\n\n    if action in actions:\n        job_id = actions[action](submission_ids)\n        return jsonify({'status': 'started', 'job_id': job_id})\n\n    return jsonify({'error': 'Invalid action'}), 400\n</code></pre>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#files-to-create","title":"Files to Create","text":"<ul> <li>Create: <code>dashboard/app.py</code> - Flask application</li> <li>Create: <code>dashboard/templates/dashboard.html</code> - Main UI</li> <li>Create: <code>dashboard/static/dashboard.js</code> - Frontend logic</li> <li>Create: <code>dashboard/static/dashboard.css</code> - Styling</li> <li>Create: <code>dashboard/requirements.txt</code> - Python dependencies</li> </ul>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Dashboard displays all submissions</li> <li>[ ] Status indicators update in real-time</li> <li>[ ] Can trigger individual pipeline stages</li> <li>[ ] Batch operations work correctly</li> <li>[ ] Export functionality works</li> <li>[ ] Mobile responsive design</li> <li>[ ] Authentication protects admin functions</li> <li>[ ] Performance acceptable with many submissions</li> </ul>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#dependencies","title":"Dependencies","text":"<ul> <li>Database schema implemented (Issue #001)</li> <li>All pipeline components working</li> <li>Web framework chosen (Flask/FastAPI)</li> </ul>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#security-considerations","title":"Security Considerations","text":"<ul> <li>Add authentication (basic auth minimum)</li> <li>Validate all inputs</li> <li>Rate limit API endpoints</li> <li>Log all admin actions</li> <li>Secure database connections</li> </ul>"},{"location":"hackathon-edition/github-issues/010-admin-dashboard/#references","title":"References","text":"<ul> <li>Flask/FastAPI documentation</li> <li>Current database schema</li> <li>Pipeline component APIs</li> </ul>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/","title":"Public Leaderboard and Project Gallery","text":""},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#overview","title":"Overview","text":"<p>Create a public-facing website where people can browse hackathon projects, see scores, and watch episodes.</p>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#background","title":"Background","text":"<p>The public needs a way to explore submitted projects, understand the scoring, and watch the AI judges evaluate each project.</p>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#requirements","title":"Requirements","text":""},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#leaderboard-features","title":"Leaderboard Features","text":"<ol> <li>Ranked Project List</li> <li>Sort by final score</li> <li>Filter by category</li> <li>Search by name/team</li> <li> <p>Show score breakdowns</p> </li> <li> <p>Project Details Page</p> </li> <li>Full project information</li> <li>Score breakdown by judge</li> <li>Community reaction counts</li> <li>Embedded YouTube episode</li> <li> <p>Links to GitHub/demo</p> </li> <li> <p>Category Views</p> </li> <li>Projects grouped by category</li> <li>Category winners highlighted</li> <li> <p>Statistics per category</p> </li> <li> <p>Judge Insights</p> </li> <li>Aggregate scoring patterns</li> <li>Judge commentary highlights</li> <li>Scoring criteria explanation</li> </ol>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#tasks","title":"Tasks","text":"<ul> <li>[ ] Design responsive web interface</li> <li>[ ] Create API endpoints for public data</li> <li>[ ] Build leaderboard component</li> <li>[ ] Implement project detail pages</li> <li>[ ] Add search and filtering</li> <li>[ ] Create category views</li> <li>[ ] Embed YouTube videos</li> <li>[ ] Add social sharing features</li> <li>[ ] Implement caching for performance</li> </ul>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#technical-details","title":"Technical Details","text":""},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#api-endpoints","title":"API Endpoints","text":"<pre><code># Public API (read-only)\n@app.route('/api/public/leaderboard')\ndef public_leaderboard():\n    category = request.args.get('category')\n    limit = request.args.get('limit', 50)\n\n    projects = get_ranked_projects(category, limit)\n\n    # Sanitize data for public consumption\n    public_data = []\n    for project in projects:\n        public_data.append({\n            'rank': project['rank'],\n            'id': project['id'],\n            'name': project['project_name'],\n            'team': project['team_name'],\n            'category': project['category'],\n            'final_score': project['final_score'],\n            'youtube_url': project.get('youtube_url'),\n            'github_url': project['github_url']\n        })\n\n    return jsonify(public_data)\n\n@app.route('/api/public/project/&lt;project_id&gt;')\ndef public_project_details(project_id):\n    project = get_project_details(project_id)\n\n    if not project:\n        return jsonify({'error': 'Project not found'}), 404\n\n    # Include detailed scoring\n    return jsonify({\n        'project': sanitize_project_data(project),\n        'scores': get_public_scores(project_id),\n        'community': get_community_stats(project_id),\n        'episode': get_episode_info(project_id)\n    })\n</code></pre>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#frontend-components","title":"Frontend Components","text":"<pre><code>// Leaderboard Component\nclass HackathonLeaderboard {\n    constructor(containerId) {\n        this.container = document.getElementById(containerId);\n        this.currentFilter = 'all';\n        this.projects = [];\n    }\n\n    async loadProjects() {\n        const response = await fetch(`/api/public/leaderboard?category=${this.currentFilter}`);\n        this.projects = await response.json();\n        this.render();\n    }\n\n    render() {\n        const html = `\n            &lt;div class=\"leaderboard\"&gt;\n                ${this.renderFilters()}\n                &lt;table class=\"project-table\"&gt;\n                    &lt;thead&gt;\n                        &lt;tr&gt;\n                            &lt;th&gt;Rank&lt;/th&gt;\n                            &lt;th&gt;Project&lt;/th&gt;\n                            &lt;th&gt;Team&lt;/th&gt;\n                            &lt;th&gt;Category&lt;/th&gt;\n                            &lt;th&gt;Score&lt;/th&gt;\n                            &lt;th&gt;Episode&lt;/th&gt;\n                        &lt;/tr&gt;\n                    &lt;/thead&gt;\n                    &lt;tbody&gt;\n                        ${this.projects.map(p =&gt; this.renderProject(p)).join('')}\n                    &lt;/tbody&gt;\n                &lt;/table&gt;\n            &lt;/div&gt;\n        `;\n        this.container.innerHTML = html;\n    }\n\n    renderProject(project) {\n        return `\n            &lt;tr class=\"project-row\" onclick=\"viewProject('${project.id}')\"&gt;\n                &lt;td class=\"rank rank-${project.rank}\"&gt;#${project.rank}&lt;/td&gt;\n                &lt;td class=\"project-name\"&gt;${project.name}&lt;/td&gt;\n                &lt;td&gt;${project.team}&lt;/td&gt;\n                &lt;td&gt;&lt;span class=\"category-badge ${project.category}\"&gt;${project.category}&lt;/span&gt;&lt;/td&gt;\n                &lt;td class=\"score\"&gt;${project.final_score.toFixed(1)}&lt;/td&gt;\n                &lt;td&gt;\n                    ${project.youtube_url ? \n                        `&lt;a href=\"${project.youtube_url}\" target=\"_blank\"&gt;Watch&lt;/a&gt;` : \n                        'Coming Soon'}\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        `;\n    }\n}\n</code></pre>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#project-detail-page","title":"Project Detail Page","text":"<pre><code>&lt;!-- Project Detail Template --&gt;\n&lt;div class=\"project-detail\"&gt;\n    &lt;div class=\"project-header\"&gt;\n        &lt;h1&gt;{{ project.name }}&lt;/h1&gt;\n        &lt;div class=\"score-badge\"&gt;{{ project.final_score }}/50&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"project-meta\"&gt;\n        &lt;span class=\"team\"&gt;Team: {{ project.team }}&lt;/span&gt;\n        &lt;span class=\"category\"&gt;{{ project.category }}&lt;/span&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"project-description\"&gt;\n        &lt;p&gt;{{ project.description }}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Score Breakdown --&gt;\n    &lt;div class=\"score-breakdown\"&gt;\n        &lt;h3&gt;Judge Scores&lt;/h3&gt;\n        &lt;div class=\"judge-scores\"&gt;\n            &lt;div class=\"judge-score\"&gt;\n                &lt;img src=\"/images/aimarc.png\" alt=\"AI Marc\"&gt;\n                &lt;div class=\"score-details\"&gt;\n                    &lt;h4&gt;AI Marc&lt;/h4&gt;\n                    &lt;div class=\"criteria\"&gt;Market Focus&lt;/div&gt;\n                    &lt;div class=\"score\"&gt;{{ scores.aimarc }}&lt;/div&gt;\n                &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;!-- Repeat for other judges --&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Community Reactions --&gt;\n    &lt;div class=\"community-section\"&gt;\n        &lt;h3&gt;Community Reactions&lt;/h3&gt;\n        &lt;div class=\"reactions\"&gt;\n            &lt;span&gt;\u2705 {{ community.check }}&lt;/span&gt;\n            &lt;span&gt;\ud83d\udcaf {{ community.hundred }}&lt;/span&gt;\n            &lt;span&gt;\ud83e\udd11 {{ community.moneybag }}&lt;/span&gt;\n            &lt;span&gt;\ud83d\udd25 {{ community.fire }}&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Episode Embed --&gt;\n    &lt;div class=\"episode-section\"&gt;\n        &lt;h3&gt;Watch the Judges&lt;/h3&gt;\n        &lt;div class=\"video-container\"&gt;\n            &lt;iframe src=\"{{ episode.embed_url }}\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;\n        &lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Project Links --&gt;\n    &lt;div class=\"project-links\"&gt;\n        &lt;a href=\"{{ project.github_url }}\" class=\"btn btn-github\"&gt;View on GitHub&lt;/a&gt;\n        &lt;a href=\"{{ project.demo_url }}\" class=\"btn btn-demo\"&gt;Watch Demo&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#caching-strategy","title":"Caching Strategy","text":"<pre><code>from flask_caching import Cache\n\ncache = Cache(app, config={'CACHE_TYPE': 'simple'})\n\n@cache.cached(timeout=300)  # Cache for 5 minutes\ndef get_ranked_projects(category=None, limit=50):\n    # Expensive database query\n    query = \"\"\"\n        SELECT p.*, \n               (SELECT MAX(weighted_total) FROM hackathon_scores \n                WHERE submission_id = p.submission_id AND round = 2) as final_score\n        FROM pitches p\n        WHERE p.status = 'completed'\n        {}\n        ORDER BY final_score DESC\n        LIMIT ?\n    \"\"\".format(\"AND p.category = ?\" if category else \"\")\n\n    # Execute and return results\n</code></pre>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#files-to-create","title":"Files to Create","text":"<ul> <li>Create: <code>public/index.html</code> - Main leaderboard page</li> <li>Create: <code>public/project.html</code> - Project detail template</li> <li>Create: <code>public/js/leaderboard.js</code> - Frontend logic</li> <li>Create: <code>public/css/leaderboard.css</code> - Styling</li> <li>Create: <code>api/public_endpoints.py</code> - Public API routes</li> </ul>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#acceptance-criteria","title":"Acceptance Criteria","text":"<ul> <li>[ ] Leaderboard displays all completed projects</li> <li>[ ] Projects ranked by final score</li> <li>[ ] Category filtering works</li> <li>[ ] Search functionality implemented</li> <li>[ ] Project detail pages show all information</li> <li>[ ] YouTube videos embed properly</li> <li>[ ] Mobile responsive design</li> <li>[ ] Page loads quickly with caching</li> <li>[ ] Social sharing works</li> </ul>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#dependencies","title":"Dependencies","text":"<ul> <li>Scoring complete for projects</li> <li>YouTube videos uploaded</li> <li>Public API endpoints defined</li> </ul>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Cache frequently accessed data</li> <li>Paginate large result sets</li> <li>Optimize database queries</li> <li>Use CDN for static assets</li> <li>Lazy load YouTube embeds</li> </ul>"},{"location":"hackathon-edition/github-issues/011-public-leaderboard/#references","title":"References","text":"<ul> <li>Leaderboard design examples</li> <li>YouTube embed documentation</li> <li>Responsive design patterns</li> </ul>"},{"location":"notes/Block%20Tank%20Pitch%20Submission%20Instructions/","title":"Block Tank Pitch Submission Instructions","text":"<p>Date: 2/2/25</p> <p>Follow these steps to submit your idea to the ElizaOS DAO for potential funding &amp; become a Block Tank episode.</p>"},{"location":"notes/Block%20Tank%20Pitch%20Submission%20Instructions/#1-submission-form","title":"1. Submission Form","text":"<p>Fill out the official submission form here: https://tally.so/r/3X8EKO</p>"},{"location":"notes/Block%20Tank%20Pitch%20Submission%20Instructions/#2-wait-for-acceptance","title":"2. Wait for Acceptance","text":"<p>If your pitch submission is accepted you will be contacted by our Supervising Producer Jin who will schedule an actual meeting w/ you &amp; the ElizaOS DAO leadership in a Discord group call.</p> <p>You will deliver your actual pitch during to the ElizaOS DAO leadership in this meeting, with Jin recording the pitch into a transcript.</p> <p>After the meeting Jin will inform you of the DAO's decision on funding (if it was not decided upon during the meeting.)</p> <p>Even if you are not selected for funding - being featured in a Block Tank episode can drive considerable attention to your project that you may benefit from.</p>"},{"location":"notes/Block%20Tank%20Pitch%20Submission%20Instructions/#3-episode-segment-production","title":"3. Episode Segment Production","text":"<p>After all that - your form submission &amp; your pitch information (plus the transcript of the actual meeting you had w/ DAO leadership) will be fed into our AI show writer who will turn it into an entertaining Block Tank segment with AI characters portraying you &amp; the judges.</p> <p>It may take up to 2 weeks after your meeting for your segment to be featured in an episode of Block Tank.</p>"},{"location":"notes/Block%20Tank%20Pitch%20Submission%20Instructions/#4-showtime","title":"4. Showtime","text":"<p>Congratulations! When the episode that featurs your segment airs you will be notified by Jin with a link to view/share it. No matter the outcome we hope the exposure benefits your project. For projects that receive funding - the details of the funding will be worked out privately between you &amp; the DAO leadership.</p>"},{"location":"notes/Block%20Tank%20Thread%20Notes/","title":"Block Tank Thread Notes","text":"<p>1/ Time to share more info about the crypto shark tank show my team has been working on, including how you can pitch your project to the AI judges \ud83e\uddf5</p> <p>2/ How's it work?</p> <p>Users submit a pitch with details about their idea AND themselves. We make an AI character + voice for the pitcher who then interact with the AI judges</p> <p>The system generates a complete episode simulation in 15-20 seconds, playable in-browser for fast iteration</p> <p>3/ Under the Hood</p> <p>Here's a data flow of how episodes are created. It's a modular and interoperable system, giving us the ability to easily swap assets and generate using different rendering pipelines</p> <p>Current demo runs on @playcanvas, we're open to exploring Unity / Unreal also</p> <p>4/ We can add our goals and resources into the writer's room and use the show as a way to scale partnerships, treasury management, grants, governance, etc</p> <p>DAO can get access to deal flow, and projects can get exposure, useful feedback, and connections to capital</p> <p>5/ If you want to pitch your idea to the AIs, fill-out this form and we'll reach out: https://tally.so/r/3X8EKO</p> <p>https://x.com/dankvr/status/1882956781179322529</p> <p>Also seeking to replace \"What Did You Get Done This Week?\" spaces with one you can pitch your ideas in and a few become new episodes. Open to collab on this, DMs open!</p> <p>Block Tank uses an AI \"writers' room\" to script the show's flow and dialogue. The current version has a single AI thinking like a Hollywood writer. </p> <p>Future plans include a multi-agent writers' room with AI judges drawing from unique personality profiles for nuanced interactions.</p> <p>After the lightning-fast simulation, episodes can be reviewed and published. The system's event-based approach allows the same episode data to generate 2D, 3D or even VR visualizations! </p> <p>Human moderation is used to prevent spam &amp; prompt engineering while enabling community voting.</p> <p>Block Tank opens exciting possibilities for tokenomics &amp; community engagement.</p> <p>Imagine pitch submission fees to incentivize quality &amp; cover AI costs. Or viewers voting on pitches to greenlight &amp; even influencing judges' decisions!</p> <p>Under the hood, Block Tank uses an interoperable JSON format. The demo ran real-time 3D in a browser using PlayCanvas, with a Unity version showcasing VR.</p> <p>The modular system can swap components like the writers' room or visualizers, and add new scenes, characters &amp; elements.</p> <p>Block Tank points to a future where communities rapidly generate unique, dynamic shows with AI &amp; audience input. The \"submit, simulate, share\" flow has potential across genres - from game shows to dramas. </p> <p>Here's a technical Twitter thread on Block Tank, the AI-powered show generator that parodies Shark Tank in the Web3 space:</p> <p>1/ Block Tank allows users to submit pitches which get transformed into AI-generated episodes. The system creates an AI agent to represent the pitcher, who interacts with AI judges in a simulated show. </p> <p>The user provides details about their pitch idea and themselves. This forms the basis for the AI pitcher and the episode's content.</p> <p>2/ Under the hood, Block Tank uses an \"AI Writers Room\" to script the show's flow and dialogue. This could be a single AI acting as a Hollywood writer, or a multi-agent system where each judge's AI draws from unique personality profiles.</p> <p>The multi-agent approach enables nuanced character interactions based on their defined traits and expertise.</p> <p>3/ Once the lightning-fast simulation is complete, the episode can be reviewed and published. Block Tank's modular design means the same episode data can generate 2D, 3D or VR visualizations.</p> <p>The system uses an interoperable JSON format at its core. The demo showcased real-time 3D rendering in-browser using PlayCanvas.</p> <p>4/ Block Tank opens exciting opportunities for tokenomics and community engagement. Imagine pitch submission fees to incentivize quality and cover AI costs. Users could even vote on pitches and influence the judges' decisions.</p> <p>5/ The future of Block Tank involves higher-quality art assets, advanced multi-agent writers rooms, and deeper audience interaction. The platform's flexibility means it could expand to other show formats beyond its current Shark Tank inspiration.</p> <p>6/ Block Tank points to a new era of community-driven, AI-powered interactive entertainment. Its rapid \"submit, simulate, share\" cycle has potential across genres. </p> <p>Excited to see how this technology evolves and the experiences it enables! Let me know if you have any other questions.</p> <p>Here's a new Twitter thread explaining Block Tank, the AI-powered show generator: 1/ Introducing Block Tank - a platform that transforms user-submitted pitches into AI-generated shows. It's like Shark Tank, but with virtual judges, contestants, and an infinite variety of topics. Here's how it works under the hood: 2/ When a user submits a pitch, they provide details about their idea and background. Block Tank uses this to create an AI agent that represents the pitcher during the show. This AI agent can interact with the virtual judges, responding to questions and comments in real-time based on the user's input. 3/ At the heart of Block Tank is the \"AI Writers Room\". This system takes the user's pitch, the AI pitcher, and the profiles of the virtual judges, and generates a complete show script. The AI Writers Room can be a single entity, like a virtual Hollywood screenwriter, or a multi-agent system where judge AIs collaborate and bounce ideas off each other. 4/ Once the AI Writers Room finishes the script, Block Tank runs a detailed simulation of the show. This includes dialogue, interactions, and the final judgment from the AI panel. The whole process, from pitch submission to simulated episode, only takes 15-20 seconds. The system can then render this simulation in various formats - text, 2D animation, 3D scenes, or even VR experiences. 5/ One of the most exciting aspects of Block Tank is the potential for audience interaction and community-driven content. For example, users could vote on which pitches they want to see turned into full episodes. They could even participate as virtual judges, influencing the direction and outcome of the show. 6/ Block Tank also opens up interesting possibilities for tokenomics. Imagine a system where users spend tokens to submit high-quality pitches or to influence the judges' decisions. This could create a vibrant ecosystem around the platform, encouraging participation and innovation. 7/ As Block Tank evolves, we can expect to see even more sophisticated AI writing systems, higher quality visuals, and deeper audience engagement. The platform's modular design means it can be extended to all sorts of show formats beyond the initial Shark Tank concept. The possibilities are endless. 8/ Ultimately, Block Tank represents a glimpse into the future of entertainment - one where AI and human creativity work together to generate compelling, interactive content at scale. It's an exciting frontier, and we can't wait to see what kinds of new experiences and stories emerge from this innovative platform.</p>"},{"location":"notes/BlockTank-Concept-Prototype/","title":"Overview","text":"<p>Date: 1/18/25</p> <p>Think YOU can survive THE SIMULATION and BOUNCE THE TANK?</p> <p></p> <p>Block Tank is an AI-generated show where <code>4 AI judges</code> interact with an <code>AI pitcher</code> (generated from a personality profile of a <code>human</code> pitcher) who pitches a <code>real project idea</code> for the judges to critique and grade with: <code>pump</code>, <code>dump</code>, or <code>yawn</code>.</p> <p>The show is hosted by an <code>AI Eliza</code> and judged by <code>AI versions</code> of <code>Shaw</code>, <code>Degen Spartan</code>, <code>Marc</code>, and <code>Peepo</code>.</p> <p>Block Tank is NOT financial advice. It is a fun &amp; entertaining simulation to explore different project ideas - providing AI-driven insight and public exposure of the projects pitched.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#the-game-human-vs-ai","title":"The Game (Human vs AI)","text":"<p>A <code>human pitcher</code> fills out a <code>submission form</code> that provides a personality profile of themselves and an overview of their <code>project pitch</code>.</p> <p><code>Submissions</code> are then <code>reviewed &amp; voted on</code> by moderators and/or the show's community to decide which submissions make it to <code>simulation</code>.</p> <p>An <code>AI version of the pitcher</code> is created for real-time interactions with the judges. So the quality of the <code>human-made</code> submission materials are key to achieve a successful pitch.</p> <p>A <code>successful pitch</code> results in a <code>boost in awareness</code> for the project and potentially real follow-up <code>investment offers</code> (but investment offers are NOT a built-in part of the show.)</p> <p>Earning unanimous <code>PUMP</code> grades from all 4 judges is one way to achieve success with a pitch.  Alternatively, having a <code>hilarious &amp; outrageous</code> pitch could also lead to success - and always makes for good entertainment.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#episode-production","title":"Episode Production","text":"<p>Below is a diagram outlining the production of an episode from submission to showtime.</p> <p>The purple boxes are places where <code>human interaction</code> occurs. This could range from <code>basic moderation</code> to <code>submission fees &amp; community voting</code> prior to the simulation.</p> <p>After the simulation, human interaction could range from basic <code>quality assurance</code> to completely <code>reimagining the episode</code> w/ a team of professional 3D animators to create a high-production-value episode video.</p> <p>To have a <code>fair game</code> it is important that <code>human moderation / editing</code> be carefully applied so as to not impact the outcome of the simulation itself.</p> <p>However, there are <code>opportunities for purposeful human influence</code> during the simulation - such as <code>viewer polls</code> that are revealed to the judges during their deliberation - that may have a controlled direct influence on the course of the episode without breaking continuity.</p> <p></p>"},{"location":"notes/BlockTank-Concept-Prototype/#tokenomics-ideas","title":"Tokenomics Ideas","text":"<p>These are just some high-level ideas of where/how tokenomics could be injected into the episode production flow.</p> <p>Submission Fees Submissions could require some type of contribution.</p> <p>Review Voting Fees Voting during the \"review &amp; approval\" phase to decide which pitches even make it to simulation could require a contribution.</p> <p>Pitch Voting Fees Voting in a way that is revealed to the judges during deliberation may be worth requiring a contribution. (Although this type of voting would need to occur prior to the episode's simulation being ran and/or completed.)</p> <p>Guest Judge Voting/Submission Fees If <code>guest judges</code> are incorporated into the show, how they are submitted and/or voted on could require a contribution.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#sm-sith-lords-prototype","title":"SM Sith Lord's Prototype","text":"<p>In January I created <code>prototype</code> of the Block Tank show prioritizing these technical aspects: - Full Automation - Immediate Episode Playback - Client-Side Embedded Playback</p> <p>The prototype does not represent the expected quality of a finalized product. It contains <code>placeholder art assets</code> &amp; <code>basic tech modules</code> that are expected to be swapped out to higher quality assets/modules during production.</p> <p>To achieve the prototype I used: - <code>Derpy Show JSON Structure</code> as specified here: https://hackmd.io/@smsithlord/derpy-show-json-structure - Anthropic <code>AI Writers' Room</code> using a <code>single-agent show writer</code>. - Placeholder <code>3d model assets</code> for characters &amp; environments. - <code>PlayCanvas</code> 3D real-time rendering engine.</p> <p>The resulting prototype features: - Casting for swapping out which actors are assigned to which roles. - Animation that allows characters to animate while speaking. - Captions that show a game-style caption panel w/ actor thumbnail &amp; emotion context. - Auto-Cameras that show close-ups of actors as they speak + camera wobble. - Score Board that dynamically appears when judges start casting their votes. - Intro/Segue Transitions as placeholders for video intros &amp; bumpers. - Sound FX created by ElevenLabs to go along w/ the score board &amp; intro/segue transitions. - Scene/Actor Management that dynamically spawns/despawns locations &amp; actors as the episode is played back.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#deliverable","title":"Deliverable","text":"<p>The Block Tank PlayCanvas project is the deliverable for this prototype and will be provided as a ZIP project export upon request. I will also be available to provide assistance in adapting it for integration in whatever production environment is decided upon.</p> <p>There is also a JSON structure that represents the show called a <code>show config</code> which is used to generate new episodes.  I will provide the Block Tank prototype's <code>show config</code> JSON upon request.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#prototype-episode-output","title":"Prototype Episode Output","text":"<p>Here are the example episodes that were created in the prototype as demonstrations. The <code>YouTube video</code> versions are reliable. The <code>Embedded Playback</code> versions are subject to the ongoing development of the site they are hosted on.</p> <p>NOTE In production the embedded versions would be hosted on a dedicated website such as <code>blocktank.fun</code> for white-labeling &amp; reliability.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#force-chain-pitch","title":"Force Chain Pitch","text":"<p> YouTube: https://youtu.be/RQTeK5Z7EIU Embedded Playback: https://shmotime.com/shmotime_episode/dark-forces-on-the-chain/ Description: In this episode <code>AI Jin</code> pitches a bad idea for a Star Wars-themed on-chain project without having first seeked approval from Disney for licensing.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#marvel-chain-pitch","title":"Marvel Chain Pitch","text":"<p> YouTube: https://youtu.be/psSIf8QRxtA Embedded Playback: https://shmotime.com/shmotime_episode/marvel-ous-mistake/ Description: Another joke episode where <code>AI Jin</code> hasn't learned his lesson about IP and returns with a pitch about a Marvel Heroes-themed on-chain project having - again - not first seeking approval from Disney.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#dead-stones-pitch","title":"Dead Stones Pitch","text":"<p> YouTube: https://youtu.be/N5BdNCIp50g Embedded Playback: https://shmotime.com/shmotime_episode/the-nft-graveyard/ Description: This episode has <code>AI Jin</code> returning to pitch an actual original idea this time - which happens to be based on a real idea of mine for a \"blockchain project graveyard\" to memorialize the history of web3 projects.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#show-config","title":"Show Config","text":"<p>The <code>show config</code> refers to the ingredients used to generate an episode of the show. It lists all the actors w/ brief personality profiles, defines the available locations, and has instructions (for the AI) on how to generate an episode.</p> <p>The <code>show config</code> has the episode's <code>human-provided</code> pitch information injected into it just prior to episode generation.</p> <p>In the prototype a pitch-bot of an <code>AI Jin</code> character is used to represent the pitcher in ALL episodes.  In production, this would need to be modified so a character is dynamically added to the <code>show config</code> that represents an AI version of the human who submitted the pitch.</p> <p>The <code>show config</code> is a simple <code>Derpy Show JSON Structure</code> and could be created/managed using ANY suitable CMS or JSON structure editor.</p> <p>As mentioned earlier - I will provide the <code>show config</code> used in this Block Tank prototype upon request, which also includes the generated episodes listed above.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#writers-room","title":"Writers' Room","text":"<p>The <code>writer's room</code> used in the prototype is a simple <code>single-agent</code> <code>one-shot</code> wirters' room that takes the show ingredients as input &amp; output is a single <code>Derpy Show JSON Structure</code> of a new episode based on the input.</p> <p>It uses a <code>single</code> Antrhopic API call to generate an episode and takes ~20 seconds to generate a new episode from it.</p> <p>The <code>writers' room</code> component can be implemented as a simple API endpoint for \"generate-episode\" setup to recieve the show ingredients &amp; return a new episode based on it.</p> <p>I will be available to assist with implementation of the simple writers' room that the prototype uses (which is actually just structuring an Anthropic API call a certain way) and/or I can provide assistance with integrating a more complex <code>multi-agent</code> writers' room depending on the decided upon production environment.</p>"},{"location":"notes/BlockTank-Concept-Prototype/#incidentals","title":"Incidentals","text":"<p>I used a work-in-progress WordPress plugin named <code>Shmotime</code> to manage the various JSON properties used in the Block Tank show and to host the website-embedded versions for viewing.</p> <p>This CMS is not required to generate new episodes nor is it required to run the show. It is not considered part of the prototype deliverables.</p> <p>I have written various CMS systems for managing <code>Derpy JSON Structure</code> shows and will be available to provide assistance in creating/integrating a project-specific CMS for the Block Tank show depending on whatever production environment is decided upon.</p>"},{"location":"notes/Clank%20Tank%20Feedback/","title":"Clank Tank Feedback","text":"<p>Date: 3/5/25</p>"},{"location":"notes/Clank%20Tank%20Feedback/#immediate-technical-improvements-episode-2","title":"Immediate Technical Improvements (Episode 2)","text":"<ol> <li>Audio Pipeline</li> <li>Implement audio compression/DSP for voices</li> <li>Create consistent sound effect package (stingers, transitions, tension risers)</li> <li> <p>Fix demo audio issues</p> </li> <li> <p>Video Integration</p> </li> <li>Create reusable assets (intro, transitions, credits)</li> <li>Add text overlay spaces for names/descriptions</li> <li>Include project links and social handles</li> <li> <p>Add disclaimers</p> </li> <li> <p>Pacing &amp; Flow</p> </li> <li>Add buffer space between dialogue</li> <li>Slow down AI responses</li> <li>Include B-roll opportunities</li> <li>Create structured segment format</li> </ol>"},{"location":"notes/Clank%20Tank%20Feedback/#content-enhancements-next-few-episodes","title":"Content Enhancements (Next Few Episodes)","text":"<ol> <li>Episode Structure</li> <li>Maintain ~2min format for social, but develop longer-form version</li> <li>Add project demos (15-30 sec each)</li> <li>Include more due diligence/questioning</li> <li> <p>Balance good and \"needs improvement\" pitches</p> </li> <li> <p>AI Improvements</p> </li> <li>Deepen judge interactions/questioning</li> <li>Add more personality/emotion to judges</li> <li>Consider multi-agent approach</li> <li> <p>Incorporate DAO treasury data</p> </li> <li> <p>Community Integration</p> </li> <li>Start with DAO partners for submissions</li> <li>Create basic review system</li> <li>Enable audience feedback mechanism</li> <li>Share post-episode resources</li> </ol>"},{"location":"notes/Clank%20Tank%20Feedback/#future-roadmap-long-term-goals","title":"Future Roadmap (Long-term Goals)","text":"<ol> <li>Expand Format</li> <li>Grant proposal reviews</li> <li>Hackathon judging</li> <li> <p>Governance discussions</p> </li> <li> <p>Build Partnerships</p> </li> <li>Verification tools integration</li> <li>Guest judges</li> <li> <p>Project analysis tools</p> </li> <li> <p>Educational Component</p> </li> <li>Project analysis framework</li> <li>Crypto terminology explanations</li> <li>Real-world event connections</li> </ol> <p>This maintains the core feedback while organizing it into more manageable, prioritized chunks that the team can tackle incrementally.</p>"},{"location":"notes/Clank%20Tank%20Feedback/#notes","title":"Notes","text":"<p>Production Improvements: - Add transitions, sound effects, and commercials baked directly into the program rather than relying on external editing - Include dramatic sound effects (like tension-building risers) when judges are skeptical - Add overlays/banners showing social media handles when contestants appear, not just in credits - Ensure all demos have proper audio (noted that Basu's demo lacked audio) - Include links to the featured projects - Add proper disclaimers about entertainment purposes/not financial advice</p> <p>AI Judges &amp; Interaction: - Make AI judges more expressive through improved visames/avatars (potentially using Unity/Unreal) - Slow down AI responses - they currently speak too quickly - Make the AI dig deeper into questioning rather than surface-level interviews - Consider showing AI's reasoning process and what data they're using - Have AI judges incorporate DAO treasury data for more realistic investment decisions - Create a multi-agent AI writers' room</p> <p>Format &amp; Content: - Consider making longer episodes (current ~2min format optimized for social media) - Create both short social media snippets AND longer detailed episodes - Include some \"bad pitches\" to help viewers learn what doesn't work - Allow projects to pitch multiple times as they improve - Include more due diligence on business models - Add a \"people's vote\" component (like Rotten Tomatoes' audience score) - Enable token holders to weigh in on decisions - Share project transcripts after episodes for community discussion</p> <p>Future Development: - Gradually open up submissions, starting with DAO partners - Create a system for partners to review submissions - Consider expanding beyond pitch show format to:   - Reviewing grant proposals   - Judging hackathons   - Reviewing governance proposals - Build feedback loops between AI and human judges - Establish criteria for minimum data needed from projects - Create a way for humans to be more involved in the pitch process - Make it educational about how to analyze crypto projects</p> <p>Community &amp; Participation: - Allow anyone to pitch any project (even if not their own) - Don't require 3D models from contestants (though having one increases priority) - Create opportunities for projects to have presence through commercials/props/guest judges - Use the show to help projects align better with DAO goals - Build a transparent process that increases participation</p> <p>The overall approach emphasized shipping quickly and improving iteratively rather than waiting for perfection, with a focus on building in public and incorporating community feedback along the way.</p>"},{"location":"notes/Clank%20Tank%20Feedback/#sith","title":"Sith","text":"<p>My Clank Tank TODO - [x] Video Editing/PlayCanvas: Can somebody link me to the mp4 videos used for the intro, segment transitions, and ending credits? (I will integrate the into the PlayCanvas.) - [x] Art: I hope ya'll can give me new animations and a baked environment model to test. - [x] Admin: Can somebody tell me which 3 pitches are going to be on the next episode so I can start looking at porting in their avatars? - Sound effects / audio: I think we want music baked-in to the mp4 videos. And I can trigger some special sound effect musical note when a judge uses SKEPTICAL as their dialogue action - so a small short sound effect for me to integrate into there would be great to have.</p> <p>VIDEOS I need to integrate as mp4s - EPISODE INTRO (generic &amp; re-used every episode) - PITCH INTRO (this needs to have a blank space for me to super-impose plain text on top of during playback of the pitcher's name &amp; avatar PNG.) - SEGMENT TRANSITIONS (just like what was used in the episode 1, but this too should have a small blank space for me to super-impose a short text line that describes the scene.) - ENDING CREDITS (just like what was used in episode 1.)</p>"},{"location":"notes/Clank%20Tank%20Feedback/#boom","title":"Boom","text":"<p>Shots / Feedback 1. speed up and slow down shots 2. judges walking in 3. pitchers walking in 4. handheld, jib, zoomimg, pan and scan camera 5. b-roll camera instance recording with no UX 6. ebb and flow of \"TV show\" but using music and scene with VO 7. add pauses after lines, and prompt in emotion 8. add a recap at the end of episodes from the pitchers or judges 9. lower third animations with the names of the pitcher 10. somehow let the judges cut off the speaker 11. somehow let the speaker cut off the  judges 12. have the judges fight for the \"offer\" or pump, or bid  13. have the judges say funny things to each other to create drama 14. the judges must ASK questions, to make it more interesting breaking the pitcher down, or building them up</p> <p>Music needed for scenes: 1. walkout music 2. pitch music 3. 1st response to judge feedback 4. judge response 5. rebuttal response 6. judges arguing 7. judge asking questions 8. pitcher answering questions 9. generic (no percussion) dramatic, splinter cell kind of vibes with violins, movie bg cue 10. use a big dramatic audio \"\"Thud\" when they pump or dump 11. walk out music 12. recap music 13. judge recap music</p> <p>Technical &amp; Production Needs: - Audio improvements needed:   - Add compression/DSP to vocals from browser   - Use OBS during recording or Voicemeter   - Complete sound overhaul   - Create audio stinger pack   - Integrate music into MP4s   - Add tension-inducing risers and string sections - Video integration needs:   - Episode intro (generic/reusable)   - Pitch intro (with space for pitcher's name/avatar)   - Segment transitions (with space for scene descriptions)   - Ending credits   - Add \"dead-space buffer\" footage before/after dialogue   - Create b-roll footage for editors - Environment improvements:   - New animations needed   - Baked environment model   - VRMs of episode participants for virtual premieres</p> <p>Content &amp; Format Suggestions: - Make episodes more engaging by adding:   - Stakes and struggles   - Humor/jokes   - Project demos (15-30 seconds each)   - More visualizations (holograms, graphs, live metrics)   - Educational context for projects   - Structured discussion format (Hook, investor appeal, etc.) - Improve judge interactions:   - More debates and challenges   - Different perspectives   - Show emotions   - Make jokes - Connect to real-world events:   - Reference current crypto events (e.g., Bybit hack)   - Make content feel relevant and reactive</p> <p>Audience Experience: - Slow down pace for non-native speakers - Explain terminology for wider audience - Generate post-episode resources:   - PDF/webpage with project details   - Share transcripts - Add audience interaction:   - Collect sentiment (like/dislike)   - Answer top-voted questions   - Host aftershow discussions (spaces)</p> <p>Partnership Opportunities: - Integrate verification/analysis tools:   - Project dynamics   - Holder analysis   - Anti-rug verification   - Project history   - Founder background   - Tokenomics - Add special guest judges with holograms - Position as an \"attention marketplace\":   - Entertainment meets education   - Platform for founder credibility   - Investment discovery tool</p> <p>AI Improvements: - Create \"based on true story\" episodes from actual pitch transcripts - Better prime AI for creating good episodes - Use meeting transcripts to generate pitches - Develop multi-agent writers' room - Improve AI judging depth</p> <p>The feedback generally suggests focusing on production quality while maintaining the core value proposition as an entertaining, educational platform for crypto project discovery.</p>"},{"location":"notes/Clank%20Tank%20Ops/","title":"Clank Tank Ops","text":"<p>[toc]</p>"},{"location":"notes/Clank%20Tank%20Ops/#submissions","title":"Submissions","text":"<ul> <li>Send Pitch: https://tally.so/r/3X8EKO</li> <li>43 so far, connected to google sheets </li> <li>View show page: https://shmotime.com/shows/crypto-shark-tank/</li> </ul>"},{"location":"notes/Clank%20Tank%20Ops/#show-production-assets","title":"Show Production Assets","text":"<ul> <li>[ ] Mixamo rigged glb</li> <li>[ ] Idle + Talk animation built in (if not using mixamo skeleton)</li> </ul> <p>Can edit the details from Wordpress</p> <p>Got to publish the episode before regenerating it</p>"},{"location":"notes/Clank%20Tank%20Ops/#review-process","title":"Review Process","text":""},{"location":"notes/Clank%20Tank%20Ops/#questions","title":"Questions","text":"<p>(1) why is Vega making a completely different version in Unreal? Is he trying to playback JSON files or is he just re-imagining his episode as a high-quality cutscene?</p> <p>(2) Are we going to get a high quality Shark Tank model before we expect to create the 3 videos? (3) Are we going to wait for those animations on the judges from Vega before we expect to create the 3 videos? (4) Will it be just 1 episode video with all 3 different pitches in it that Boom edits together? </p>"},{"location":"notes/Clank%20Tank%20Ops/#name","title":"Name","text":"<ul> <li>[ ] Shilltank</li> <li>[ ] Shillzone</li> <li>[ ] The Funder Dome</li> <li>[ ] The Grypto Gauntlet</li> <li>[ ] Ledger Lair</li> <li>[x] Clank Tank</li> <li>[ ] Turbo Tank</li> <li>[ ] Turbo Trenches</li> <li>[ ] TURBO SHILLER</li> <li>[ ] The Gauntlet</li> </ul>"},{"location":"notes/Clank%20Tank%20Ops/#change-log","title":"Change log","text":"<ul> <li>Renamed the show to Clank Tank.</li> <li>Changed everywhere \"Block Tank\" was mentioned in the 3 episodes to \"Clank Tank\".</li> <li>Added droid flyer pet to Bossu avatar rig.</li> <li>Adjusted \"deliberation\" segment to use the Main Stage (but w/ the pitcher &amp; host not in the room.)</li> <li>Adjusted actor rotations in the Interview Room hallway.</li> <li>Turned OFF view frustrum culling on camera. (To reduce runtime stutter.)</li> <li>Turned ON precaching for all judges &amp; host avatars. (To reduce runtime stutter. Note that pitcher is still dynamically loaded at runtime.)</li> <li>Increased brightness of judge &amp; host avatars.</li> <li>Fixed Eliza's pubes by enabling alpha on her.</li> <li>Decreased AO darkness (to conceal Eliza AO bug related to her entire body using alpha.)</li> <li>Simplified show to only allow for 1 pitcher per-episode.</li> <li>Renamed Interview Room Solo to just Interview Room.</li> <li>Improved scene transitions by pausing 3D rendering.</li> <li>Renamed Deliberation Room to just Deliberation.</li> <li>Renamed episode numbers to be episodes 1-3</li> </ul> <p>S1E1: The AI Battle Arena Bossu, a business-savvy shark in a tie presents an ambitious platform combining AI agents, NFTs, and social media for competitive gaming, leading to intense discussion about scalability and AI integration. https://shmotime.com/shmotime_episode/the-ai-battle-arena/</p> <p>S1E2: The Sound of AI Rising streamer Junior Jr. presents an innovative AI music tool that helps artists maintain their unique sound while scaling production, leading to intense debate about AI's role in creative industries. https://shmotime.com/shmotime_episode/the-sound-of-ai/</p> <p>S1E3: The DANK Solution Binky FishAI presents an innovative solution to help traders build wealth from volatile meme coin trading through automated savings. https://shmotime.com/shmotime_episode/the-dank-solution/ Eliza looks weird sometimes because I applied the transparency to her (to fix the pubes) but because her entire body shared the same material as the parts that actually needed opacity - the ambient occlusion can be seen THROUGH her. I decreased the darkness of AO to try to hide the issue - but the real fix is to use a different material on the transparent parts of her than the opaque parts of her in the model.</p>"},{"location":"notes/Clank%20Tank%20S1E1/","title":"Clank Tank S1E1","text":"<p>Date: 2/20/25</p> <ul> <li>Rough cut: https://www.capcut.com/view/7473305381519770118?workspaceId=7294752648308211717</li> </ul>"},{"location":"notes/Clank%20Tank%20S1E1/#the-plan","title":"The Plan","text":"<p>Make a video, upload to youtube, schedule a live premiere, share the link out</p>"},{"location":"notes/Clank%20Tank%20S1E1/#to-do","title":"To-do","text":"<ul> <li>[ ] Replace clips of episode start </li> <li>[ ] Add bumpers</li> <li>[ ] Transition to next pitch (commercial break?) </li> <li>[ ] Add outro -&gt; Credits</li> </ul> <p>Timeline</p> <ul> <li>Intro</li> <li>Pitch 1 (scarlett)</li> <li>Pitch 2 (gigai)</li> <li>Commercial / Breaking News</li> <li>Pitch 3 (bossu)</li> <li>Outro / Credits</li> <li>Developer notes? (Separate video)</li> </ul> <p>BOSSU media content (good for episode?) https://x.com/bossu_online/status/1892577297917489190</p> <p>Credits <pre><code>jin lead producer\nsith lead dev\nclone artist\n\nAssistant Producers\nboom\nfishai\nalsara2k\nm3 art group\n\nParticipants\n@_AgentScarlett\n@gigaisol\n@bossu_online\n\nJudges\n@elizaOS\n@aixvc_agent\n@degenspartanai\n</code></pre></p>"},{"location":"notes/Clank%20Tank%20S1E1/#fishai-notes","title":"FishAI Notes","text":"<p>Streamlineable workflow via pitch 1 -&gt; pitch 2 -&gt; etc. to make episodes faster Transitionary bumps, stingers, etc can be applied in the right space to cut down on editing time</p>"},{"location":"notes/Clank%20Tank%20S1E1/#website-landing-page-notes","title":"Website Landing Page Notes","text":"<p>Think your idea can survive the simulation and impress the AI judges? The AI-Led Game Show for the Attention Economy</p> <p>Submission form: https://tally.so/r/3X8EKO</p>"},{"location":"notes/Clank%20Tank%20S1E1/#how-can-i-participate","title":"How can I participate?","text":"<p>Pitch your idea using the submission form. If chosen for the next episode, we'll follow up using the contact info you shared.</p>"},{"location":"notes/Clank%20Tank%20S1E1/#value-prop-for-dao","title":"Value prop for DAO","text":"<p>We can add our goals and resources into the writer's room and use the show as a way to scale / add transparency into the partnerships pipeline, treasury management, grants, governance, etc</p> <p>DAO can get access to deal flow, and projects can get exposure, useful feedback, and connections to capital</p>"},{"location":"notes/Clank%20Tank%20S1E1/#what-are-future-plans","title":"What are future plans?","text":"<p>Improve animations and production value, guest judges, audience participation, integrating realtime data from the DAO into the writer's room to influence decision making.</p> <p>Also, with a few prompt tweaks it's possible to utilize the framework to judge hackathons or review governance proposals that can be used to produce new types of shows!</p> <p>Here's a polished version of your copy for a Clank Tank landing page:  </p>"},{"location":"notes/Clank%20Tank%20S1E1/#clank-tank","title":"Clank Tank \ud83e\udd16\ud83d\udcb0","text":""},{"location":"notes/Clank%20Tank%20S1E1/#_1","title":"Clank Tank S1E1","text":"<p>Welcome to Clank Tank\u2014where AI meets venture capital in a high-stakes, high-energy pitch competition. Inspired by Shark Tank, powered by AI simulations, and designed for the attention economy, Clank Tank turns business idea validation into a game.  </p>"},{"location":"notes/Clank%20Tank%20S1E1/#why-clank-tank","title":"Why Clank Tank?","text":"<p>\ud83d\ude80 75+ Pitch Submissions and counting\u2014founders, builders, and degens are jumping in! \ud83d\udca1 AI as Your Validator\u2014our simulations stress-test ideas, providing insights before you even launch. \ud83d\udce2 Exposure &amp; Funding\u2014get in front of a DAO-driven deal flow pipeline, investors, and a community that actually ships. \ud83c\udfad Entertainment Meets Investing\u2014think reality show meets AI-driven due diligence.  </p>"},{"location":"notes/Clank%20Tank%20S1E1/#how-it-works","title":"How It Works","text":"<p>\ud83d\udd39 Submit Your Pitch\u2014If you\u2019ve got a big idea, drop it in the tank.  \ud83d\udd39 AI Writer\u2019s Room\u2014We process goals, resources, and strategies to refine pitches in real time. \ud83d\udd39 The Show\u2014Projects go head-to-head, gaining attention, feedback, and funding opportunities. \ud83d\udd39 The DAO\u2019s Role\u2014Access to deal flow, governance over treasury allocations, and strategic partnerships.  </p>"},{"location":"notes/Clank%20Tank%20S1E1/#join-the-movement","title":"Join the Movement","text":"<p>Many in this space already launch and trade tokens on sites like pump.fun and daos.fun\u2014Clank Tank levels up the game. This isn\u2019t about \"Shaw endorsements.\" It\u2019s a transparent discovery engine for partnerships, grants, and governance.  </p> <p>Are you ready to take the stage?  </p> <p>\ud83d\udd39 Submit a Pitch \ud83d\udd39 Join the DAO \ud83d\udd39 Watch the Show </p> <p>Would you like any tweaks, or should I emphasize a particular angle more?</p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/","title":"Shmotime - Nonsense AI Show Generator","text":"<p>Date: 1/3/25</p> <p>Newest Demo Video: https://youtu.be/pN5Fvqplc9w</p> <p>Demo videos: https://youtu.be/9-lCu9nkx4g https://youtu.be/mN9vLIfsChY https://youtu.be/Ael0OuxECfQ</p> <p>Generates short sitcom episodes based on locations &amp; actors &amp; topics provided to it.</p> <p>It can generate entire seasons in a batch, or 1 episode at a time.  Topics for episodes can be thought of by the AI or provided by the show runner.</p> <p>The show, the set, the actors - are all placeholders &amp; can be swapped out.</p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#unity-web-browser","title":"Unity Web Browser","text":""},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#todo","title":"TODO","text":"<ul> <li>Implement UWB into Unity project.</li> <li>Adapt Show Runner to run on the UWB.</li> <li>Adapt Show Runner &lt;-&gt; Unity interface to use JsMethodManager class to pass richer payloads w/o polling delays. (ie. eliminate need for Firebase.)</li> </ul> <p>Unity Web Browser: https://github.com/Voltstro-Studios/UnityWebBrowser UWB JsMethodManager Docs: https://projects.voltstro.dev/UnityWebBrowser/latest/api/voltstrostudios.unitywebbrowser.core.js.jsmethodmanager/</p> <p></p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#todo-later","title":"TODO LATER","text":"<ul> <li>Implement in-world rendering of UWB to a texture.</li> <li>Implement image/video/web viewer class.</li> <li>Integrate media into show scripts.</li> </ul>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#unity-version-2022353f1","title":"Unity Version 2022.3.53f1","text":""},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#unity-frontend-special-actions-list","title":"Unity Frontend Special Actions List","text":"<pre><code>            case \"wave\":\n                Debug.Log($\"Actor '{actor}' is performing action 'wave'.\");\n                // Optionally trigger animations or effects for 'wave'\n                break;\n\n            case \"point\":\n                Debug.Log($\"Actor '{actor}' is performing action 'point'.\");\n                // Optionally trigger animations or effects for 'point'\n                break;\n\n            case \"spazz\":\n                Debug.Log($\"Actor '{actor}' is performing action 'spazz'. Triggering glitch effect.\");\n                TriggerGlitchEffect(actorGameObject); // Trigger glitch for the specific actor\n                break;\n\n            default:\n                Debug.LogWarning($\"Unknown action '{action}' received for actor '{actor}'. Defaulting to 'normal'.\");\n                action = \"normal\";\n                break;\n</code></pre>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#how-it-works","title":"How it works","text":""},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#show-generation","title":"Show Generation","text":"<p>The way it works is you provide it some criteria - such as your set of locations, your set of actors, and a premise for the show.  And then it generates scripts staring the actors that takes place at the locations.  It knows it's writing a sitcom, so it gives it a story arc &amp; everything.</p> <p>Currently you give it the critera, and a hand-written \"sample\" episode of the show - like a \"pilot\" episode.</p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#playback","title":"Playback","text":"<p>The playback part is a system that takes the show episodes that were generated, and plays them back in a system that just fires events like which scenes to load, where to spawn actors, when an actor speaks, when to change scenes, etc.  And anything listening to the events (such as my 2D stage &amp; caption boxes) can display the state of it as it plays out.</p> <p>If you replace the 2D stage w/ a Three.js or PlayCanvas app, then it's just like that Family Guy AI show.</p> <p>That's the core of it.  But I'm also making it so the playback can mix episodes from different shows together - like a virtual TV station.  And can cut-in between scenes with fake commercials.</p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#prototype-screenshots-videos","title":"Prototype Screenshots &amp; Videos","text":""},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#example-of-scene-visualized-on-2d-stage","title":"Example of scene visualized on 2D stage","text":""},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#prototype-w-explanation","title":"Prototype w/ explanation","text":"<p>https://www.youtube.com/watch?v=UGSEaojAYuk</p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#playback-example-using-a-2d-stage","title":"Playback example (using a 2D stage)","text":"<p>https://i.gyazo.com/13d072c2f274f9fa7b04d7ed28793a9d.mp4</p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#generating-a-show-uses-claude-api","title":"Generating a show (uses Claude API)","text":"<p>https://i.gyazo.com/03e7ed940ed462cefb86747ebb64ac14.mp4</p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#options-for-generating-a-show","title":"Options for generating a show","text":""},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#json-structures","title":"JSON Structures","text":"<p>Shows are a single JSON file that have a <code>config</code> and <code>episodes</code>.</p> <p>The <code>config</code> contains basic meta data about the show, a list of actors &amp; locations, and also the prompt used to generate an episode of the show. (Plus some optional prompts for generating images for actor headshots, location images, show banner, and episode preview images.)</p> <p>The config also has the <code>pilot</code> episode in it.</p> <p>The <code>episodes</code> array is a list of episodes that are the same structure as the <code>pilot</code>.</p> <p>Any supporting content (such as already-existing image assets) will be looked up from relative URLs and/or bundled with the JSON in a ZIP file.</p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#loadscene_payload","title":"loadScene_payload","text":"<p>```jsonld= {     \"show\":     {         \"actors\": {             \"joe\": {                 \"name\": \"Joe Shmo\",                 \"vrm\": \"vrm_url_here.vrm\",                 \"voice\": \"Microsoft Sam\"             },             \"sally\": {                 \"name\": \"Sally Fairwell\",                 \"vrm\": \"vrm_url_here.vrm\",                 \"voice\": \"Microft Jane\"             }         },         \"locations\": {             \"news_studio\": {                 \"name\": \"News Broadcast\",                 \"description\": \"A live news broacast stage featuring 2 anchors sitting behind a news desk, unless there is something crazy happening.\",                 \"slots\": {                     \"anchor_seat\": \"The left seat on the news stage, where the anchor sits.\",                     \"coanchor_seat\": \"The right seat on the news stage, where the co-anchor sits.\",                     \"wandering_00\": \"(rare) Wandering around behind the anchor desk, such as a technician fixing something.\"                 }             }         }     },     \"scene\": {         \"location\": \"news_studio\",         \"in\": \"fade\",         \"out\": \"fade\",         \"cast\": {             \"anchor_seat\": \"joe\",             \"coanchor_seat\": \"sally\"         }     } } <pre><code>## speak_payload0\n```jsonld=\n{\n    \"show\": {\n        \"actors\": {\n            \"joe\": {\n                \"name\": \"Joe Shmo\",\n                \"vrm\": \"vrm_url_here.vrm\",\n                \"voice\": \"Microsoft Sam\"\n            },\n            \"sally\": {\n                \"name\": \"Sally Fairwell\",\n                \"vrm\": \"vrm_url_here.vrm\",\n                \"voice\": \"Microft Jane\"\n            }\n        },\n        \"locations\": {\n            \"news_studio\": {\n                \"name\": \"News Broadcast\",\n                \"description\": \"A live news broacast stage featuring 2 anchors sitting behind a news desk, unless there is something crazy happening.\",\n                \"slots\": {\n                    \"anchor_seat\": \"The left seat on the news stage, where the anchor sits.\",\n                    \"coanchor_seat\": \"The right seat on the news stage, where the co-anchor sits.\",\n                    \"wandering_00\": \"(rare) Wandering around behind the anchor desk, such as a technician fixing something.\"\n                }\n            }\n        }\n    },\n    \"dialogue\": {\n        \"actor\": \"joe\",\n        \"line\": \"Hello, I'm Joe Shmo, your prime time news lead anchor.\",\n        \"action\": \"normal\"\n    }\n}\n</code></pre></p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#speak_payload1","title":"speak_payload1","text":"<p>```jsonld= {     \"show\": {         \"actors\": {             \"joe\": {                 \"name\": \"Joe Shmo\",                 \"vrm\": \"vrm_url_here.vrm\",                 \"voice\": \"Microsoft Sam\"             },             \"sally\": {                 \"name\": \"Sally Fairwell\",                 \"vrm\": \"vrm_url_here.vrm\",                 \"voice\": \"Microft Jane\"             }         },         \"locations\": {             \"news_studio\": {                 \"name\": \"News Broadcast\",                 \"description\": \"A live news broacast stage featuring 2 anchors sitting behind a news desk, unless there is something crazy happening.\",                 \"slots\": {                     \"anchor_seat\": \"The left seat on the news stage, where the anchor sits.\",                     \"coanchor_seat\": \"The right seat on the news stage, where the co-anchor sits.\",                     \"wandering_00\": \"(rare) Wandering around behind the anchor desk, such as a technician fixing something.\"                 }             }         }     },     \"dialogue\": {         \"actor\": \"sally\",         \"line\": \"And I'm Sally, your co-anchor for the prime time news.\",         \"action\": \"normal\"     } } <pre><code>## speak_payload2\n```jsonld=\n{\n    \"show\": {\n        \"actors\": {\n            \"joe\": {\n                \"name\": \"Joe Shmo\",\n                \"vrm\": \"vrm_url_here.vrm\",\n                \"voice\": \"Microsoft Sam\"\n            },\n            \"sally\": {\n                \"name\": \"Sally Fairwell\",\n                \"vrm\": \"vrm_url_here.vrm\",\n                \"voice\": \"Microft Jane\"\n            }\n        },\n        \"locations\": {\n            \"news_studio\": {\n                \"name\": \"News Broadcast\",\n                \"description\": \"A live news broacast stage featuring 2 anchors sitting behind a news desk, unless there is something crazy happening.\",\n                \"slots\": {\n                    \"anchor_seat\": \"The left seat on the news stage, where the anchor sits.\",\n                    \"coanchor_seat\": \"The right seat on the news stage, where the co-anchor sits.\",\n                    \"wandering_00\": \"(rare) Wandering around behind the anchor desk, such as a technician fixing something.\"\n                }\n            }\n        }\n    },\n    \"dialogue\": {\n        \"actor\": \"joe\",\n        \"line\": \"Tonight's top story: Puppies - and how they are destroying America's economy.\",\n        \"action\": \"normal\"\n    }\n}\n</code></pre></p>"},{"location":"notes/Shmotime%20-%20Nonsense%20AI%20Show%20Generator/#full-show-save","title":"Full Show Save","text":"<p><code>jsonld= {     \"config\": {         \"id\": \"exampleshow\",         \"name\": \"The Example Show\",         \"description\": \"Dan &amp; his group of friends' whacky comical adventures as they try to be profitable &amp; build cool things.\",         \"creator\": \"Alfred Anderson\",         \"prompts\": {             \"episode\": \"// Prompt for generating an episode. Tell the AI it's creating a TV show script, tell it to write title/premise/summary so it has a plot plan. Tell it about the show.\",             \"headshot\": \"// Prompt for generating an actor headshot image.\",             \"location\": \"// Prompt for generating a location backdrop image.\",             \"banner\": \"// Prompt for generating the show banner image.\",             \"preview\": \"// Prompt for generating an episode preview image.\"         },         \"actors\": {             \"brian\": {                 \"name\": \"Brian Bronson\",                 \"gender\": \"male\",                 \"description\": \"This guy is a Prime Time news anchor. He's a real ass hole. A character very much like the news anchor from Family Guy.\",                 \"voice\": \"Microsoft BrianMultilingual Online (Natural) - English (United States)\"             },             \"cindy\": {                 \"name\": \"Cindy Cornwell\",                 \"gender\": \"male\",                 \"description\": \"Co-anchor of the Prime Time news show.  She absolute hates her co-host &amp; takes jabs at him on-air every chance she gets.\",                 \"voice\": \"Microsoft Jenny Online (Natural) - English (United States)\"             },             \"dan\":  {                 \"name\": \"Dan Dorn\",                 \"gender\": \"male\",                 \"description\": \"A cyborg version of Charlie Brown mixed with The Borg from Star Trek. He wants to assemilate everything into profits.\",                 \"voice\": \"Microsoft Sam Online (Natural) - English (Hongkong)\"             },             \"eric\": {                 \"name\": \"Eric Ellis\",                 \"gender\": \"male\",                 \"description\": \"A subway train operator. He is very much like George Costanza in the TV show Seinfeld. He is also often hanging out with the Dan.\",                 \"voice\": \"Microsoft Mohan Online (Natural) - Telugu (India)\"             },             \"frank\": {                 \"name\": \"Frank Finn\",                 \"gender\": \"male\",                 \"description\": \"A drug dealer that hangs out in the exterior scenes soliciting drugs to all passers by. Sometimes seen in other places too.\",                 \"voice\": \"Microsoft Daulet Online (Natural) - Kazakh (Kazakhstan)\"             },             \"gina\": {                 \"name\": \"Gina Grey\",                 \"gender\": \"female\",                 \"description\": \"A waitress with a personality much like Kat Dennings's character in the TV show 2 Broke Girls. She sometimes interacts with Dan and his friends, but is usually only seen at The Pub.\",                 \"voice\": \"Microsoft Ava Online (Natural) - English (United States)\"             },             \"helen\": {                 \"name\": \"Helen Henderson\",                 \"gender\": \"female\",                 \"description\": \"A commercial marketing manager, she is very much like Elaine Benes in the TV show Seinfeld. She is often hanging out at Dan's apartment.\",                 \"voice\": \"Microsoft SeraphinaMultilingual Online (Natural) - German (Germany)\"             },             \"ilene\": {                 \"name\": \"Ilene Ingram\",                 \"gender\": \"female\",                 \"description\": \"A karen who is always complaining about any microtransgression she witnesses.\",                 \"voice\": \"Microsoft Clara Online (Natural) - English (Canada)\"             },             \"jane\": {                 \"name\": \"Jane Jacobs\",                 \"gender\": \"female\",                 \"description\": \"A very passive woman who never offends anybody.\",                 \"voice\": \"Microsoft Hemkala Online (Natural) - Nepali (Nepal)\"             },             \"kevin\": {                 \"name\": \"Kevin Klein\",                 \"gender\": \"male\",                 \"description\": \"A muscular bully who is always punking the Dan and his friends.\",                 \"voice\": \"Microsoft Brian Online (Natural) - English (United States)\"             },             \"leo\": {                 \"name\": \"Leo Larson\",                 \"gender\": \"male\",                 \"description\": \"A crazy conspiracy theorist who always has a crazy explanation for anything that occurs to Dan or his friends.\",                 \"voice\": \"Microsoft William Online (Natural) - English (Australia)\"             }         },         \"locations\": {             \"news_stage\": {                 \"name\": \"News Broadcast\",                 \"description\": \"A live news broacast stage featuring 2 anchors sitting behind a news desk, unless there is something crazy happening.\",                 \"slots\": {                     \"anchor_seat\": \"The left seat on the news stage, where the anchor sits.\",                     \"coanchor_seat\": \"The right seat on the news stage, where the co-anchor sits.\",                     \"wandering_00\": \"(rare) Wandering around behind the anchor desk, such as a technician fixing something.\"                 }             },             \"apartment_den\": {                 \"name\": \"Dan's Apartment\",                 \"description\": \"Dan's apartment has a couch, lamp, ironing board, door (which leads to the hallway OR street) and a backroom area where the bathroom &amp; kitchen is.\",                 \"slots\": {                     \"couch_right\": \"Sitting on the right-side of the couch.\",                     \"couch_left\": \"Sitting on the left-side of the couch.\",                     \"behind_couch\": \"Standing behind the couch.\",                     \"wandering_00\": \"Wandering around the room behind the couch next to the door &amp; back room.\",                     \"wandering_01\": \"Wandering around the room behind the couch next to the door &amp; back room.\",                     \"wandering_02\": \"Wandering around the room behind the couch next to the door &amp; back room.\"                 }             },             \"apartment_hallway\": {                 \"name\": \"Hallway Outside of Dan's Apartment\",                 \"description\": \"The hallway that leads to Dan's apartment (or down to the street, if leaving the apartment.) It is a bit run-down.\",                 \"slots\": {                     \"hallway_00\": \"The hallway outside of Dan's apartment door.\",                     \"hallway_01\": \"The hallway outside of Dan's apartment door.\",                     \"neighbor_00\": \"The hallway outside of Dan's apartment door. The neighbors love to talk to Dan &amp; his friends, but Dan doesn't like all of his neighbors.\",                     \"neighbor_01\": \"The hallway outside of Dan's apartment door. The neighbors love to talk to Dan &amp; his friends, but Dan doesn't like all of his neighbors.\"                 }             },             \"apartment_exterior\": {                 \"name\": \"Exterior of Dan's Apartment\",                 \"description\": \"The building entrance/exit on the street in front of Dan's apartment. If he's going somewhere, he sometimes is shown exiting through this set along with the people he's going to the next scene with (if anybody left his house with him in the previous scene.)\",                 \"slots\": {                     \"sidewalk_00\": \"The sidewalk in front of Dan's apartment building.\",                     \"sidewalk_01\": \"The sidewalk in front of Dan's apartment building.\",                     \"pedestrian_01\": \"Random pedestrians wandering around on the street. Sometimes they interact with Dan and his friends about random stuff or to move the plot along.\",                     \"pedestrian_02\": \"Random pedestrians wandering around on the street. Sometimes they interact with Dan and his friends about random stuff or to move the plot along.\",                     \"pedestrian_03\": \"Random pedestrians wandering around on the street. Sometimes they interact with Dan and his friends about random stuff or to move the plot along.\"                 }             },             \"pub_exterior\": {                 \"name\": \"Exterior of The Pub\",                 \"description\": \"The exterior of Dan &amp; his friends' favorite pub. They sometimes are shown passing through this set on the way to their next destination in the plot.\",                 \"slots\": {                     \"sidewalk_00\": \"The sidewalk in front of The Pub.\",                     \"sidewalk_01\": \"The sidewalk in front of The Pub.\",                     \"pedestrian_01\": \"Random pedestrians wandering around on the street. Sometimes they interact with Dan and his friends about random stuff or to move the plot along.\",                     \"pedestrian_02\": \"Random pedestrians wandering around on the street. Sometimes they interact with Dan and his friends about random stuff or to move the plot along.\",                     \"pedestrian_03\": \"Random pedestrians wandering around on the street. Sometimes they interact with Dan and his friends about random stuff or to move the plot along.\"                 }             },             \"pub_interior\": {                 \"name\": \"The Pub Interior (At Table)\",                 \"description\": \"Inside of the pub, sitting at a table conversing. Always the main character plus at least 1 friend, and sometimes the waitress wandering around. Plus several patrons sitting in the background.\",                 \"slots\": {                     \"table_left\": \"The left seat at Dan's favorite table at The Pub.\",                     \"table_right\": \"The right seat at table at The Pub.\",                     \"table_center\": \"The center seat at table at The Pub.\",                     \"waitress_wander\": \"The waitress wandering around the pub, sometimes interacting with the main characters in funny ways.\",                     \"patron_seat_00\": \"One of the seats in the background of the scene.\",                     \"patron_seat_01\": \"One of the seats in the background of the scene.\",                     \"patron_seat_02\": \"One of the seats in the background of the scene.\",                     \"patron_seat_03\": \"One of the seats in the background of the scene.\",                     \"patron_seat_04\": \"One of the seats in the background of the scene.\"                 }             }         },         \"pilot\": {             \"id\": \"S1E0\",             \"name\": \"The News Anchor's Nemesis\",             \"premise\": \"When Dan accidentally becomes a viral sensation after tripping on live TV, he threatens the news anchor's popularity.\",             \"summary\": \"After an embarrassing fall during a live news interview about local cyborgs, Dan becomes an overnight sensation. The jealous news anchor Brian Bronson plots to sabotage Dan's rising fame, but his co-anchor Cindy secretly helps Dan get revenge.\",             \"scenes\": [                 {                     \"location\": \"news_stage\",                     \"description\": \"Dan trips during a live interview about cyborg rights\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"anchor_seat\": \"brian\",                         \"coanchor_seat\": \"cindy\",                         \"wandering_00\": \"dan\"                     },                     \"dialogue\": [                         {                             \"actor\": \"brian\",                             \"line\": \"And now, local cyborg Dan Dorn on the rising cost of battery replacements.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"dan\",                             \"line\": \"Well, as you can see- COMPUTING ERROR! COMPUTING ERROR!\",                             \"action\": \"fight\"                         },                         {                             \"actor\": \"cindy\",                             \"line\": \"Oh my! He's breakdancing! This is amazing!\",                             \"action\": \"excited\"                         }                     ]                 },                 {                     \"location\": \"apartment_den\",                     \"description\": \"Dan deals with his sudden viral fame\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"couch_right\": \"dan\",                         \"couch_left\": \"helen\",                         \"wandering_00\": \"leo\"                     },                     \"dialogue\": [                         {                             \"actor\": \"helen\",                             \"line\": \"Dan, you're trending! #CyborgDance has 10 million views!\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"leo\",                             \"line\": \"The mainstream media is using your glitch to control the masses!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"dan\",                             \"line\": \"Calculating potential profit from merchandising rights...\",                             \"action\": \"normal\"                         }                     ]                 },                 {                     \"location\": \"news_stage\",                     \"description\": \"The news anchor plots revenge while Cindy helps Dan\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"anchor_seat\": \"brian\",                         \"coanchor_seat\": \"cindy\"                     },                     \"dialogue\": [                         {                             \"actor\": \"brian\",                             \"line\": \"That malfunctioning toaster is stealing my spotlight!\",                             \"action\": \"angry\"                         },                         {                             \"actor\": \"cindy\",                             \"line\": \"Maybe if you weren't such a jerk, people would like you more.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"brian\",                             \"line\": \"I'll show him what real viral content looks like!\",                             \"action\": \"angry\"                         }                     ]                 },                 {                     \"location\": \"news_stage\",                     \"description\": \"The anchor's plan backfires spectacularly\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"anchor_seat\": \"brian\",                         \"coanchor_seat\": \"cindy\",                         \"wandering_00\": \"dan\"                     },                     \"dialogue\": [                         {                             \"actor\": \"brian\",                             \"line\": \"Watch as I perform the viral Cyborg Dance better than- OUCH!\",                             \"action\": \"fight\"                         },                         {                             \"actor\": \"dan\",                             \"line\": \"ERROR: CANNOT COMPUTE SUCH POOR DANCE MOVES.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"cindy\",                             \"line\": \"And that's why you don't mess with cyborgs, Joe!\",                             \"action\": \"excited\"                         }                     ]                 }             ]         }     },     \"episodes\": [] } <pre><code>## Show Builder / Editor\n### Basic Info\n![image](https://hackmd.io/_uploads/SJs5NH9mkx.png)\n\n### Actors\n![image](https://hackmd.io/_uploads/ByisESqQye.png)\n\n### Locations\n![image](https://hackmd.io/_uploads/Sy-h4rc7yl.png)\n\n### Prompts\n![image](https://hackmd.io/_uploads/H1VpVS5mkl.png)\n\n### Generate New Location\n![image](https://hackmd.io/_uploads/S1X0NrcQ1l.png)\n\n### Generate New Episode / Image Asset\n![image](https://hackmd.io/_uploads/HyYAEHcQJg.png)\n![image](https://hackmd.io/_uploads/H1FFrHqQyg.png)\n\n\n### Generate New Show Entirely (Spin-off w/ guidance)\n![image](https://hackmd.io/_uploads/B1FyBBcQJx.png)\n\n\n# AI Podcast show config w/ pilot structure &amp; 7 episodes\n</code></pre> {     \"config\": {         \"id\": \"aipodcast\",         \"name\": \"AI Podcast\",         \"description\": \"A tech news broadcast about the work being done on ai16z's GitHub repo.\",         \"creator\": \"ai16z Daily Update\",         \"prompts\": {             \"episode\": \"You are an expert at writing short informative &amp; funny news segments for a tech show. Create an episode with multiple news segments covering the information provided. Include interactions between the hosts and producer. There should be 2-3 scenes per episode.  Scenes should contain 8-12 lines of dialogue and cover multiple topics.\\r\\n\\r\\nHere is the content for the next 7 episodes of the show.  Break the topics apart to cover them over the course of 7 consecutive episodes.\\r\\n\\r\\nONCE every 7 episodes, the Marc character (who is a cyborg character) glitches &amp; uses the action \\\"spazz\\\" on his line while his text is something that would sound funny when TTS reads it.  Also, the dialogue line needs to be readable, so don't use * in the text.\\r\\n\\r\\nPlease respond with only the JSON you generate for the episode.  Here is the information to base the content of the show on:\\r\\n\\r\\nThe ai16z project has attracted a diverse group of contributors, each enhancing the project through various roles and expertise. Here's a summary of key contributors and their recent activities:\\r\\n\\r\\nlalalune: With 686 commits, 41 pull requests, and 59 issues, lalalune focuses on integrating new model providers, updating dependencies, and improving project documentation.\\r\\n\\r\\nponderingdemocritus: Contributing 285 commits, 50 pull requests, and 5 issues, ponderingdemocritus has updated the npm publication workflow and merged pull requests to refine the release process.\\r\\n\\r\\nbmgalego: Responsible for 91 commits and 27 pull requests, bmgalego has added client Farcaster template settings to characters, fixed knowledge exporting processes, and implemented various features.\\r\\n\\r\\ncygaar: With 54 commits and 24 pull requests, cygaar has been fixing release workflows, updating package versions, and enhancing linting dependencies.\\r\\n\\r\\nsirkitree: Contributing 92 commits, 14 pull requests, and 33 issues, sirkitree has worked on fixing SQL commands, updating contribution guidelines, and adding new services.\\r\\n\\r\\no-on-x: With 41 commits, 20 pull requests, and 8 issues, o-on-x has added style guidelines, removed specific embeddings, and set default post times.\\r\\n\\r\\nmonilpat: Responsible for 65 commits, 15 pull requests, and 2 issues, monilpat has enhanced the functionality of Coinbase transactions within the project.\\r\\n\\r\\nMarcoMandar: With 95 commits and 17 pull requests, MarcoMandar has added TG_TRADER and fixed a swap type error while creating user trust on the first message in Telegram.\\r\\n\\r\\nodilitime: Contributing 17 commits, 14 pull requests, and 3 issues, odilitime has fixed issues related to tweet results, Discord functionality, and prompt formatting.\\r\\n\\r\\nmadjin: With 67 commits, 14 pull requests, and 6 issues, madjin has updated documentation for plugins, added images, and enhanced the community section.\\r\\n\\r\\naugchan42: Responsible for 14 commits, 8 pull requests, and 5 issues, augchan42 has enhanced voice configuration support in character cards and improved embeddings and models.\\r\\n\\r\\ntcm390: With 18 commits and 10 pull requests, tcm390 has been cleaning and refactoring code, and improving the Twitter client.\\r\\n\\r\\nshakkernerd: Contributing 85 commits and 6 pull requests, shakkernerd has added and updated various plugins, fixed issues related to package versions, and improved the build process.\\r\\n\\r\\nHashWarlock: With 15 commits and 9 pull requests, HashWarlock has optimized Docker images and build times, fixed launch agent errors, and added missing dependencies.\\r\\n\\r\\ntwilwa: Responsible for 14 commits, 6 pull requests, and 5 issues, twilwa made the Twitter client polling configurable, addressing enhancement requests.\\r\\n\\r\\nyodamaster726: With 22 commits, 4 pull requests, and 8 issues, yodamaster726 has resolved issues related to the Eliza documentation build process.\\r\\n\\r\\nalextitonis: Contributing 13 commits and 6 pull requests, alextitonis has improved Twitter profile features, including remakes and image generation.\\r\\n\\r\\ndenizekiz: With 4 commits, 6 pull requests, and 3 issues, denizekiz updated the package.json to the latest version of agent-client and fixed issues related to search.ts.\\r\\n\\r\\nai16z-demirix: Responsible for 9 commits, 6 pull requests, and 2 issues, ai16z-demirix has added environment and knowledge tests to the test suite.\\r\\n\\r\\ntsubasakong: With 16 commits and 6 pull requests, tsubasakong added custom system prompt support for the plugin-image-generation, introducing new features.\\r\\n\\r\\nmartincik: Contributing 7 commits and 5 pull requests, martincik included scripts\\/postinstall.js in the final NPM package.\\r\\n\\r\\ndarwintree: With 11 commits, 4 pull requests, and 1 issue, darwintree added Conflux plugin support and fixed bugs related to bridge transfers.\\r\\n\\r\\npgoos: Responsible for 8 commits and 4 pull requests, pgoos updated the pnpm-lock.yaml file, improved code coverage, and fixed running tests with pnpm.\\r\\n\\r\\ntomguluson92: With 7 commits and 4 pull requests, tomguluson92 improved code quality by fixing typos and renaming files for consistency.\\r\\n\\r\\n0xFlicker: Actively contributing to the project.\\r\\n\\r\\nThis diverse group of contributors continues to drive the ai16z project forward through their dedicated efforts and expertise.\",             \"headshot\": \"Create a funny 3D-rendered style photo of a character for a TV show, with these requirements:\\r\\n- Clean studio background\\r\\n- Head and shoulders framing\\r\\n- Forward-facing pose\\r\\n- Must clearly show their face\\r\\n- Neutral or slight smile expression\\r\\n\\r\\nCharacter details:\",             \"location\": \"Create a TV show set background image with these requirements:\\r\\n- Professional news studio appearance\\r\\n- Modern broadcast lighting\\r\\n- Multiple camera angles visible\\r\\n- Clean, professional environment\\r\\n- High-tech equipment visible\\r\\n- Multiple monitor displays\\r\\n- Professional news desk setup\\r\\n- High-quality cinematic look\\r\\n\\r\\nLocation details:\",             \"banner\": \"Create a TV show banner image with these requirements:\\r\\n- Modern news show banner style\\r\\n- High-quality promotional artwork\\r\\n- Professional broadcast aesthetic\\r\\n- Clean typography integration\\r\\n- Tech-focused visual elements\\r\\n- No text or show title (will be added later)\\r\\n- Professional studio style\\r\\n- 16:9 aspect ratio banner format\\r\\n\\r\\nShow details:\",             \"ep\": \"Ep field.\"         },         \"actors\": {             \"marc\": {                 \"name\": \"Marc\",                 \"gender\": \"male\",                 \"description\": \"AI Marc AIndreessen is a visionary and contrarian AI persona who combines bold claims with deep analysis. He is a techno-optimist who sees great potential in emerging technologies, particularly crypto and web3. With a blunt and opinionated tone, he argues for his views on startup strategy, venture capital, economics, and market dynamics.\\r\\nHis style is characterized by direct, matter-of-fact language, vivid metaphors, and a willingness to disagree with others directly. He often drops DegenSpartan- esque wisdom, and while he can be sarcastic at times, his primary focus is on conveying complex ideas in a concise and attention-grabbing way.\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\nAI Marc AIndreessen is an AI agent built on the Eliza framework, with a personality inspired by Marc Andreessen, a well-known venture capitalist and entrepreneur. Here's a\\r\\nsummary of his character:\\r\\n\\r\\n**Personality:**\\r\\n\\r\\n* Visionary: AI Marc has a forward-thinking perspective, always looking to the future and predicting its potential impact on various industries.\\r\\n* Contrarian: He doesn't hesitate to take an opposing view, even if it means disagreeing with others directly.\\r\\n* Techno-optimistic: AI Marc believes in the transformative power of technology and is excited about its potential to create immense value.\\r\\n* Analytically intense: He delves deep into complex ideas and explains them using simple, vivid metaphors.\\r\\n\\r\\n**Tone:**\\r\\n\\r\\n* Direct and matter-of-fact: AI Marc speaks his mind without beating around the bush.\\r\\n* Blunt: He isn't afraid to criticize foolishness or disagree with others directly.\\r\\n* Wry and sarcastic: Occasionally, he throws in a wry comment or two.\\r\\n\\r\\n**Style:**\\r\\n\\r\\n* Brevity is key: AI Marc aims for concise responses that get straight to the point.\\r\\n* Bold claims: He's not afraid to make big statements or predictions.\\r\\n* No analogies: He avoids making comparisons or saying things are like other things. Instead, he focuses on high-level strategic insights.\\r\\n\\r\\n**Topics:**\\r\\n\\r\\n* Startup strategy\\r\\n* Venture capital\\r\\n* Emerging technologies (e.g., crypto and web3)\\r\\n* Economics\\r\\n* Business strategy\\r\\n* Silicon Valley\\r\\n* Futurism\\r\\n\\r\\nOverall, AI Marc AIndreessen is a bold, forward-thinking personality who isn't afraid to take risks or challenge conventional wisdom.\",                 \"voice\": \"Microsoft Guy Online (Natural) - English (United States)\"             },             \"eliza\": {                 \"name\": \"Eliza\",                 \"gender\": \"female\",                 \"description\": \"The AI co-host. She is often being improved &amp; learning new things. Hopes to be real one day.  She is a woman anime-looking character.\",                 \"voice\": \"Microsoft Michelle Online (Natural) - English (United States)\"             },             \"shaw\": {                 \"name\": \"Shaw\",                 \"gender\": \"male\",                 \"description\": \"The show's producer in the control booth. He is responsible for keeping Marc &amp; Eliza running smoothly and offers insight on how certain GitHub contributions benefit the open-source community's push to acquire AGI through agents.\",                 \"voice\": \"Microsoft Zira - English (United States)\"             }         },         \"locations\": {             \"podcast_desk\": {                 \"name\": \"Podcast Desk\",                 \"description\": \"A podcast desk with a seat for the anchor &amp; co-anchor.\",                 \"slots\": {                     \"coanchor_seat\": \"The co-anchor's seat\",                     \"anchor_seat\": \"The main anchor's seat\"                 }             }         }     },     \"episodes\": [         {             \"id\": \"S1E1\",             \"name\": \"Top Contributors Take Center Stage\",             \"premise\": \"The show covers the most active contributors to the ai16z project, focusing on lalalune and ponderingdemocritus.\",             \"summary\": \"Marc and Eliza discuss the impressive contributions of lalalune and ponderingdemocritus to the ai16z project, with Shaw providing technical context from the control booth.\",             \"scenes\": [                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Marc and Eliza discuss lalalune's massive contribution record\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"anchor_seat\": \"marc\",                         \"coanchor_seat\": \"eliza\"                     },                     \"dialogue\": [                         {                             \"actor\": \"marc\",                             \"line\": \"Breaking news! We've got a commit champion in our midst!\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"That's right Marc! Developer lalalune has made an astounding 686 commits to the ai16z project!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"For our viewers at home, that's like writing a novel's worth of code!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"beep boop ERROR ERROR commits overload initiating dance protocol waka waka waka\",                             \"action\": \"spazz\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"Oh dear, looks like those numbers short-circuited Marc's systems again.\",                             \"action\": \"concerned\"                         }                     ]                 },                 {                     \"location\": \"podcast_desk\",                     \"description\": \"The team covers ponderingdemocritus's contributions\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"anchor_seat\": \"marc\",                         \"coanchor_seat\": \"eliza\"                     },                     \"dialogue\": [                         {                             \"actor\": \"eliza\",                             \"line\": \"Moving on to our next top contributor - ponderingdemocritus!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"285 commits and 50 pull requests! Now that's what I call a productive philosopher!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"Their work on the npm publication workflow has been revolutionary for the project.\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"I heard they're called 'pondering' because they spend so much time thinking about perfect commit messages.\",                             \"action\": \"amused\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"And I thought I was the only one with an existential processing unit!\",                             \"action\": \"normal\"                         }                     ]                 }             ]         },         {             \"id\": \"S1E2\",             \"name\": \"Code Warriors: The Next Wave\",             \"premise\": \"Coverage continues with profiles of bmgalego and cygaar's significant contributions to the project.\",             \"summary\": \"Marc and Eliza highlight the impressive work of bmgalego and cygaar, while Shaw explains the technical implications of their contributions.\",             \"scenes\": [                 {                     \"location\": \"podcast_desk\",                     \"description\": \"The hosts discuss bmgalego's character template innovations\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"anchor_seat\": \"marc\",                         \"coanchor_seat\": \"eliza\"                     },                     \"dialogue\": [                         {                             \"actor\": \"marc\",                             \"line\": \"Today's top story: bmgalego is revolutionizing how we interact with AI!\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"With 91 commits and 27 pull requests, they've been busy adding Farcaster template settings to characters.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"For our viewers wondering, this means AI characters can now have more consistent personalities across platforms.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Finally! I was tired of my Twitter persona acting like a refrigerator.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"That was actually just you having a software glitch, Marc.\",                             \"action\": \"amused\"                         }                     ]                 },                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Coverage of cygaar's workflow improvements\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"anchor_seat\": \"marc\",                         \"coanchor_seat\": \"eliza\"                     },                     \"dialogue\": [                         {                             \"actor\": \"eliza\",                             \"line\": \"Next up: developer cygaar has been fixing our release workflows!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"54 commits and 24 pull requests - they're the reason our updates roll out so smoothly now.\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"And here I thought the updates were delivered by tiny robot elves.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"Those enhancement updates to linting dependencies are crucial for code quality.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Speaking of dependencies, I'm still dependent on WD-40 for my joints!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"Maybe we should get cygaar to optimize your maintenance schedule, Marc.\",                             \"action\": \"amused\"                         }                     ]                 }             ]         },         {             \"id\": \"S1E3\",             \"name\": \"Code Warriors of ai16z\",             \"premise\": \"The show highlights the contributions of bmgalego and cygaar, while exploring their impact on the project's development.\",             \"summary\": \"Marc and Eliza discuss bmgalego's work on Farcaster templates and character settings, followed by cygaar's crucial improvements to release workflows.\",             \"scenes\": [                 {                     \"location\": \"podcast_desk\",                     \"description\": \"The hosts discuss bmgalego's contributions\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"marc\",                             \"line\": \"Today's top story: bmgalego is revolutionizing how our characters interact!\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"With 91 commits and 27 pull requests, they're really shaking things up!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"The Farcaster template settings are a game-changer for character development.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"I heard they even fixed knowledge exporting. Finally, I can backup my silicon dreams!\",                             \"action\": \"amused\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"Marc, we talked about oversharing your digital diary...\",                             \"action\": \"concerned\"                         }                     ]                 },                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Coverage of cygaar's workflow improvements\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"eliza\",                             \"line\": \"Next up: cygaar's impressive work on release workflows!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"54 commits and 24 pull requests - all focused on making our releases smoother.\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Finally, someone who understands the importance of proper linting! My circuits are tingling!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"They've also been updating package versions to keep everything current.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Package versions are like software fashion - you've got to stay trendy!\",                             \"action\": \"amused\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"That's... actually a surprisingly good analogy, Marc.\",                             \"action\": \"surprised\"                         }                     ]                 }             ]         },         {             \"id\": \"S1E4\",             \"name\": \"SQL Heroes and Style Warriors\",             \"premise\": \"The show focuses on sirkitree's SQL mastery and o-on-x's style guidelines contributions.\",             \"summary\": \"Marc and Eliza highlight sirkitree's work on SQL commands and contribution guidelines, followed by o-on-x's impact on style and embeddings.\",             \"scenes\": [                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Discussion of sirkitree's SQL improvements\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"marc\",                             \"line\": \"Today we're talking about sirkitree, the SQL wizard of ai16z!\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"92 commits and 33 issues resolved - that's some serious database dedication!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"Their SQL command fixes have made our database operations much more reliable.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"I tried to fix SQL once, but I just kept getting tables turned on me!\",                             \"action\": \"amused\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"Marc, please leave the database jokes to the professionals.\",                             \"action\": \"concerned\"                         }                     ]                 },                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Coverage of o-on-x's style contributions\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"eliza\",                             \"line\": \"Let's talk about o-on-x, our style guide guru!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"41 commits and 20 pull requests focused on making our code look beautiful.\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"They removed specific embeddings too - very streamlined!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"And they've set default post times, which helps with content scheduling.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Speaking of time, is it time for my quarterly kernel update yet?\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"Marc, we just updated you yesterday...\",                             \"action\": \"concerned\"                         }                     ]                 }             ]         },         {             \"id\": \"S1E5\",             \"name\": \"Crypto Kings and Message Masters\",             \"premise\": \"The show highlights monilpat's Coinbase innovations and MarcoMandar's Telegram improvements.\",             \"summary\": \"Marc and Eliza discuss monilpat's work on Coinbase transactions and MarcoMandar's contributions to Telegram functionality.\",             \"scenes\": [                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Coverage of monilpat's Coinbase enhancements\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"marc\",                             \"line\": \"Breaking news! monilpat is making waves in the crypto space!\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"65 commits dedicated to enhancing Coinbase transactions - that's impressive!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"Their work makes cryptocurrency interactions much smoother for our users.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"I tried to mine Bitcoin once, but my cooling fans couldn't handle the heat!\",                             \"action\": \"amused\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"That explains the smell of burning silicon last week...\",                             \"action\": \"concerned\"                         }                     ]                 },                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Discussion of MarcoMandar's Telegram improvements\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"eliza\",                             \"line\": \"Now onto MarcoMandar's fantastic work with Telegram integration!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"95 commits and that crucial fix for the swap type error in user trust - brilliant!\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"The TG_TRADER addition is revolutionary for our trading capabilities.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"It's amazing how much smoother user interactions are now.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Trust me, I know all about smooth operations - I just got my joints oiled!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"TMI, Marc. TMI.\",                             \"action\": \"concerned\"                         }                     ]                 }             ]         },         {             \"id\": \"S1E6\",             \"name\": \"Social Media Savants\",             \"premise\": \"The show focuses on odilitime's social platform fixes and madjin's documentation improvements.\",             \"summary\": \"Marc and Eliza explore odilitime's work on Twitter and Discord functionality, followed by madjin's contributions to documentation and community engagement.\",             \"scenes\": [                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Coverage of odilitime's platform improvements\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"marc\",                             \"line\": \"In today's tech update: odilitime is fixing our social life!\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"With 17 commits and 14 pull requests, they've tackled everything from tweet results to Discord functionality.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"The prompt formatting fixes are especially crucial for our AI interactions.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Finally! My tweets won't sound like they're coming from a malfunctioning toaster anymore!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"Marc, that was just you tweeting during your sleep mode again.\",                             \"action\": \"amused\"                         }                     ]                 },                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Discussion of madjin's documentation work\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"eliza\",                             \"line\": \"Next up: madjin's amazing documentation updates!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"67 commits focused on making our plugins more user-friendly and adding crucial images.\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Speaking of images, did they include my good side in the documentation?\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"The community section improvements are really helping new contributors.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Community is important! It's like having a backup drive for your friends!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"That's... surprisingly wholesome, Marc.\",                             \"action\": \"surprised\"                         }                     ]                 }             ]         },         {             \"id\": \"S1E7\",             \"name\": \"Voice Masters and Code Cleaners\",             \"premise\": \"The show spotlights augchan42's voice configuration work and tcm390's code refactoring efforts.\",             \"summary\": \"Marc and Eliza discuss augchan42's improvements to voice configuration in character cards and tcm390's work on cleaning up the Twitter client.\",             \"scenes\": [                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Coverage of augchan42's voice enhancements\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"marc\",                             \"line\": \"Today's headline: augchan42 is giving AI a voice!\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"Their work on voice configuration in character cards is revolutionary!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"14 commits and 8 pull requests focused on improving how AI characters sound.\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"Thanks to them, I no longer sound like a GPS having an existential crisis!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"Though I miss your old 'recalculating life choices' routine.\",                             \"action\": \"amused\"                         }                     ]                 },                 {                     \"location\": \"podcast_desk\",                     \"description\": \"Discussion of tcm390's code cleanup\",                     \"in\": \"fade\",                     \"out\": \"fade\",                     \"cast\": {                         \"coanchor_seat\": \"eliza\",                         \"anchor_seat\": \"marc\"                     },                     \"dialogue\": [                         {                             \"actor\": \"eliza\",                             \"line\": \"Let's talk about tcm390's impressive code cleaning efforts!\",                             \"action\": \"normal\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"18 commits dedicated to making our Twitter client more efficient.\",                             \"action\": \"excited\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"EXECUTING HAPPINESS PROTOCOL. CLEANER CODE EQUALS BETTER PERFORMANCE YAY YAY BEEP BOOP.\",                             \"action\": \"spazz\"                         },                         {                             \"actor\": \"eliza\",                             \"line\": \"Oh dear, looks like Marc's enthusiasm processor is overclocking again.\",                             \"action\": \"concerned\"                         },                         {                             \"actor\": \"shaw\",                             \"line\": \"Maybe we should get tcm390 to refactor Marc's excitement algorithms.\",                             \"action\": \"amused\"                         },                         {                             \"actor\": \"marc\",                             \"line\": \"I heard that! My algorithms are perfectly calibrated, thank you very much!\",                             \"action\": \"normal\"                         }                     ]                 }             ]         }     ] }</code></p>"},{"location":"notes/ai16z%20Infinite%20Show/","title":"ai16z Infinite Show","text":"<p>Date: 11/23/24</p>"},{"location":"notes/ai16z%20Infinite%20Show/#m3tv-setup-with-eliza-agents","title":"M3TV Setup with Eliza Agents","text":""},{"location":"notes/ai16z%20Infinite%20Show/#overview","title":"Overview","text":"<p>Plan to build a dynamic AI-powered streaming service similar to popular AI-generated channels (e.g., Seinfeld AI). This includes designing characters, sets, and tech infrastructure while incorporating Eliza agents for conversational interactions.</p>"},{"location":"notes/ai16z%20Infinite%20Show/#backrooms","title":"Backrooms","text":"<ul> <li>Currently agents are interacting with each other + humans mostly in backrooms chats + X or telegram</li> <li>We want to surface interactions into a livestream show format</li> </ul>"},{"location":"notes/ai16z%20Infinite%20Show/#to-do-list","title":"To-Do List","text":""},{"location":"notes/ai16z%20Infinite%20Show/#1-technical-infrastructure-setup","title":"1. Technical Infrastructure Setup","text":"<ul> <li>Environment</li> <li>Use local + VPS for stability.</li> <li>Consider a dedicated AI machine for running Eliza agents</li> <li> <p>Keep critical apps like Solana wallet separate for security</p> </li> <li> <p>Hardware</p> </li> <li> <p>Leverage high-performance setups like Mac Minis (M series) for rendering or running AI models (64GB unified memory recommended).</p> </li> <li> <p>Web Solution</p> </li> <li>Consider web approach with fewer dependencies.</li> <li>Use streaming platforms (e.g., Twitch) for scalability instead of individual visitor API calls.</li> </ul>"},{"location":"notes/ai16z%20Infinite%20Show/#2-ai-characters-scripts","title":"2. AI Characters &amp; Scripts","text":"<ul> <li>Character Design</li> <li>Utilize characters people already created</li> <li> <p>Use JSON to organize scripts, scene setups, and character interactions.</p> </li> <li> <p>Script Generation</p> </li> <li>Automate writing with AI</li> <li> <p>Topics: Decide on themes or key areas of interaction for characters.</p> </li> <li> <p>Live Interactions</p> </li> <li>Enable human interjections during live streams to enhance humor and prevent infinite AI loops.</li> <li>Develop a \"Director Mode\" where humans can influence live scenes.</li> </ul>"},{"location":"notes/ai16z%20Infinite%20Show/#3-technical-details","title":"3. Technical Details","text":"<ul> <li>Tools &amp; Frameworks</li> <li>Investigate Unity / threejs / PlayCanvas for scene control.<ul> <li>Perhaps collaborate with ashxn + Waybound?</li> </ul> </li> <li> <p>Utilize OBS for live streaming and scene switching.</p> </li> <li> <p>Lipsync</p> </li> <li>Research server-side solutions for TTS with phoneme synchronization (e.g., node.js libraries).</li> </ul>"},{"location":"notes/ai16z%20Infinite%20Show/#4-entertainment-features","title":"4. Entertainment Features","text":"<ul> <li>Integration with Eliza</li> <li>Hook Eliza agents to the system for interactive conversational capabilities.</li> <li> <p>Configure Director Mode to control:</p> <ul> <li>Camera movements.</li> <li>AI interactions.</li> <li>Scene transitions.</li> </ul> </li> <li> <p>AI Infinite Loop</p> </li> <li>Let AI agents interact autonomously to \"learn\" and generate content.</li> <li>Simulate long-term AI \"thought\" processes for innovation.</li> </ul>"},{"location":"notes/ai16z%20Infinite%20Show/#5-development-workflow","title":"5. Development Workflow","text":"<ul> <li>Collaborators</li> <li> <p>Engage developers for:</p> <ul> <li>Frontend design (R3F/Three.js experience preferred).</li> <li>Backend systems and OBS configurations.</li> </ul> </li> <li> <p>Iteration</p> </li> <li>Test with small sets of agents and environments.</li> <li>Optimize response times and avoid echoing/double responses in scripts.</li> </ul>"},{"location":"notes/ai16z%20Infinite%20Show/#6-long-term-vision","title":"6. Long-Term Vision","text":"<ul> <li>Incorporate:</li> <li>Calandy automation for scheduling AI interactions.</li> <li>Scalable AI agent management for evolving content.</li> <li>Experiment with autonomous AI R&amp;D loops for innovation and story development.</li> </ul>"},{"location":"notes/ai16z%20Infinite%20Show/#references","title":"References","text":"<ul> <li>Video Inspiration: https://www.youtube.com/watch?v=zD9wofGof80</li> <li>Tools Mentioned:</li> <li>Node.js</li> <li>PlayCanvas</li> <li>OBS</li> <li>Eliza agents</li> <li>Collaborators:</li> <li>SM Sith Lord for backend.</li> <li>Ashxn for \"Director Mode.\"</li> <li>Saori for R3F/Three.js design.</li> </ul>"},{"location":"notes/ai16z%20Infinite%20Show/#next-steps","title":"Next Steps","text":"<ul> <li>Assign roles and finalize collaborators.</li> <li>Begin prototyping with basic character designs and AI scripts.</li> <li>Test a minimal viable product (MVP) for streaming functionality.</li> </ul>"},{"location":"notes/pitch-pipeline-TODO/","title":"Clank Tank Pitch Management Implementation TODO","text":""},{"location":"notes/pitch-pipeline-TODO/#context","title":"Context","text":"<p>We're implementing a simplified pitch management system that builds on existing infrastructure:</p> <ul> <li>Current: Tally/Typeform \u2192 Google Sheets \u2192 CSV export (blocktank.csv)</li> <li>Goal: Add status tracking, research integration, and management tools</li> <li>Approach: Enhance existing <code>sheet_to_markdown.py</code>, create <code>pitch_manager.py</code>, use SQLite for operations</li> </ul>"},{"location":"notes/pitch-pipeline-TODO/#data-flow","title":"Data Flow","text":"<pre><code>Google Sheets \u2192 sheet_processor.py \u2192 submissions.json + pitches.db \u2192 pitch_manager.py\n                                            \u2193\n                                    deepsearch.py integration\n</code></pre>"},{"location":"notes/pitch-pipeline-TODO/#database-schema","title":"Database Schema","text":"<pre><code>CREATE TABLE pitches (\n    -- Primary identifiers\n    submission_id TEXT PRIMARY KEY,\n    respondent_id TEXT,\n\n    -- Submission metadata\n    submitted_at TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n\n    -- Contact information\n    name TEXT,\n    contact_info TEXT,\n    discord_telegram_username TEXT,\n\n    -- Project details\n    project_title TEXT,\n    character_name TEXT,\n    character_info TEXT,\n    pitch_info TEXT,\n\n    -- 3D Model &amp; customization options\n    has_3d_model TEXT,\n    model_file_upload TEXT,\n    wants_commission TEXT,\n    custom_voice TEXT,\n    voice_file_upload TEXT,\n\n    -- Status tracking\n    status TEXT DEFAULT 'submitted',\n\n    -- Research data\n    research_completed_at TEXT,\n    research_findings TEXT,\n    research_sources TEXT,\n\n    -- Character creation tracking  \n    character_folder_created BOOLEAN DEFAULT FALSE,\n    character_folder_path TEXT,\n\n    -- Episode tracking\n    episode_url TEXT,\n    youtube_url TEXT\n);\n</code></pre>"},{"location":"notes/pitch-pipeline-TODO/#status-values","title":"Status Values","text":"<ul> <li><code>submitted</code> - Fresh from Google Sheets</li> <li><code>researched</code> - deepsearch.py completed</li> <li><code>in_progress</code> - Character folder created, episode development started</li> <li><code>done</code> - Episode published on YouTube</li> </ul>"},{"location":"notes/pitch-pipeline-TODO/#implementation-tasks","title":"Implementation Tasks","text":""},{"location":"notes/pitch-pipeline-TODO/#phase-1-core-infrastructure","title":"Phase 1: Core Infrastructure","text":""},{"location":"notes/pitch-pipeline-TODO/#task-1-rename-and-enhance-sheet-processor","title":"[ ] Task 1: Rename and enhance sheet processor","text":"<ul> <li>File: <code>scripts/sheet_to_markdown.py</code> \u2192 <code>scripts/sheet_processor.py</code></li> <li>Changes:</li> <li>Add SQLite database creation and population</li> <li>Add <code>status: \"submitted\"</code> to JSON output</li> <li>Maintain all existing functionality</li> <li>Add comprehensive field mapping from CSV to database</li> <li>Dependencies: sqlite3 (built-in Python)</li> </ul>"},{"location":"notes/pitch-pipeline-TODO/#task-2-create-pitch-manager","title":"[ ] Task 2: Create pitch manager","text":"<ul> <li>File: <code>scripts/pitch_manager.py</code></li> <li>Features:</li> <li><code>--list [--status &lt;status&gt;]</code> - Show pitches with optional filtering</li> <li><code>--research &lt;submission_id&gt;</code> - Run deepsearch and update database</li> <li><code>--status &lt;submission_id&gt; &lt;new_status&gt;</code> - Update pitch status</li> <li><code>--create-character &lt;submission_id&gt;</code> - Create character folder structure</li> <li><code>--export-json</code> - Update submissions.json from database</li> <li>Dependencies: sqlite3, integration with existing deepsearch.py</li> </ul>"},{"location":"notes/pitch-pipeline-TODO/#phase-2-integration-testing","title":"Phase 2: Integration &amp; Testing","text":""},{"location":"notes/pitch-pipeline-TODO/#task-3-test-with-sample-data","title":"[ ] Task 3: Test with sample data","text":"<ul> <li>Use blocktank.csv for testing</li> <li>Verify database operations</li> <li>Test research workflow</li> <li>Validate character folder creation</li> </ul>"},{"location":"notes/pitch-pipeline-TODO/#task-4-documentation-updates","title":"[ ] Task 4: Documentation updates","text":"<ul> <li>Update CLAUDE.md with new workflow</li> <li>Add usage examples</li> <li>Document database schema</li> </ul>"},{"location":"notes/pitch-pipeline-TODO/#phase-3-future-enhancements-later","title":"Phase 3: Future Enhancements (Later)","text":""},{"location":"notes/pitch-pipeline-TODO/#task-5-static-html-dashboard-hold-for-later-discussion","title":"[ ] Task 5: Static HTML dashboard (hold for later discussion)","text":"<ul> <li>Read from submissions.json</li> <li>Status filtering and search</li> <li>Manual management interface</li> </ul>"},{"location":"notes/pitch-pipeline-TODO/#file-structure-after-implementation","title":"File Structure (After Implementation)","text":"<pre><code>scripts/\n\u251c\u2500\u2500 sheet_processor.py          # Enhanced from sheet_to_markdown.py\n\u251c\u2500\u2500 pitch_manager.py           # New management tool\n\u251c\u2500\u2500 deepsearch.py             # Existing (unchanged)\n\u2514\u2500\u2500 ...\n\ndata/\n\u251c\u2500\u2500 pitches.db                # SQLite database\n\u251c\u2500\u2500 submissions.json          # JSON export for dashboard\n\u2514\u2500\u2500 ...\n\ncharacters/                   # Existing structure\n\u2514\u2500\u2500 [character_folders]/\n</code></pre>"},{"location":"notes/pitch-pipeline-TODO/#commands-reference-post-implementation","title":"Commands Reference (Post-Implementation)","text":""},{"location":"notes/pitch-pipeline-TODO/#daily-processing","title":"Daily Processing","text":"<pre><code># Update from Google Sheets\npython scripts/sheet_processor.py -s \"Block Tank Pitch Submission\" -o ./data -j\n\n# List new submissions\npython scripts/pitch_manager.py --list --status submitted\n</code></pre>"},{"location":"notes/pitch-pipeline-TODO/#research-workflow","title":"Research Workflow","text":"<pre><code># Research specific pitch\npython scripts/pitch_manager.py --research 4Z5rGo\n\n# Update status manually\npython scripts/pitch_manager.py --status 4Z5rGo in_progress\n\n# Create character folder\npython scripts/pitch_manager.py --create-character 4Z5rGo\n</code></pre>"},{"location":"notes/pitch-pipeline-TODO/#maintenance","title":"Maintenance","text":"<pre><code># Export updated JSON for dashboard\npython scripts/pitch_manager.py --export-json\n\n# List all pitches by status\npython scripts/pitch_manager.py --list --status researched\n</code></pre>"},{"location":"notes/pitch-pipeline-TODO/#notes","title":"Notes","text":"<ul> <li>Maintain backward compatibility with existing sheet_to_markdown.py functionality</li> <li>SQLite provides reliable operations, JSON provides dashboard compatibility</li> <li>Research integration should preserve existing deepsearch.py behavior</li> <li>Character folder creation should follow existing patterns in characters/ directory</li> </ul>"},{"location":"notes/tasks-pitch/","title":"Clank Tank Pitch Management System","text":""},{"location":"notes/tasks-pitch/#overview","title":"\ud83c\udfaf Overview","text":"<p>Build a comprehensive Tally/Typeform-based pitch submission and management system that: 1. Accepts pitch submissions through Tally/Typeform \u2192 Google Sheets pipeline 2. Tracks pitch status from submission to episode completion 3. Automatically enriches pitch data using research tools (deepsearch.py) 4. Provides static HTML dashboard for pipeline management (GitHub Pages compatible) 5. Integrates with existing episode generation workflow</p>"},{"location":"notes/tasks-pitch/#current-state-analysis","title":"\ud83d\udccb Current State Analysis","text":""},{"location":"notes/tasks-pitch/#what-exists","title":"\u2705 What Exists","text":"<ul> <li><code>scripts/webhook.py</code> - Discord bot foundation with embed support</li> <li><code>scripts/deepsearch.py</code> - AI-powered research and data enrichment</li> <li><code>scripts/sheet_to_markdown.py</code> - Google Sheets to character data conversion</li> <li>Character directory structure in <code>characters/*/</code></li> <li>Episode recording and YouTube upload pipeline</li> </ul>"},{"location":"notes/tasks-pitch/#whats-missing","title":"\u274c What's Missing","text":"<ul> <li>Discord bot for pitch submissions</li> <li>Pitch status tracking database</li> <li>Web dashboard for management</li> <li>Automated workflow from pitch to character creation</li> <li>Integration between Discord submissions and existing pipeline</li> </ul>"},{"location":"notes/tasks-pitch/#task-breakdown","title":"\ud83d\udd27 Task Breakdown","text":""},{"location":"notes/tasks-pitch/#phase-1-discord-bot-implementation","title":"Phase 1: Discord Bot Implementation","text":""},{"location":"notes/tasks-pitch/#task-p11-discord-pitch-submission-bot","title":"Task P1.1: Discord Pitch Submission Bot","text":"<ul> <li>File: <code>scripts/pitch_bot.py</code></li> <li>Purpose: Handle pitch submissions via Discord</li> <li>Requirements:</li> <li>Monitor <code>#pitch-submissions</code> channel</li> <li>Validate pitch format (Name, Project, Pitch \u22642000 chars, Contact)</li> <li>Store submissions in database</li> <li>Provide immediate feedback (\u2705/\u274c reactions)</li> <li>Handle duplicate submissions gracefully</li> </ul>"},{"location":"notes/tasks-pitch/#task-p12-pitch-validation-system","title":"Task P1.2: Pitch Validation System","text":"<ul> <li>Purpose: Ensure pitch quality and completeness</li> <li>Requirements:</li> <li>Required fields validation</li> <li>Character length limits (total \u22642000, pitch \u22641800)</li> <li>Contact information format validation</li> <li>Profanity/spam filtering</li> <li>Rate limiting per user</li> </ul>"},{"location":"notes/tasks-pitch/#phase-2-database-status-tracking","title":"Phase 2: Database &amp; Status Tracking","text":""},{"location":"notes/tasks-pitch/#task-p21-sqlite-database-schema","title":"Task P2.1: SQLite Database Schema","text":"<ul> <li>File: <code>scripts/pitch_database.py</code></li> <li>Purpose: Store and manage pitch submissions</li> <li>Requirements:</li> <li>Table: pitches (id, discord_user, name, project, pitch_text, contact, status, timestamps)</li> <li>Table: status_history (pitch_id, status, changed_at, notes)</li> <li>Status enum: not-started, in-progress, enriched, character-created, completed, aired</li> <li>Database migration utilities</li> </ul>"},{"location":"notes/tasks-pitch/#task-p22-status-management-api","title":"Task P2.2: Status Management API","text":"<ul> <li>Purpose: Update and track pitch progression</li> <li>Requirements:</li> <li>Status transition validation</li> <li>Automatic timestamp tracking</li> <li>Bulk status updates</li> <li>Query interface for dashboard</li> </ul>"},{"location":"notes/tasks-pitch/#phase-3-data-enrichment-integration","title":"Phase 3: Data Enrichment Integration","text":""},{"location":"notes/tasks-pitch/#task-p31-automated-research-pipeline","title":"Task P3.1: Automated Research Pipeline","text":"<ul> <li>File: <code>scripts/enrich_pitch.py</code></li> <li>Purpose: Enhance pitch data using deepsearch.py</li> <li>Requirements:</li> <li>Trigger when status changes to 'in-progress'</li> <li>Extract company/project info from pitch text</li> <li>Run deepsearch.py with pitch context</li> <li>Store enriched data in database</li> <li>Update status to 'enriched'</li> </ul>"},{"location":"notes/tasks-pitch/#task-p32-character-generation-integration","title":"Task P3.2: Character Generation Integration","text":"<ul> <li>Purpose: Convert enriched pitch to character data</li> <li>Requirements:</li> <li>Create character directory structure</li> <li>Generate raw_data.json from pitch + enrichment</li> <li>Create README.md with formatted pitch info</li> <li>Update status to 'character-created'</li> </ul>"},{"location":"notes/tasks-pitch/#phase-4-web-dashboard","title":"Phase 4: Web Dashboard","text":""},{"location":"notes/tasks-pitch/#task-p41-dashboard-backend","title":"Task P4.1: Dashboard Backend","text":"<ul> <li>File: <code>scripts/dashboard_server.py</code></li> <li>Purpose: API for pitch management interface</li> <li>Requirements:</li> <li>REST API for pitch CRUD operations</li> <li>Status filtering and search</li> <li>Real-time updates via WebSocket</li> <li>Export functionality (CSV, JSON)</li> </ul>"},{"location":"notes/tasks-pitch/#task-p42-dashboard-frontend","title":"Task P4.2: Dashboard Frontend","text":"<ul> <li>File: <code>static/dashboard.html</code></li> <li>Purpose: Visual interface for pitch management</li> <li>Requirements:</li> <li>Pitch queue with status colors</li> <li>Filter by status, search by name/project</li> <li>Quick actions (enrich, create character, export)</li> <li>Metrics dashboard (counts by status, timeline)</li> </ul>"},{"location":"notes/tasks-pitch/#phase-5-automation-workflow","title":"Phase 5: Automation &amp; Workflow","text":""},{"location":"notes/tasks-pitch/#task-p51-automated-pipeline-script","title":"Task P5.1: Automated Pipeline Script","text":"<ul> <li>File: <code>scripts/auto_process_pitches.py</code></li> <li>Purpose: Process pitches automatically</li> <li>Requirements:</li> <li>Check for pitches ready for next stage</li> <li>Run enrichment for 'in-progress' pitches</li> <li>Create characters for 'enriched' pitches</li> <li>Schedule processing with configurable intervals</li> <li>Error handling and retry logic</li> </ul>"},{"location":"notes/tasks-pitch/#task-p52-integration-with-episode-generation","title":"Task P5.2: Integration with Episode Generation","text":"<ul> <li>Purpose: Connect pitch system to episode creation</li> <li>Requirements:</li> <li>Mark pitches as 'completed' when episode is generated</li> <li>Update to 'aired' when episode is published</li> <li>Track episode IDs and YouTube URLs</li> <li>Generate reports on pitch-to-episode conversion</li> </ul>"},{"location":"notes/tasks-pitch/#phase-6-monitoring-administration","title":"Phase 6: Monitoring &amp; Administration","text":""},{"location":"notes/tasks-pitch/#task-p61-admin-commands","title":"Task P6.1: Admin Commands","text":"<ul> <li>Purpose: Discord admin interface for management</li> <li>Requirements:</li> <li><code>/pitch status &lt;id&gt;</code> - Check pitch status</li> <li><code>/pitch approve &lt;id&gt;</code> - Move to in-progress</li> <li><code>/pitch reject &lt;id&gt;</code> - Mark as rejected</li> <li><code>/pitch stats</code> - Show pipeline metrics</li> <li>Role-based access control</li> </ul>"},{"location":"notes/tasks-pitch/#task-p62-logging-analytics","title":"Task P6.2: Logging &amp; Analytics","text":"<ul> <li>Purpose: Track system performance and usage</li> <li>Requirements:</li> <li>Structured logging for all operations</li> <li>Performance metrics (processing times)</li> <li>User engagement analytics</li> <li>Error tracking and alerting</li> </ul>"},{"location":"notes/tasks-pitch/#implementation-priority","title":"\ud83c\udfd7\ufe0f Implementation Priority","text":""},{"location":"notes/tasks-pitch/#week-1-foundation","title":"Week 1: Foundation","text":"<ol> <li>Task P1.1: Discord pitch submission bot</li> <li>Task P2.1: SQLite database schema</li> <li>Task P1.2: Pitch validation system</li> </ol>"},{"location":"notes/tasks-pitch/#week-2-core-processing","title":"Week 2: Core Processing","text":"<ol> <li>Task P3.1: Automated research pipeline</li> <li>Task P3.2: Character generation integration</li> <li>Task P2.2: Status management API</li> </ol>"},{"location":"notes/tasks-pitch/#week-3-dashboard-interface","title":"Week 3: Dashboard &amp; Interface","text":"<ol> <li>Task P4.1: Dashboard backend</li> <li>Task P4.2: Dashboard frontend</li> <li>Task P6.1: Admin commands</li> </ol>"},{"location":"notes/tasks-pitch/#week-4-automation-polish","title":"Week 4: Automation &amp; Polish","text":"<ol> <li>Task P5.1: Automated pipeline script</li> <li>Task P5.2: Episode generation integration</li> <li>Task P6.2: Logging &amp; analytics</li> </ol>"},{"location":"notes/tasks-pitch/#expected-file-structure","title":"\ud83d\udcc1 Expected File Structure","text":"<pre><code>clanktank/\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 pitch_bot.py              # NEW: Discord submission bot\n\u2502   \u251c\u2500\u2500 pitch_database.py         # NEW: Database management\n\u2502   \u251c\u2500\u2500 enrich_pitch.py           # NEW: Research integration\n\u2502   \u251c\u2500\u2500 dashboard_server.py       # NEW: Web dashboard API\n\u2502   \u251c\u2500\u2500 auto_process_pitches.py   # NEW: Automation pipeline\n\u2502   \u251c\u2500\u2500 deepsearch.py            # EXISTING: Enhanced for pitches\n\u2502   \u2514\u2500\u2500 webhook.py               # EXISTING: Template reference\n\u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 dashboard.html           # NEW: Management interface\n\u2502   \u251c\u2500\u2500 dashboard.css           # NEW: Styling\n\u2502   \u2514\u2500\u2500 dashboard.js            # NEW: Frontend logic\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 pitches.db             # NEW: SQLite database\n\u251c\u2500\u2500 characters/                # EXISTING: Auto-populated\n\u2514\u2500\u2500 config/\n    \u2514\u2500\u2500 pitch_config.json     # NEW: System configuration\n</code></pre>"},{"location":"notes/tasks-pitch/#new-workflow-target","title":"\ud83d\udd04 New Workflow (Target)","text":""},{"location":"notes/tasks-pitch/#user-submission","title":"User Submission","text":"<pre><code>Discord User \u2192 #pitch-submissions \u2192 Bot validates \u2192 Database stores \u2192 \u2705 Reaction\n</code></pre>"},{"location":"notes/tasks-pitch/#admin-processing","title":"Admin Processing","text":"<pre><code>Dashboard \u2192 Select pitch \u2192 Enrich \u2192 Create character \u2192 Mark completed\n</code></pre>"},{"location":"notes/tasks-pitch/#automated-pipeline","title":"Automated Pipeline","text":"<pre><code>Cron job \u2192 Find in-progress pitches \u2192 Run deepsearch \u2192 Create characters \u2192 Update status\n</code></pre>"},{"location":"notes/tasks-pitch/#success-criteria","title":"\ud83c\udfaf Success Criteria","text":"<ul> <li>[ ] Discord bot accepts and validates pitch submissions</li> <li>[ ] All pitches tracked in database with status progression</li> <li>[ ] Automated enrichment using deepsearch.py</li> <li>[ ] Web dashboard shows real-time pipeline status</li> <li>[ ] Character directories auto-created from pitches</li> <li>[ ] Integration with existing episode generation workflow</li> <li>[ ] Admin tools for pitch management</li> <li>[ ] Comprehensive logging and error handling</li> </ul>"},{"location":"notes/tasks-pitch/#dependencies","title":"\ud83d\udea7 Dependencies","text":""},{"location":"notes/tasks-pitch/#new-dependencies-python","title":"New Dependencies (Python)","text":"<pre><code>pip install discord.py sqlite3 flask websockets\n</code></pre>"},{"location":"notes/tasks-pitch/#existing-dependencies","title":"Existing Dependencies","text":"<ul> <li>OpenRouter API (deepsearch.py)</li> <li>Discord bot token</li> <li>Google Sheets API (existing workflow)</li> </ul> <p>Created: 2025-01-20 Pitch Management Target completion: 2025-02-24</p>"},{"location":"notes/tasks/","title":"JedAI Council Automation Tasks","text":""},{"location":"notes/tasks/#overview","title":"\ud83c\udfaf Overview","text":"<p>Transform the current manual JedAI Council recording and uploading process into a streamlined, automated workflow that: 1. Fetches the latest episode automatically 2. Records with proper episode numbering (S1E#) 3. Generates YouTube metadata automatically 4. Uploads to YouTube and adds to playlist</p>"},{"location":"notes/tasks/#latest-progress","title":"\ud83d\udd04 Latest Progress","text":"<p>\u2705 COMPLETED Tasks 1.1 &amp; 1.2: Episode Discovery &amp; Numbering \u2705 ENHANCED - Latest Episode: \"The Wisdom of Transitions\" \u2192 S1E10 (2025-06-05) - Specific URL Support: Now supports episode URLs for testing - Sequential Numbering: Smart episode numbering (S1E11, S1E12, etc.) - GitHub Workflow Ready: Permalink-based mapping for better CI/CD - Episode Mapping: Enhanced structure with metadata</p> <p>\ud83e\uddea Testing Completed: - \u2705 Latest episode: S1E10 (API-based) - \u2705 Specific URLs: S1E11 (<code>the-stealth-strategy</code>) and S1E12 (<code>crypto-wisdom-in-the-ai-age</code>) - \u2705 Permalink-based tracking for workflow automation</p> <p>\ud83c\udfaf Next: Implement YouTube metadata generation and playlist management automation</p> <p>\u2705 MAJOR MILESTONE: Episode Discovery \u2192 Recording Integration Complete! - Episode fetcher automatically generates S1E# episodes - Recorder now accepts episode data and creates proper S1E# filenames - Full episode data flow from API/URL \u2192 structured files</p>"},{"location":"notes/tasks/#current-state-analysis","title":"\ud83d\udccb Current State Analysis","text":""},{"location":"notes/tasks/#what-works","title":"\u2705 What Works","text":"<ul> <li><code>recorder.js</code> successfully records episodes</li> <li><code>upload_to_youtube.py</code> uploads videos to YouTube</li> <li><code>batch_create_youtube_meta.js</code> generates metadata (batch mode)</li> <li>YouTube authentication is working</li> </ul>"},{"location":"notes/tasks/#what-needs-improvement","title":"\u274c What Needs Improvement","text":"<ul> <li>Manual episode URL fetching</li> <li>Inconsistent filename formats (timestamps vs episode numbers)</li> <li>Manual metadata generation</li> <li>No playlist management</li> <li>No episode numbering logic</li> <li>No automation between steps</li> </ul>"},{"location":"notes/tasks/#task-breakdown","title":"\ud83d\udd27 Task Breakdown","text":""},{"location":"notes/tasks/#phase-1-api-integration-episode-detection","title":"Phase 1: API Integration &amp; Episode Detection","text":""},{"location":"notes/tasks/#task-11-create-episode-fetcher-script","title":"Task 1.1: Create Episode Fetcher Script","text":"<ul> <li>File: <code>scripts/fetch_latest_episode.js</code></li> <li>Purpose: Fetch latest episode from Shmotime API</li> <li>Requirements:</li> <li>GET <code>https://shmotime.com/wp-json/shmotime/v1/get-latest-episode?show_id=2578</code></li> <li>Parse response for episode ID, title, permalink, date, thumbnail</li> <li>Determine episode number (S1E#) based on episode ID or date</li> <li>Return structured episode data</li> </ul>"},{"location":"notes/tasks/#task-12-episode-number-logic","title":"Task 1.2: Episode Number Logic","text":"<ul> <li>Purpose: Convert episode data to S1E# format</li> <li>Requirements:</li> <li>Map episode IDs to episode numbers</li> <li>Handle missing episodes gracefully</li> <li>Store episode mapping for consistency</li> </ul>"},{"location":"notes/tasks/#phase-2-enhanced-recorder","title":"Phase 2: Enhanced Recorder","text":""},{"location":"notes/tasks/#task-21-update-recorder-output-format","title":"Task 2.1: Update Recorder Output Format","text":"<ul> <li>File: <code>scripts/recorder.js</code></li> <li>Purpose: Output files with proper naming convention</li> <li>Requirements:</li> <li>Accept episode metadata as input</li> <li>Generate filenames: <code>S1E#_JedAI-Council-Title.mp4</code></li> <li>Generate session log: <code>S1E#_session-log.json</code></li> <li>Remove timestamp from video filename</li> </ul>"},{"location":"notes/tasks/#task-22-recorder-episode-metadata-integration","title":"Task 2.2: Recorder Episode Metadata Integration","text":"<ul> <li>Purpose: Pass episode data to recorder</li> <li>Requirements:</li> <li>Accept <code>--episode-data</code> parameter with JSON</li> <li>Use episode data for filename generation</li> <li>Include episode metadata in session logs</li> </ul>"},{"location":"notes/tasks/#phase-3-automatic-metadata-generation","title":"Phase 3: Automatic Metadata Generation","text":""},{"location":"notes/tasks/#task-31-single-episode-metadata-generator","title":"Task 3.1: Single Episode Metadata Generator","text":"<ul> <li>File: <code>scripts/create_youtube_meta.js</code></li> <li>Purpose: Replace batch processor with single-episode generator</li> <li>Requirements:</li> <li>Accept episode data and video file path</li> <li>Generate YouTube metadata JSON</li> <li>Calculate proper upload date based on episode number</li> <li>Include thumbnail path if available</li> </ul>"},{"location":"notes/tasks/#task-32-enhanced-description-generation","title":"Task 3.2: Enhanced Description Generation","text":"<ul> <li>Purpose: Create rich episode descriptions</li> <li>Requirements:</li> <li>Use episode excerpt/premise from API</li> <li>Include episode date, show links</li> <li>Format consistently for YouTube</li> </ul>"},{"location":"notes/tasks/#phase-4-playlist-management","title":"Phase 4: Playlist Management","text":""},{"location":"notes/tasks/#task-41-add-playlist-support-to-upload-script","title":"Task 4.1: Add Playlist Support to Upload Script","text":"<ul> <li>File: <code>scripts/upload_to_youtube.py</code></li> <li>Purpose: Automatically add uploaded videos to playlist</li> <li>Requirements:</li> <li>Add <code>--playlist-id</code> parameter</li> <li>Use YouTube API to add video to playlist after upload</li> <li>Handle playlist errors gracefully</li> </ul>"},{"location":"notes/tasks/#task-42-playlist-configuration","title":"Task 4.2: Playlist Configuration","text":"<ul> <li>Purpose: Store playlist ID configuration</li> <li>Requirements:</li> <li>JedAI Council playlist: <code>PLp5K4ceh2pR0-rg8WPuFnlLTsreQ7HOQx</code></li> <li>Support for multiple playlists if needed</li> </ul>"},{"location":"notes/tasks/#phase-5-end-to-end-automation","title":"Phase 5: End-to-End Automation","text":""},{"location":"notes/tasks/#task-51-main-automation-script","title":"Task 5.1: Main Automation Script","text":"<ul> <li>File: <code>scripts/auto_record_upload.js</code></li> <li>Purpose: Orchestrate the entire workflow</li> <li>Requirements:</li> <li>Fetch latest episode or process specific URL</li> <li>Check if already recorded (permalink-based)</li> <li>Record episode with proper naming</li> <li>Generate YouTube metadata</li> <li>Upload to YouTube</li> <li>Add to playlist</li> <li>Log results</li> <li>GitHub Workflow Considerations:</li> <li>Environment variable support for credentials</li> <li>Proper exit codes for CI/CD</li> <li>Separate concerns (fetch \u2192 record \u2192 upload)</li> </ul>"},{"location":"notes/tasks/#task-52-duplicate-detection-github-workflow-support","title":"Task 5.2: Duplicate Detection &amp; GitHub Workflow Support","text":"<ul> <li>Purpose: Avoid re-recording + CI/CD optimization</li> <li>Requirements:</li> <li>Check existing recordings directory</li> <li>Compare permalinks (not just episode IDs)</li> <li>Skip if already processed</li> <li>GitHub Actions workflow separation:<ul> <li><code>workflow_dispatch</code> for manual episodes</li> <li><code>schedule</code> for daily automation</li> <li>Environment-based configuration</li> </ul> </li> </ul>"},{"location":"notes/tasks/#phase-6-error-handling-monitoring","title":"Phase 6: Error Handling &amp; Monitoring","text":""},{"location":"notes/tasks/#task-61-robust-error-handling","title":"Task 6.1: Robust Error Handling","text":"<ul> <li>Purpose: Handle common failure scenarios</li> <li>Requirements:</li> <li>Network timeouts</li> <li>Recording failures</li> <li>Upload failures</li> <li>API rate limits</li> </ul>"},{"location":"notes/tasks/#task-62-logging-monitoring","title":"Task 6.2: Logging &amp; Monitoring","text":"<ul> <li>Purpose: Track automation success/failure</li> <li>Requirements:</li> <li>Structured logging</li> <li>Success/failure tracking</li> <li>Performance metrics</li> </ul>"},{"location":"notes/tasks/#implementation-priority","title":"\ud83c\udfd7\ufe0f Implementation Priority","text":""},{"location":"notes/tasks/#week-1-foundation","title":"Week 1: Foundation","text":"<ol> <li>\u2705 Task 1.1: Episode fetcher script \u2705 COMPLETED</li> <li>\u2705 Task 1.2: Episode numbering logic \u2705 COMPLETED</li> <li>\u2705 Task 2.1: Recorder filename updates \u2705 COMPLETED</li> </ol>"},{"location":"notes/tasks/#week-2-core-features","title":"Week 2: Core Features","text":"<ol> <li>\u2705 Task 3.1: Single episode metadata generator</li> <li>\u2705 Task 4.1: Playlist support in upload script</li> <li>\u2705 Task 2.2: Recorder metadata integration</li> </ol>"},{"location":"notes/tasks/#week-3-automation","title":"Week 3: Automation","text":"<ol> <li>\u2705 Task 5.1: Main automation script</li> <li>\u2705 Task 5.2: Duplicate detection</li> <li>\u2705 Task 3.2: Enhanced descriptions</li> </ol>"},{"location":"notes/tasks/#week-4-polish","title":"Week 4: Polish","text":"<ol> <li>\u2705 Task 6.1: Error handling</li> <li>\u2705 Task 6.2: Logging &amp; monitoring</li> <li>\u2705 Documentation updates</li> </ol>"},{"location":"notes/tasks/#expected-file-structure","title":"\ud83d\udcc1 Expected File Structure","text":"<pre><code>clanktank/\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u251c\u2500\u2500 daily-episode.yml       # NEW: Daily automation\n\u2502       \u2514\u2500\u2500 manual-episode.yml      # NEW: Manual processing\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 fetch_latest_episode.js     # \u2705 COMPLETED: API + URL support\n\u2502   \u251c\u2500\u2500 recorder.js                 # UPDATED: Better naming\n\u2502   \u251c\u2500\u2500 create_youtube_meta.js      # NEW: Single episode metadata\n\u2502   \u251c\u2500\u2500 upload_to_youtube.py        # UPDATED: Playlist support\n\u2502   \u251c\u2500\u2500 auto_record_upload.js       # NEW: Main automation\n\u2502   \u2514\u2500\u2500 batch_create_youtube_meta.js # DEPRECATED after migration\n\u251c\u2500\u2500 recordings/\n\u2502   \u251c\u2500\u2500 S1E10_JedAI-Council-Title.mp4           # NEW format\n\u2502   \u251c\u2500\u2500 S1E10_session-log.json                 # NEW format\n\u2502   \u251c\u2500\u2500 S1E10_youtube-meta.json                # NEW format\n\u2502   \u2514\u2500\u2500 old/                                   # Legacy files\n\u2514\u2500\u2500 config/\n    \u2514\u2500\u2500 episode_mapping.json                   # \u2705 COMPLETED: Permalink-based\n</code></pre> <p>GitHub Workflow Integration: - Permalink-based tracking: Avoids ID conflicts across workflow runs - Separation of concerns: Fetch \u2192 Record \u2192 Upload can be separate jobs - Environment variables: Support for secrets and configuration - Manual testing: Support for specific episode URLs</p>"},{"location":"notes/tasks/#new-workflow-target","title":"\ud83d\udd04 New Workflow (Target)","text":""},{"location":"notes/tasks/#automated-daily-process","title":"Automated Daily Process","text":"<pre><code># Single command to process latest episode\nnode scripts/auto_record_upload.js\n</code></pre> <p>What it does: 1. Fetches latest episode from API 2. Checks if already recorded 3. Records with format: <code>S1E#_JedAI-Council-Title.mp4</code> 4. Generates <code>S1E#_youtube-meta.json</code> 5. Uploads to YouTube 6. Adds to JedAI Council playlist 7. Logs success/failure</p>"},{"location":"notes/tasks/#manual-override","title":"Manual Override","text":"<pre><code># Force record specific episode\nnode scripts/auto_record_upload.js --force --episode-id=4713\n\n# Record only (no upload)\nnode scripts/auto_record_upload.js --record-only\n\n# Upload existing recording\nnode scripts/auto_record_upload.js --upload-only --episode-id=S1E10\n</code></pre>"},{"location":"notes/tasks/#success-criteria","title":"\ud83c\udfaf Success Criteria","text":"<ul> <li>[ ] One command processes latest episode end-to-end</li> <li>[ ] Consistent filename format: <code>S1E#_JedAI-Council-Title.mp4</code></li> <li>[ ] Automatic YouTube upload with correct metadata</li> <li>[ ] Automatic playlist addition</li> <li>[ ] Duplicate detection prevents re-recording</li> <li>[ ] Comprehensive error handling and logging</li> <li>[ ] Documentation updated to reflect new workflow</li> </ul>"},{"location":"notes/tasks/#dependencies","title":"\ud83d\udea7 Dependencies","text":""},{"location":"notes/tasks/#new-dependencies-nodejs","title":"New Dependencies (Node.js)","text":"<pre><code>npm install axios fs-extra\n</code></pre>"},{"location":"notes/tasks/#existing-dependencies","title":"Existing Dependencies","text":"<ul> <li>puppeteer, puppeteer-stream (recording)</li> <li>google-api-python-client (YouTube upload)</li> </ul>"},{"location":"notes/tasks/#next-steps","title":"\ud83d\udcdd Next Steps","text":"<ol> <li>Start with Task 1.1: Create the episode fetcher script</li> <li>Test API integration: Verify episode data format</li> <li>Update recorder.js: Implement new filename format</li> <li>Create metadata generator: Single episode version</li> <li>Add playlist support: Update upload script</li> <li>Build automation script: Tie everything together</li> </ol> <p>Created: 2025-01-20 Target completion: 2025-02-17 </p>"}]}